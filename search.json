[{"path":"index.html","id":"syllabus","chapter":"1 Syllabus","heading":"1 Syllabus","text":"","code":""},{"path":"index.html","id":"basic-info","chapter":"1 Syllabus","heading":"1.1 Basic Info","text":"Psyc193L: Introduction R Social SciencesSummer Session 1 2022Lecture: MTuWTh 11:00a-11:50aLab: TuTh 12:00p-12:50phttps://ucsd.zoom.us/j/93535155608","code":""},{"path":"index.html","id":"course-description","chapter":"1 Syllabus","heading":"1.2 Course Description","text":"Whether academia, industry, clinical settings, interested social sciences data science, going work data. ’ll using data perform analyses, make visualizations, try answer questions. Using programming languages coding-based approaches increasingly favored GUI-based approaches (e.g., Excel, JMP, SPSS, etc.). goal course provide introduction one programming language, R.","code":""},{"path":"index.html","id":"course-objectives","chapter":"1 Syllabus","heading":"1.3 Course Objectives","text":"3 main sections content course:R BasicsData Manipulation CleaningData VisualizationAlong way, learn use R …Import data cleaningWrangle Prep data analyzingMake publication-ready visualizationsCommunicate learned data …literate programming documentsIn APA formatted written reportContribute open reproducible science …Adopting good coding project management practicesSharing data research reports onlineThis course designed , end, able use R successfully accomplish basic tasks ’ll classes lab volunteering. Content chosen specifically based students mentioned often.","code":""},{"path":"index.html","id":"what-kind-of-preparation-is-expected-for-this-course","chapter":"1 Syllabus","heading":"1.4 What Kind of Preparation Is Expected For This Course?","text":"None! prerequisites course, need prior knowledge experience coding. However, experience, may find useful.","code":""},{"path":"index.html","id":"instruction-team","chapter":"1 Syllabus","heading":"1.5 Instruction Team","text":"ProfessorName: Ethan HurwitzEmail: ehurwitz@ucsd.eduOffice Hours: TBD","code":""},{"path":"index.html","id":"lecture-vs.-lab-sessions","chapter":"1 Syllabus","heading":"1.6 “Lecture” vs. “Lab” Sessions","text":"official schedule classes specifies separate “lecture” “lab” sessions course, take distinction seriously. “Lecture” sessions consist exclusively traditional lecture, “lab” sessions consist exclusively traditional guided laboratory exercises. given day, likely encounter mix brief lecture, group discussion, /hands-activities.","code":""},{"path":"index.html","id":"what-tools-will-we-be-using-in-this-class","chapter":"1 Syllabus","heading":"1.7 What Tools Will We Be Using In This Class?","text":"course materials free. enough expenses, interested adding unnecessarily.Computer R RStudio\nprogramming course, hard get without computer! need download R RStudio.\ncan download R .\ncan download RStudio . must download R RStudio.\ncan find quick tutorial getting R ready computer .\nprogramming course, hard get without computer! need download R RStudio.can download R .can download RStudio . must download R RStudio.can find quick tutorial getting R ready computer .Website\n’re looking right now! website functionally course textbook. upload lecture notes information.\n’re looking right now! website functionally course textbook. upload lecture notes information.Canvas\nCanvas used downloading submitting assignments well grades.\nCanvas used downloading submitting assignments well grades.Discord\nuse Discord central place manage questions class, communicate , easily copy/paste code sharing.\nuse Discord central place manage questions class, communicate , easily copy/paste code sharing.Zoom\nClass remote, class periods office hours held via Zoom!\nClass remote, class periods office hours held via Zoom!Anonymous Feedback\nplace submit anonymous feedback teaching team.\nplace submit anonymous feedback teaching team.","code":""},{"path":"index.html","id":"grades","chapter":"1 Syllabus","heading":"1.8 Grades","text":"","code":""},{"path":"index.html","id":"what-are-the-graded-assignments-in-this-class","chapter":"1 Syllabus","heading":"1.8.1 What Are the Graded Assignments In This Class?","text":"class EXAMS. Yes, right.Time constrained coding reflective real-world scenarios (least ’ll initially find ).Exams good job assessing whether learning want learn.However, must things grade . following:“Attendance” ActivitiesPractice exercises done lecture apply concepts/material introduced.\nForces engage material presented provides grade buffer easy points.\nForces engage material presented provides grade buffer easy points.Practice Problem Sets (x8)Similar format practice exercises built lectures.\nProvides opportunity practice applying new skills ideas , still directed, hand hold-y, way.\nProvides opportunity practice applying new skills ideas , still directed, hand hold-y, way.Skills Challenges (x3)one skills challenge 3 main sections content covered course.\nSkills challenges similar practice question sets may use different data.\nalso questions abstract/conceptual, requiring really think data working (similar outside class).\nSkills challenges similar practice question sets may use different data.also questions abstract/conceptual, requiring really think data working (similar outside class).Data Science VignettesCompleted towards end course, brief case studies actual data science projects undertaken Social Science fields. opportunity see skills learned course can directly applied various fields Social Sciences.Feedback FormsThis new course, using brand new material made largely scratch, first time offered. particularly interested getting feedback … everything! works, , engaging, boring, helpful, etc. brief feedback surveys material graded completion.Final ProjectThere two options, one directed one open.directed option, choose dataset specific questions must investigate try answer. open option, choose dataset come question(s) investigate try answer.options, :Include brief literature review provide sources help justify provide rationale hypothesized answers questions.Clean/change/modify/whatever data get form need, create visualizations summary statistics try test hypotheses.\nreminiscent Results section look like peer-reviewed journal article.\nreminiscent Results section look like peer-reviewed journal article.paper largely explaining done.\ndata contain?\nquestions?\npossible answers?\npredictions ?\nexpect see predictions accurate? accurate?\n(explain code words)?\nShow visualizations summary statistics explain/interpret .\ndata contain?questions?possible answers?predictions ?expect see predictions accurate? accurate?(explain code words)?Show visualizations summary statistics explain/interpret .thing create literate programming document project. expound later, code document create thoroughly annotated others’ understanding.information posted later.","code":""},{"path":"index.html","id":"how-does-grading-work","chapter":"1 Syllabus","heading":"1.8.2 How Does Grading Work?","text":"Graded assignments downloaded submitted Canvas. assignment, submit knit .html document source .Rmd document (later). assignments due Monday introduced. .e., anything released Week 1 due Monday Week 2, etc.course designed facilitate engagement effort material. going help learn develop R skills actually practice coding… lot. thus, view, counter-productive single heavily weighted assignment (exam) high amounts pressure find correct answer every problem.service , exams. Also, Practice Problem Sets, Skills Challenges, Data Science Vignettes, graded 50% completion 50% accuracy. earn completion portion credit, must demonstrate actually engaging material meaningful way trying best. earn credit just copy/pasting bit code, writing, “don’t know,” question. check . Additionally, several questions assignments singular correct answer. need use code accurately (can often done many ways)!","code":""},{"path":"index.html","id":"is-code-graded-for-quality","chapter":"1 Syllabus","heading":"1.8.3 Is Code Graded For Quality?","text":"!\nArtwork Horst (2022)\nintro course assumes prior knowledge. long code ultimately gives want, aren’t cheating breaking rules, doesn’t matter circuitous un-glamorous code !","code":""},{"path":"index.html","id":"grade-breakdown","chapter":"1 Syllabus","heading":"1.8.4 Grade Breakdown","text":"full grade breakdown follows:Final letter grades course assigned according following percentage scale:Grades rounded nearest hundredth point stated letter grade cutoffs applied without exception. plan “curve” grades course. instructor reserves right adjust students’ grades set value deemed appropriate, grades adjusted circumstances. end term, determine whether/award + grades outstanding performance.","code":""},{"path":"index.html","id":"course-policies-and-other-info","chapter":"1 Syllabus","heading":"1.9 Course Policies and Other Info","text":"","code":""},{"path":"index.html","id":"academic-integrity","chapter":"1 Syllabus","heading":"1.9.1 Academic Integrity","text":"students expected adhere standards academic integrity. Cheating kind assignment tolerated. disrespectful peers, university, . Especially considering course designed grading scheme rewards effort engagement disproportionately favor correctness.unsure might constitute violation academic integrity, consult /UCSD website academic integrity. evidence academic misconduct reported Academic Integrity Office. Consequences academic misconduct may include failing grade course official action University. Please, make . struggling course content anything else, reach .","code":""},{"path":"index.html","id":"attendance","chapter":"1 Syllabus","heading":"1.9.2 Attendance","text":"Attendance strongly encouraged, decision hold course remotely made order maximize ability students attend synchronously, required. Participation based activity completion, can completed asynchronously. However, much difficult way.","code":""},{"path":"index.html","id":"extensions","chapter":"1 Syllabus","heading":"1.9.3 Extensions","text":"assignments due dates give fair amount time complete . Granted, Summer Session course, things move accelerated pace. said, pretty reasonable person grant extensions reasonable circumstances (stressed warrant extension). Please reach struggling unique situations arise.","code":""},{"path":"index.html","id":"emaildiscord-dms","chapter":"1 Syllabus","heading":"1.9.4 Email/Discord DMs","text":"prefer ask question privately, may DM Zoom, email , send DM discord, come office hours. preference Zoom DM Discord DM, check frequently. choose email, please include “PSYC 193L” subject line emails. make sure see message timely manner.","code":""},{"path":"index.html","id":"osd-accommodations","chapter":"1 Syllabus","heading":"1.9.5 OSD Accommodations","text":"student documented disability accommodated according University policy. details, please consult Office Students Disabilities (OSD). require accommodation component course, please provide documentation OSD soon possible. Please note accommodations made retroactively circumstances. example, submit Skills Challenge afterward provide documentation require extra time, receive accommodation subsequent assignments one already taken.","code":""},{"path":"index.html","id":"extra-credit","chapter":"1 Syllabus","heading":"1.9.6 Extra Credit","text":"may earn 2 points extra credit added overall grade course. One points can earned completing SONA participation credits (worth 0.5 points ). sign experiment, go SONA website. earn full point extra credit class, must complete 2 SONA credits.second extra credit point can earned completing CAPEs course well additional survey sent end quarter. 80% class completes surveys, entire class earn 1 extra credit point.","code":""},{"path":"index.html","id":"what-we-expect-from-you","chapter":"1 Syllabus","heading":"1.10 What We Expect From You","text":"","code":""},{"path":"index.html","id":"values-we-share","chapter":"1 Syllabus","heading":"1.10.1 Values We Share:","text":"genuinely committed equality, diversity, inclusion course. Consistent UC San Diego Principles Community, aim provide intellectual environment welcoming, nurturing challenging, respects full spectrum human diversity race, ethnicity, gender identity, age, socioeconomic status, national origin, sexual orientation, disability, religion. sincerely hope share commitment actively creating maintaining safe environment founded mutual respect support. clear, course affirms people gender expressions gender identities. prefer called different name indicated class roster, please let know. Feel free correct preferred gender pronoun. questions concerns, please hesitate contact .","code":""},{"path":"index.html","id":"code-of-conduct","chapter":"1 Syllabus","heading":"1.10.2 Code of Conduct:","text":"need become friends fellow students class, expected treat courtesy respect. class harassment-free learning experience everyone regardless gender, gender identity expression, sexual orientation, disability, physical appearance, body size, race, age, religion. Harassment form tolerated. someone makes anyone else feel unsafe unwelcome, please report soon possible. comfortable approaching , may also contact UC San Diego Office Ombuds.","code":""},{"path":"index.html","id":"what-will-we-learn","chapter":"1 Syllabus","heading":"1.11 What Will We Learn?","text":"brand new course, first time offered. designing new course, lot content potentially cover!\nArtwork Horst (2022)\nchoosing content include, philosophy:wanted spend time practicing skills deeply learned, rather cover broader array material less depth.\nFocusing narrower amount content affords practice time content better learning.\nwanted spend time practicing skills deeply learned, rather cover broader array material less depth.Focusing narrower amount content affords practice time content better learning.decided focus skills things likely applying soon classI decided focus skills things likely applying soon classI spoke students come R classes, asked :\n/use often?\nwish learned?\nShowed things considered including asked thought helpful.\nspoke students come R classes, asked :/use often?wish learned?Showed things considered including asked thought helpful.answers questions helped determine content include class.answers questions helped determine content include class.always happy chat things outside scope course content! office hours email/discord/whatever.\n\n\n\n\n\n\nalways happy chat things outside scope course content! office hours email/discord/whatever.\n\n\n\n\n\n","code":""},{"path":"index.html","id":"schedule","chapter":"1 Syllabus","heading":"1.12 Schedule","text":"schedule tentative subject change.","code":""},{"path":"index.html","id":"words-of-advice","chapter":"1 Syllabus","heading":"1.13 Words of Advice","text":"Learning new language, particularly programming language, can frustrating times!\nArtwork Horst (2022)\ntruly roller coaster. time, effort, perseverance, surprised much know able (much can learn )!\nArtwork Horst (2022)\n","code":""},{"path":"index.html","id":"how-to-be-successful-in-this-course","chapter":"1 Syllabus","heading":"1.14 How to be Successful in this Course:","text":"Learn troubleshoot things . entails learning google debug. don’t want help , impactful learning can come solve problem .Learn troubleshoot things . entails learning google debug. don’t want help , impactful learning can come solve problem .Don’t hesitate ask questions help. try solely struggle alone, often work well. Ask teaching team classmates questions.Don’t hesitate ask questions help. try solely struggle alone, often work well. Ask teaching team classmates questions.Pay attention. obvious advanced hard course. don’t come prepared learn paying attention, really difficult .Pay attention. obvious advanced hard course. don’t come prepared learn paying attention, really difficult .Practice. , skill. learn R effectively just reading instructional material. actually . Write shitty code, fail, see went wrong, read error messages, write better code.Practice. , skill. learn R effectively just reading instructional material. actually . Write shitty code, fail, see went wrong, read error messages, write better code.Try keep good mindset. Acknowledge challenging, impossible, help available know expectations .Try keep good mindset. Acknowledge challenging, impossible, help available know expectations .proactive. Summer Session course, moving quickly material. constantly wait last minute things, run risk just missing work, falling behind trouble able catch .proactive. Summer Session course, moving quickly material. constantly wait last minute things, run risk just missing work, falling behind trouble able catch .","code":""},{"path":"index.html","id":"acknowledgements","chapter":"1 Syllabus","heading":"1.15 Acknowledgements","text":"’d like directly thank Emma Geller (endlessly), Judy Fan, Angela Lowe, sharing syllabi materials, teaching philosophy, mentorship. Throughout course, use many illustrations created brilliant Allison Horst.","code":""},{"path":"index.html","id":"references","chapter":"1 Syllabus","heading":"1.16 References","text":"","code":""},{"path":"why-use-r.html","id":"why-use-r","chapter":"2 Why use R?","heading":"2 Why use R?","text":"Consider main tasks done Social Sciences. sciences, work data. inspect manipulate data different ways, modify make amenable analysis visualizations. Visualizations statistical analyses help explore relationships observed real world test relationships experiments/studies. use communicate findings general public.want use R programming language vs Graphical User Interface (GUI) software like Excel, JMP, SPSS, SAS, ?start, simple practical considerations:R free. software .R can handle large datasets, GUI-based software struggle often crash .R open-source language, means anyone can contribute . results constantly evolving improving, increasing capabilities.consequence , R, can perform MUCH complex sophisticated statistical analyses data visualization. R literally created purpose!important, however, one main reasons use programming language accomplish main tasks Social Sciences Reproducibility.Excel conventional statistics software like SPSS use point--click GUI, thus lack simple way document share analyses. makes repeating editing work later hard need rely memory repetition. hard work backwards end result see arrived documented anywhere. “reinvent wheel” perform analysis across different data sets. R open-source interpreted programming language. Instead pointing clicking software accomplish tasks, write code execute . code write read evaluated line line documents save. practical consequences :Selfishly, allows prepare cleaning, analysis, visualization code beforehand. soon finish data collection, can just run code ’ve written immediately done!Also, allows automate tasks . way, repeat process clicking GUI re-thing many times.\nSource: trendct.org\nAllows create literate programming documents (markdown, later) – explain English code . drastically helps communicate results making code interpretable, even re-visit weeks/months/years line.\n“always working least one collaborator: Future .”-Hadley Wickham\n“always working least one collaborator: Future .”-Hadley WickhamOften times working non-collaborators, makes easier. People can build work (code writing) done see step step exactly work .Generally, helps others able see exactly run analyses . great practice open-science movement, can actually help fight back critiques questions data/analyses.\nArtwork Horst (2022)\nR particular instead programming language?“Python?” – might ask. learn ! Python great advanced machine learning (neural networks deep learning), fMRI image analyses, lots advanced programming things. However, data science tasks social scientists researchers often concerned , R preferable uses basic syntax approach everything. Python, toolbox may bigger, tools different.\nTobi Gerstenberg’s Statistical Methods Behavioral Social Sciences class\n","code":""},{"path":"why-use-r.html","id":"r-tools","chapter":"2 Why use R?","heading":"2.1 R tools","text":"","code":""},{"path":"why-use-r.html","id":"base-r-vs-rstudio","chapter":"2 Why use R?","heading":"2.1.1 Base R vs RStudio","text":"talking R, referred programming language R . use RStudio help write use R code. RStudio Integrated Development Environment (IDE). Basically, provides interface make writing using R code easier.R can downloaded .RStudio can downloaded .\nmust download R RStudio.\nmust download R RStudio.","code":""},{"path":"why-use-r.html","id":"rstudio-tour","chapter":"2 Why use R?","heading":"2.1.2 RStudio Tour","text":"Generally speaking, see 4 sections RStudio window. quickly overview :R file / documentThis contents file write code. usually largest section top left window.ConsoleThis code executed/ran, output code appears running. can run line code file clicking line pressing command+enter OSX, control+enter windows.EnvironmentThis defined objects , later.Extra/swiss army knife sectionThis graphs/visualizations make appear (plots), list installed loaded packages (Packages), R Documentation functions look (Help).","code":""},{"path":"why-use-r.html","id":"customize-your-rstudio","chapter":"2 Why use R?","heading":"2.1.3 Customize Your RStudio","text":"Looking default white screen long time can put lot strain eyes. RStudio comes lot different themes can apply going :preferences -> appearance. personally use custom theme called “Mojave Dark” (one see screenshots called “Cobalt”). theme use personal preference.Additionally, two settings tweaks make. Go preferences …R Markdown -> deselect “show output inline R markdown documents”Code -> Display -> check Rainbow Parentheses","code":""},{"path":"why-use-r.html","id":"file-types","chapter":"2 Why use R?","heading":"2.1.4 Different types of files","text":"three main types R files.R scripts (“fileName.r”) contain R code.R markdown notebooks (“fileName.rmd”) contain text, code, outputs.\nArtwork Horst (2022)\nRData files (“fileName.RData”), contain saved R objects/variables.use markdown files class enable easily annotate code create literate programming documents. also allow easily abide general programming philosophy called “separation concerns,” says code organized distinct sections, handling specific task. enables quickly navigate code know look something working intended.Markdown files can also used create documents help communicate data analysis pipeline. use Microsoft Word, every time figure result changes, go copy/paste bunch stuff, make million changes throughout, save new files, nuisance often error prone. R Markdown files living, breathing documents. Figures results automatically updated data changed. Also, everything one place. fact, looking output markdown file!\nArtwork Horst (2022)\n","code":""},{"path":"why-use-r.html","id":"components-of-a-markdown-file","chapter":"2 Why use R?","heading":"2.1.5 Components of a Markdown File","text":"Markdown files 2 components:General text, like isCode chunks, like :put code inside chunks, text outside. can comment text starting line hashtag. Comments text ignored R running code.create code chunk putting three back-ticks ( ``` ) two lines break ,adding set curly brackets {} “r” next first set back ticks: ```{r}can also insert code chunks pressing control+options+OSX control+alt+windows (RStudio full nifty shortcuts!)Generally speaking, want name code chunks help readily identify task section code handling.","code":"\n# This is a code chunk -- essentially mini r files\n# You put R code inside chunks, text outside.\n# You can comment out text by starting the line with a hashtag. \n  # Comments are text that is not run."},{"path":"why-use-r.html","id":"resources","chapter":"2 Why use R?","heading":"2.2 Resources","text":"good resources help throughout class R learning journey.R CheatsheetsR CheatsheetsA particularly useful cheatsheetA particularly useful cheatsheetSolutions common problemsSolutions common problemsWorking consoleWorking consoleKeyboard shortcutsKeyboard shortcutsMore Keyboard shortcutsMore Keyboard shortcutsTips efficient codeTips efficient codeFunctional Programming (Advanced)Functional Programming (Advanced)","code":""},{"path":"r-coding-basics.html","id":"r-coding-basics","chapter":"3 R Coding Basics","heading":"3 R Coding Basics","text":"Okay R?","code":""},{"path":"r-coding-basics.html","id":"operators","chapter":"3 R Coding Basics","heading":"3.1 Operators","text":"","code":""},{"path":"r-coding-basics.html","id":"arithmetic-operators","chapter":"3 R Coding Basics","heading":"3.1.1 Arithmetic Operators","text":"R programming language used statistical modeling, data analysis, visualization. core, uses operators evaluate different statements. basic form using arithmetic operators perform arithmetic operations:","code":"\n2 + 2\n#> [1] 4\n6 / 2\n#> [1] 3\n3^2\n#> [1] 9\n10 %% 4\n#> [1] 2\n3^2/2*5/2\n#> [1] 11.25"},{"path":"r-coding-basics.html","id":"comparison-operators","chapter":"3 R Coding Basics","heading":"3.1.2 Comparison Operators","text":"Return TRUE FALSE values (aka booleans):can look simple test expressions see evaluate:","code":"\n6 > 4\n#> [1] TRUE\n(2+4) < (8+8)\n#> [1] TRUE\n2.5 <= 2.5\n#> [1] TRUE"},{"path":"r-coding-basics.html","id":"logical-operators","chapter":"3 R Coding Basics","heading":"3.1.3 Logical Operators","text":"Look simple test expressions see evaluate:TRUE also = 1, FALSE also = 0.Programming languages often makes use booleans (TRUE FALSE), using logical operators simple logical test see expression evaluates TRUE FALSE. bit!\nNote: must use CAPS (spell logical’s name)\n","code":"\nTRUE & FALSE\n#> [1] FALSE\nTRUE | FALSE\n#> [1] TRUE\n!FALSE\n#> [1] TRUE\nTRUE < FALSE\n#> [1] FALSE\nTRUE + TRUE\n#> [1] 2\nTRUE + FALSE \n#> [1] 1"},{"path":"r-coding-basics.html","id":"variable-assignment","chapter":"3 R Coding Basics","heading":"3.2 Variable Assignment","text":"can also define objects (variables) save values strings code . Variables store information can access later. R, assign value variable assignment operator: = <-:x = 4x <- 4Think = <- mean “gets”. statements mean, “x gets 4”.R, conventionally, use <-. languages, use =. main argument using = sometimes can run trouble accidentally use = mean use ==. big deal languages performing arithmetic core. typically use = default since use one language, ’d recommend using <- beginner.reference access information stored variable, “call” (type code) variable’s name:R programming language, specific finicky. must precise code.Running code give :\nError: object ‘myvar’ found\nSmall typos like one can cause big issues!\nArtwork Horst (2022)\n","code":"\nx = 4\nx\n#> [1] 4\nx+2\n#> [1] 6\nx + x\n#> [1] 8\ny = x + 4\ny\n#> [1] 8\nz = \"Hello world\"\nz\n#> [1] \"Hello world\"\nmyVar = 4\nmyVar\n#> [1] 4\nmyVar = 4\nmyvar"},{"path":"r-coding-basics.html","id":"variabledata-modes-types","chapter":"3 R Coding Basics","heading":"3.3 Variable/Data modes (types)","text":"R classifies data works different types storage modes, can organized different categories:\nArtwork Horst (2022)\n. ContinuousNumeric – Whole numbers decimalsIntegers (int) - whole numbers\nDouble-precision (dbl) - real numbers (floating point numerical values)\nDouble-precision (dbl) - real numbers (floating point numerical values)B. DiscreteCharacter (chr) - string characters/text (can use \" ’)Logical (lgl) - logical TRUE FALSEFactor (fct) - factors, R uses represent categorical variables fixed possible values discrete data. Useful true categorical data, want override ordering character vectors improve displayThere data types (e.g., date) largely avoided .Variables automatically dynamically assigned one modes based assigned . can check type data using typeof() function (functions later!).","code":"\ny\n#> [1] 8\ntypeof(y)\n#> [1] \"double\"\nz\n#> [1] \"Hello world\"\ntypeof(z)\n#> [1] \"character\""},{"path":"r-coding-basics.html","id":"global-environment","chapter":"3 R Coding Basics","heading":"3.4 Global environment","text":"workspace’s global environment contain objects saved R session, including variables, functions, data, etc. can print workspace code ls(). Previously objects x, y, z, myVar saved. ls() ran, four objects seen.can remove objects environment rm() command.Notice x object longer . rm() permanent, careful!may thought, “y = x + 2, remove x, error?” good question answer , exact value x saved variable y. x dynamic value, rather set x = 4, anytime R reads x, replace 4. y set equal 4 + 2. R, variable declared (set = <-), value change unless explicitly overwrite .want clear entire workspace (good practice beginning script), type rm(list=ls()) – saying remove (rm) objects workspace (ls()).","code":"\nls()\n#> [1] \"myVar\" \"x\"     \"y\"     \"z\"\nrm(x)\n\nls()\n#> [1] \"myVar\" \"y\"     \"z\""},{"path":"r-coding-basics.html","id":"data-objects","chapter":"3 R Coding Basics","heading":"3.5 Data Objects","text":"obviously want evaluate simple expressions R. end, point going need save just single value variable! many different types data objects, structures can hold data. 2 particular focused : vectors data frames.","code":""},{"path":"r-coding-basics.html","id":"Vectors","chapter":"3 R Coding Basics","heading":"3.5.1 Vectors","text":"Often times want work series values (elements). (Atomic) Vectors exactly ! item vector element. initiate vector c():Arithmetic logical operations can performed vector (one computationally efficient ways code):Observe output . notice?elements vector type data. R automatically coerce (change) data types elements vector match . careful can often cause issues!","code":"\nmyVector = c(4,2,0,6,9)\nmyVector\n#> [1] 4 2 0 6 9\n# Can also store text, not just numbers.\ny = \"hello\"\ny\n#> [1] \"hello\"\n# Or strings of text\ny = c(\"hello\", \"world\")\ny\n#> [1] \"hello\" \"world\"\nmyVector * 2\n#> [1]  8  4  0 12 18\nmyVector > 4\n#> [1] FALSE FALSE FALSE  TRUE  TRUE\nc(1, \"hello\")\n#> [1] \"1\"     \"hello\""},{"path":"r-coding-basics.html","id":"indexing-vectors","chapter":"3 R Coding Basics","heading":"3.5.1.1 Indexing Vectors","text":"“Indexing” term used refer process selecting pulling specific elements object. can index vector following variable name set brackets specify numerical position element want.","code":"\n# Here, select the second element in the vector. \n# Done so by putting 2 in brackets after the vector to \n# say: \"index the second element of this object\"\nmyVector[2] \n#> [1] 2"},{"path":"r-coding-basics.html","id":"dataframes","chapter":"3 R Coding Basics","heading":"3.5.2 Dataframes","text":"time going working just one vector values. Instead, set different data (dataset). common data structure used R data frame (df), used datasets. majority work Social Sciences involving data frames. , good get used early!can think data frame like excel spreadsheet: series equal length vectors, vector treated column elements vectors rows. time using data frame loading dataset existing file. However, can also create scratch:Column name quotes, values vectorsWhen one value specified, repeated.two, cycle two.","code":"\ndata.frame()\n#> data frame with 0 columns and 0 rows\ndata.frame(\"Exam\" = c(1:4), \n           \"Score\" = c(88,90,77,98)) \n#>   Exam Score\n#> 1    1    88\n#> 2    2    90\n#> 3    3    77\n#> 4    4    98\ndata.frame(\"Exam\" = c(1:4), \n           \"Score\" = c(88,90,77,98), \n           \"Student\" = c(\"Dave\")) \n#>   Exam Score Student\n#> 1    1    88    Dave\n#> 2    2    90    Dave\n#> 3    3    77    Dave\n#> 4    4    98    Dave\ndata.frame(\"Exam\" = c(1:4), \n           \"Score\" = c(88,90,77,98), \n           \"Student\" = c(\"Dave\", \"Ally\")) \n#>   Exam Score Student\n#> 1    1    88    Dave\n#> 2    2    90    Ally\n#> 3    3    77    Dave\n#> 4    4    98    Ally"},{"path":"r-coding-basics.html","id":"indexing-dfs","chapter":"3 R Coding Basics","heading":"3.5.2.1 Indexing dfs","text":", isolating specific part object called indexing.ways index different parts df.df[column] (single value brackets selects columns)example, get second column dfdf[row,column] select single element (row/column combination) using numbers.example, get value 2nd row 1st column dfLeaving one row column sections bracket blank select .example, get value first row columns dfto get value first column rows dfA common way index columns data frame using $ sign. wanted score column data frame, use df$ScoreNote difference two. index column brackets, pulling entire column . data frame, output list, always use directly functions. index $, however, output vector just values, can used many functions. quick way check object’s type using typeof() function (common programming languages). example, compare types two objects observe happens try find mean scores:Since output $ indexing vector, can index get particular element want, just done !Instead using $ index name, can also use double brackets:may familiar knowledge coding languages, little verbose.","code":"\ndf = data.frame(\"Exam\" = c(1:4), \n                \"Score\" = c(88,90,77,98), \n                \"Student\" = c(\"Dave\"))\ndf\n#>   Exam Score Student\n#> 1    1    88    Dave\n#> 2    2    90    Dave\n#> 3    3    77    Dave\n#> 4    4    98    Dave\ndf[2]\n#>   Score\n#> 1    88\n#> 2    90\n#> 3    77\n#> 4    98\ndf[2,1]\n#> [1] 2\ndf[1,]\n#>   Exam Score Student\n#> 1    1    88    Dave\ndf[,1]\n#> [1] 1 2 3 4\ndf$Score\n#> [1] 88 90 77 98\ndf[2]\n#>   Score\n#> 1    88\n#> 2    90\n#> 3    77\n#> 4    98\ndf[2]\n#>   Score\n#> 1    88\n#> 2    90\n#> 3    77\n#> 4    98\ntypeof(df[2])\n#> [1] \"list\"\nmean(df[2])\n#> Warning in mean.default(df[2]): argument is not numeric or\n#> logical: returning NA\n#> [1] NA\ndf$Score\n#> [1] 88 90 77 98\ntypeof(df$Score)\n#> [1] \"double\"\nmean(df$Score)\n#> [1] 88.25\n# Name of the second Student\ndf$Student[2] \n#> [1] \"Dave\"\ndf[[\"Student\"]] # Same as before but using [[]] instead of $\n#> [1] \"Dave\" \"Dave\" \"Dave\" \"Dave\"\ndf[[\"Student\"]][2] # Same as above\n#> [1] \"Dave\""},{"path":"r-coding-basics.html","id":"tibbles","chapter":"3 R Coding Basics","heading":"3.5.3 Tibbles","text":"another type data object often encounter working datasets: Tibbles. Tibbles relatively new, default data object created many packages functions use often course.Hadley Wickham (dude created tibbles, much code use) describes :“Tibbles data frames, tweak older behaviors make life little easier. R old language, things useful 10 20 years ago now get way. ’s difficult change base R without breaking existing code, innovation occurs packages.\nTibbles data.frames lazy surly: less (.e. don’t change variable names types, don’t partial matching) complain (e.g. generate warning variable/column trying index exist). forces confront problems earlier, typically leading cleaner, expressive code.”","code":""},{"path":"using-r-effectively.html","id":"using-r-effectively","chapter":"4 Using R Effectively","heading":"4 Using R Effectively","text":"many things can set success make life easier (now future). really important start implementing good practices ASAP establish good habits early . much harder break routines later. coding best practices general well things specific R RStudio covered .Remember quote mentioned previously:always working least one collaborator: Future .\"-Hadley WickhamEven selfish purposes , ignore impact anyone else, help future . put future position mad present !","code":""},{"path":"using-r-effectively.html","id":"rstudio","chapter":"4 Using R Effectively","heading":"4.1 RStudio","text":"","code":""},{"path":"using-r-effectively.html","id":"settings","chapter":"4 Using R Effectively","heading":"4.1.1 Settings","text":"number settings tweaks want make help force good habits.“Restore .RData workspace startup” unselected\nmake RStudio load .RData file () found initial working directory R workspace (global environment) startup.\nmake RStudio load .RData file () found initial working directory R workspace (global environment) startup.“Save workspace .RData exit” set Never\nAsk whether save .RData exit, always save , never save .\nAsk whether save .RData exit, always save , never save .basically just make variables saved data floating around global environment get preserved automatically loaded R closes. can create -reliance things just exist locally files. much contra whole aim benefit reproducibility using R! always able easily re-run code get anything need.can also cause weird behavior R sessions things may still saved workspace realize .thus best practice feel attached stuff workspace. need something, rerun code get ! things think hard replicate, problem need fix!Particularly time predict things go wrong…\nArtwork Horst (2022)\nsettings changes help fix . Something else can regularly restart R, clear content, re-run code scripts (particularly development!). can restart R Session menu, keyboard shortcut cmd/ctrl+shift+F10. can clear workspace output using brooms!Upper right pane: click environment tab, click broomUpper right pane: click environment tab, click broomLower left pane: console tab (top right), click broom tooLower left pane: console tab (top right), click broom tooOne settings change make :“Soft-wrap R source files” selected\njust make written code easier read, scroll horizontally. impacts working RStudio, outputs!\njust make written code easier read, scroll horizontally. impacts working RStudio, outputs!Full explanation different RStudio settings can found .","code":""},{"path":"using-r-effectively.html","id":"functions","chapter":"4 Using R Effectively","heading":"4.2 Functions","text":"“understand computations R, two slogans helpful:\nEverything exists object, \nEverything happens function call.”\n- John Chambers, Advanced R, p. 79.already used functions (typeof(), class(), ()), formally introduced now. Almost everything coding built around using functions. Functions variables containing pre-written code , often, verb name always followed set parentheses. things inside parentheses, called arguments, verb applied. running:typeof(x = myDF)finding type myDF . function one argument, x, given value “myDF”. Functions expect arguments given values. need something apply pre-written code ! Functions multiple arguments often default values, need set one . see later .\nNote: Arguments separated comma often given line.\n","code":""},{"path":"using-r-effectively.html","id":"where-do-functions-come-from","chapter":"4 Using R Effectively","heading":"4.2.1 Where Do Functions Come From?","text":"number different sources! :Available base R\ndefault, R many functions (like seen far)\ndefault, R many functions (like seen far)Defined (beyond scope course)Available packages import\nPackages collections data, code, functions, people created install R. many packages used throughout course.\nPackages collections data, code, functions, people created install R. many packages used throughout course.","code":""},{"path":"using-r-effectively.html","id":"installing-packages","chapter":"4 Using R Effectively","heading":"4.2.2 Installing Packages","text":"way install packages using install.packages() function! just include name package quotes, ! Packages often need code packages work (aka dependencies). package dependencies, also automatically installed. means lot scary looking code ran console installing packages. may look like lot things installed, totally normal fine! packages extremely small. can hundreds packages installed take less 1gb space computer! package installed, actually load R session using library().Install new package:install.packages(\"tidyverse\")\n1x per machine\n1x per machineLoad installed package:library(tidyverse)\n1x per work session\n1x per work session","code":""},{"path":"using-r-effectively.html","id":"r-projects","chapter":"4 Using R Effectively","heading":"4.3 R Projects","text":"Something strongly encouraged creating new R Project every project work . really great tutorial R projects . section highlight summarize key pieces information .","code":""},{"path":"using-r-effectively.html","id":"why-use-them","chapter":"4 Using R Effectively","heading":"4.3.1 Why use them?","text":"“’s nothing frustrating coming back project months (sometimes years) later spend days (weeks) figuring everything , . well documented project consistent logical structure increases liklihood can pick left minimal fuss matter much time passed. addition, ’s much easier write code automate tasks files well organised sensibly named. even relevant nowadays ’s never easier collect vasts amount data can saved across 1000’s even 100,000’s separate data files. Lastly, well organised project reduces risk introducing bugs errors workflow occur (inevitably point), makes easier track errors deal efficiently.”","code":""},{"path":"using-r-effectively.html","id":"what-are-they","chapter":"4 Using R Effectively","heading":"4.3.2 What are they?","text":"“RStudio Project keeps R scripts, R markdown documents, R functions data together one place. nice thing RStudio Projects project directory, workspace, history source documents different analyses working kept completely separate . means can multiple instances RStudio open time (’s thing) can switch easily projects without fear interfering .”","code":""},{"path":"using-r-effectively.html","id":"how-do-i-make-one","chapter":"4 Using R Effectively","heading":"4.3.3 How do I make one?","text":"create new project going file -> new project.new project created now new folder computer contains RStudio project file (ends .Rproj). .Rproj file contains various project options can also used shortcut opening project directly file system (just double click ). can access related files directly RStudio ‘Files’ tab (see ).","code":""},{"path":"using-r-effectively.html","id":"file-paths","chapter":"4 Using R Effectively","heading":"4.3.4 File Paths","text":"file’s path specifies file located. like map computer, giving instructions go look specific file. download file (e.g., “dataset.csv”), likely appear downloads folder. Thus, full file specification :mac: /users/user_name/Downloads/dataset.csvFor windows: C:\\Users\\user_name\\Downloads\\dataset.csv(Replacing “user_name” whatever user name machine )file path constructed 2 parts:file location: /users/user_name/Downloads/ C:\\Users\\user_name\\Downloads\\file name: dataset.csvYou specify full file path change R’s current working directory. Setting working directory basically telling R, “’m going working specific place. need look files, . Also, create files, create .”can cause issues though. file path tells computer look file, set folder specific place computer, code work someone else tried run . computer access , likely totally different file structure!One best features RStudio Projects helps solve issue! Instead using absolute file paths like (fully specified), let use relative file paths. relative file path, file paths relative particular directory. use RStudio Project, upon opening .Rproj file, automatically set working directory location file! way, want share project analysis files someone else, just save send entire project directory. open computer, relative path appropriately set!","code":""},{"path":"using-r-effectively.html","id":"here","chapter":"4 Using R Effectively","heading":"4.3.4.1 Here()","text":"Kirill Müller created extremely useful R tool called .\nArtwork Horst (2022)\nfunctions within package create paths relative top-level directory (aka root). top-level current project can printed time call (). example, run (), print : \"/Users/ethan/Documents/Psyc193L\", R Project folder called “Psyc193L” ’s Documents folder.can also easily build path relative top-level directory! Say example made “data” folder R Project directory (directory organization later), put “dataset.csv” . can use () get full relative file path like :(\"data\", \"dataset.csv\")output , \"/Users/ethan/Documents/Psyc193L/data/dataset.csv\"relative paths work regardless associated file lives inside project directory, work anyone downloads project runs code computer!","code":""},{"path":"using-r-effectively.html","id":"introduction-file","chapter":"4 Using R Effectively","heading":"4.3.5 Introduction File","text":"also good practice create specific introduction file root project. Explain navigate directory, everything , synopsis project/assignment , materials needed run code , etc. Future thank !","code":""},{"path":"using-r-effectively.html","id":"tldr","chapter":"4 Using R Effectively","heading":"4.3.6 TL;DR","text":"Create RStudio Project every data analysis project assignmentCreate RStudio Project every data analysis project assignmentKeep files related project directoryKeep files related project directorySave outputs (plots cleaned data) wellSave outputs (plots cleaned data) wellOnly ever use relative paths, absolute paths\nSpecifically, use ()\never use relative paths, absolute pathsSpecifically, use ()Create introduction file project folderCreate introduction file project folder","code":""},{"path":"using-r-effectively.html","id":"literate-programming","chapter":"4 Using R Effectively","heading":"4.4 Literate Programming","text":"Given goals reproducibility, one best things can make sure code easy understand replicate. , establish routine literate programming.Literate programming originally proposed Donald Knuth 1984.“Let us change traditional attitude construction programs: Instead imagining main task instruct computer , let us concentrate rather explaining humans want computer .”\n— Donald E. Knuth, Literate Programming, 1984In practice literate programming technique mixing written text chunks code together, whereby annotate code step-wise explain part code via comments throughout. practice provides much easier documentation code creation written reports code results code.","code":""},{"path":"using-r-effectively.html","id":"markdown","chapter":"4 Using R Effectively","heading":"4.4.1 Markdown","text":"R Markdown files previously introduced type file mainly using. allow combination R code text, also incorporate markdown syntax (can think mini language), HTML, CSS! Thus, R Markdown files afford powerful combination languages help create literate programming documents easy understand reproduce analyses.However, true power comes ability take markdown files generate many different kinds documents. combined packages (e.g., knitr), R Markdown files can turned :PDFsMicrosoft Word documentsSlideshows (like powerpoint keynote)Web pagesIn fact, course website, course content, personal website (parts ), created RStudio written lot R Markdown files!","code":""},{"path":"using-r-effectively.html","id":"syntax","chapter":"4 Using R Effectively","heading":"4.4.1.1 Syntax","text":"R Markdown syntax whole course , couple fundamental things worth knowing:can insert code chunks keyboard shortcut: ctrl+option+OSX alt+WindowsYou always name chunks (part literate programming), number options can set (chunk specific). include:Figure height widthWhether echo (show) evaluate (run) code chunk final document (debugging tip! problem code chunk, set eval = FALSE can still knit, leave note fix later!)Whether show warnings messagesYou can see full list options .can also write R code inline, , without chunk. can writing set backticks, r (lowercase) first, space code. example:mean `r mean(x)`.document generated, R code evaluated look though “mean 14.” (whatever mean x happens ) written!","code":"\n## R code here"},{"path":"using-r-effectively.html","id":"coding-best-practices","chapter":"4 Using R Effectively","heading":"4.5 Coding Best Practices","text":"many best practices good incorporate coding. Several main ones highlighted , list many others included bottom.","code":""},{"path":"using-r-effectively.html","id":"naming-convention","chapter":"4 Using R Effectively","heading":"4.5.1 Develop a Naming Convention","text":"One important thing initially develop naming convention. important objects files.Object names must start letter, can contain letters, numbers, _ .. File names require , can also use -. However, avoid using . , never use spaces! want names descriptive, need convention multiple words.\nArtwork Horst (2022)\ncamelCase, first word capitalized first letter subsequent word , technically efficient terms keystrokes. can run issues using acronyms singular letters (e.g., “RStudio” technically breaks rule) though. people recently recommending snake_case arguing use capital letters . Generally, camelCase snake_case recommended.want use names concise, unique, meaningful (difficult!), avoiding terms commonly repeated. also case variable (column) factor names well. However, helpful develop relatively consistent way naming things . helps make easier work different projects (especially time). example:x_df – dataframes\n“x” refers type data experiment\nx_df – dataframesWhere “x” refers type data experimentX_m – mean dataX_m – mean dataX_sd – SD dataX_sd – SD dataX_se – standard error dataX_se – standard error data","code":""},{"path":"using-r-effectively.html","id":"style-and-syntax","chapter":"4 Using R Effectively","heading":"4.5.2 Style and Syntax","text":"“Good coding style like correct punctuation: can manage without , butitsuremakesthingseasiertoread.”\n - Hadley WickhamMany following tips highlights tidyverse style guide.","code":""},{"path":"using-r-effectively.html","id":"spacing","chapter":"4 Using R Effectively","heading":"4.5.2.1 Spacing","text":"general, want aim write code legible. sake others. R makes difference following code:Always put space comma, never , just like regular English:put spaces inside outside parentheses:Place space () (used function arguments):operators (==, +, -, <-, etc.) always surrounded spaces:","code":"\n#1\n3*2/2*5/2\n\n((3 * 2) / 2) * 5 / 2\n\n#2\nx=2+4\n\nx = 2 + 4\n# Good\ndf[, 1]\n\n# Bad\ndf[,1]\ndf[ ,1]\ndf[ , 1]\n# Good\nmean(x, na.rm = TRUE)\n\n# Bad\nmean (x, na.rm = TRUE)\nmean( x, na.rm = TRUE )\n# Good\nfunction(x) {}\n\n# Bad\nfunction (x) {}\nfunction(x){}\n# Good\nx + (3 * 4)\n\n# Bad\nx+(3*4)"},{"path":"using-r-effectively.html","id":"avoid-long-lines","chapter":"4 Using R Effectively","heading":"4.5.2.2 Avoid Long Lines","text":"Avoid writing code takes lot space horizontally. Use strategically placed line breaks indentations, particularly argument/chunk code. can use keyboard shortcut cmd+OSX ctrl+Windows get R automatically indent appropriately line--line!","code":"\n# Good\ndo_something_very_complicated(\n  something = \"that\",\n  requires = many,\n  arguments = \"some of which may be long\"\n)\n\n# Bad\ndo_something_very_complicated(\"that\", requires, many, arguments,\n                              \"some of which may be long\"\n                              )"},{"path":"using-r-effectively.html","id":"misc.","chapter":"4 Using R Effectively","heading":"4.5.2.3 Misc.","text":"Use double quotes \"hello\", single quotes 'hello', quoting text. exception text already contains double quotes single quotes \"said, 'hello.'\".Use double quotes \"hello\", single quotes 'hello', quoting text. exception text already contains double quotes single quotes \"said, 'hello.'\".Use TRUE FALSE T FUse TRUE FALSE T FEach line comment begin comment symbol single space:\n#line comment begin comment symbol single space:\n#Index columns subset rows names filtering, numbers. order/position may change. name likely .Index columns subset rows names filtering, numbers. order/position may change. name likely .Pass named arguments functions, place.Pass named arguments functions, place.hardcode. Always softcode. saves constantly update different sections code time change.hardcode. Always softcode. saves constantly update different sections code time change.","code":""},{"path":"using-r-effectively.html","id":"document-organization","chapter":"4 Using R Effectively","heading":"4.5.3 Document Organization","text":"want organize files directory structure way easy navigate. may come back files months years later, want make sure understand files . mention make project files open accessible public!things can help include:Separate data cleaning analysis codes. R Markdown files helpful can abide separation concerns principle label code sections.Separate data cleaning analysis codes. R Markdown files helpful can abide separation concerns principle label code sections.Make text files data needed – describing came , coding variables needed, etc.Make text files data needed – describing came , coding variables needed, etc.Never mess raw data (keep backups). Try touch directly little possible.Never mess raw data (keep backups). Try touch directly little possible.Use version control. Version control systems save changes separate files. Using system like git helpful, prevents tons tons older versions files computer.Use version control. Version control systems save changes separate files. Using system like git helpful, prevents tons tons older versions files computer.far markdown files …needed packages loaded top documentNo package installations called/executedNo warnings/messages printed load packages (turn options hide )Markdown formatting used make file easier followYou use relative file paths , making use packageThere code chunks errors!NEVER EVER print entire dataset (> 10 rows). never necessary.good high text--code ratio!","code":""},{"path":"using-r-effectively.html","id":"visual-summary","chapter":"4 Using R Effectively","heading":"4.5.4 Visual Summary","text":"\nArtwork Horst (2022)\n","code":""},{"path":"using-r-effectively.html","id":"pipes","chapter":"4 Using R Effectively","heading":"4.6 Pipes","text":" reference René Magritte’s “Treachery Images,” actually display LAC Museum Art!One powerful tools R use %>% (pipe) operator.RStudio Keyboard Shortcuts:OSX: CMD + SHIFT + MElse: CTRL + SHIFT + MHow Pipe Work?Consider following example making eating cake.several things need :ingredientsMix ingredientsPour mixture panBake mixtureLet coolSliceEat pieceOne thing might think just go step step:creates lot unnecessary interim step variables care . use just clog workspace.express process set nested functions, look like :Nesting dataframe inside function hard read forces read sequence functions inside . start innermost parentheses, work way /back.Even apply style syntax guidelines :still difficult unnatural read. describe process words, spoken written, take totally different form! might say something like:“need start taking ingredients, mix together, pour mixture baking pan, put pan oven bake 30 minutes. done let cool 20 minutes, slice 6 pieces, eat one (several, )!”much easier write code form match actually think process. precisely piping %>% allows ! write code piping:pipe dataframe function, chain together number functions, lets read left right / . code “sentence” starts noun instead verb. much easier read write takes form actually think process. chronological order want .two mantras pipes:Think %>% mean “”“dataframe first, dataframe ”%>% operator actually taking result/output previous computation (thing left ) piping input next computation. cases, computations functions.mix(ingredients) equivalent ingredients %>% mix()animated illustration similar example:\nSource: Arthur Welle\n","code":"\nmixture = mix(ingredients)\nthing_in_oven = pour(mixture)\nhot_baked_cake = bake(thing_in_oven)\ncooled_baked_cake = cool(hot_baked_bake)\nsliced_cake = slice(cooled_baked_cake)\n\neat(sliced_cake, 1)\neat(slice(cool(bake(put(pour(mix(ingredients), into = baking_pan), into = oven), time = 30), duration = 20), pieces = 6, 1))\neat(\n  slice(\n    cool(\n      bake(\n        put(\n          pour(\n            mix(ingredients),\n            into = baking_pan),\n          into = oven),\n        time = 30),\n      duration = 20),\n    pieces = 6,\n    1)\n)\ningredients %>% \n  mix() %>% \n  pour(into = baking_pan) %>% \n  put(into = oven) %>% \n  bake(time = 30) %>% \n  cool(during = 20) %>%\n  slice(pieces = 6) %>% \n  eat(1)"},{"path":"using-r-effectively.html","id":"dos-and-donts","chapter":"4 Using R Effectively","heading":"4.6.1 Do’s and Dont’s","text":":Apply style/syntax guidelines\nSpace %>%\nnew step line\nIndent subsequent line chain\nEtc.\nSpace %>%new step lineIndent subsequent line chainEtc.DON’T:Use pipe …one object needs manipulated.\nPipes used chain steps applied one object.\nPipes used chain steps applied one object.intermediate objects need use given informative name.","code":""},{"path":"using-r-effectively.html","id":"pipe-positions","chapter":"4 Using R Effectively","heading":"4.6.2 Pipe Positions","text":"pipe something function, input first element default.%>% sum(b) equivalent sum(, b)can specify argument (position function) piped input given . operator. . operator can used refer object/dataframe current state pipe chain. words, . refers piped current function.Consider following example using seq(, ) function, two arguments (). seq() generate sequence numbers range value value (hard avoiding use words “” “” ). default, piped input first element., b piped , gets set first argument result descending sequence. However, explicitly told seq() wanted piped input go using ., get expected ascending sequence:","code":"\na = 1\nb = 5\nb %>% seq(a)\n#> [1] 5 4 3 2 1\nb %>% seq(from = a, \n          to = .)\n#> [1] 1 2 3 4 5"},{"path":"using-r-effectively.html","id":"data-importing-and-exporting","chapter":"4 Using R Effectively","heading":"4.7 Data Importing and Exporting","text":"built datasets R comes can helpful, whole point learning R use needs. need ways get raw data R, products code R.","code":""},{"path":"using-r-effectively.html","id":"importing","chapter":"4 Using R Effectively","heading":"4.7.1 Importing","text":"often going work csv’s .RData files. can work number file types R, beyond scope class.","code":""},{"path":"using-r-effectively.html","id":"csv-files","chapter":"4 Using R Effectively","heading":"4.7.1.1 csv Files","text":"use read_csv() function load dataset R. function takes file argument. R know look file? need give right file path, () function discussed previously applied!Recall previous lesson considering structure project directories, example discussed data file called “dataset.csv” folder called “data”. tell read_csv() look giving () call used !output read_csv() saved variable, just print console. need variable get output can use later code. saving variable.additional point, can also directly load files websites using website file path. Remember, file path just map tell computer look something. file path just needs lead read_csv() .csv file!","code":"\nhere(\"data\", \"dataset.csv\")\n#> \"/Users/ethan/Documents/Psyc193L/data/dataset.csv\"\n\nexample_df = read_csv(here(\"data\", \"dataset.csv\"))\nexample_df = read_csv(\"https://www.ethanhurwitz.com/example_data.csv\")"},{"path":"using-r-effectively.html","id":"rdata-files","chapter":"4 Using R Effectively","heading":"4.7.1.2 RData Files","text":"type file may want import .RData file. directly load R objects workspace. Instead using read_csv(), just use load() pass file path .RData file!Since .RData files already contain R objects, save variable. loading variables already exist!","code":""},{"path":"using-r-effectively.html","id":"exporting","chapter":"4 Using R Effectively","heading":"4.7.2 Exporting","text":"goal using R code make tasks easily reproducible, instances may want directly save export something. example, may want use data software. instances, can easy export file write_csv(), takes form: write_csv(object_to_be_saved, file = \"file_name.csv\"). create new .csv file dataframe/object working directory.Alternatively, may run code takes V.F.L.T. (, Frankly, Long Time) run. Somewhere road may executing complicated models can take hours even days run! may want rerun code consecutively time revisit project. avoid , can save R data object can easily load R.using save() function, takes similar form save(objects_to_be_saved, file = \"fil_name.rdata\").","code":""},{"path":"intro-to-ggplot2.html","id":"intro-to-ggplot2","chapter":"5 Intro to ggplot2","heading":"5 Intro to ggplot2","text":"“greatest value picture forces us notice never expected see.”— John Tukey“single statistical tool powerful well‐chosen graph.” (Chambers et al. 1983)Care Visualizing Data?Consider following scenario:two different datasets, comprised individuals measured two outcomes (say height weight). mean standard deviation height weight datasets. correlation height weight datasets well. every statistical metric, datasets . , must look similar, right?Click button :collection data called datasauRus, information generated can found technical paper. modern version famous Anscombe’s Quartet:four datasets matching n’s, means, standard deviations, correlations. means slope intercept, corresponding statistical tests, equivalent. data clearly look different though. (data built R object called anscombe, can look test !)key point summary statistics variables linear relationships inherently overlook aspects data. highlights critical importance visualizing data, just relying summary statistics alone. point visualization, just like summary statistic, understand relationship pattern data. However, looking raw data , run risk missing things way relying summary statistics alone.","code":"\nlibrary(tidyverse)\nlibrary(palmerpenguins)"},{"path":"intro-to-ggplot2.html","id":"when-visualizing-go-wrong","chapter":"5 Intro to ggplot2","heading":"5.1 When Visualizing Go Wrong","text":"easy enough just say, “Look raw data! Create visualization!” However, bad visualization often times worse visualization . One things Covid-19 pandemic brought originally plethora data visualizations. observed real world last 2 years:, enough just make visualization, important also consider principles make GOOD visualization. next lessons, covered.","code":""},{"path":"intro-to-ggplot2.html","id":"ggplot2","chapter":"5 Intro to ggplot2","heading":"5.2 ggplot2","text":"Data visualization one things sets R apart programming languages can used statistics, like Python. R still best data visualization capabilities, one primary reasons used Python Social Sciences. also one first times get see coding can . actually going creating stuff code!class, ggplot2 package used create visualizations. Graphs constructed mapping data geometric objects (lines, bars, points, etc.) according aesthetic attributes (color, shape, size, etc.). ggplot2 uses inform grammar.\nArtwork Horst (2022)\n","code":""},{"path":"intro-to-ggplot2.html","id":"meet-the-penguins","chapter":"5 Intro to ggplot2","heading":"5.2.1 Meet the Penguins","text":"create visualizations, need data visualize! palmerpenguins dataset Alison Horst used create examples throughout.dataset contains measurements 344 different penguins. Measurements include things like bill length depth, sex, among others.\nArtwork Horst (2022)\n3 different species penguins dataset, collected 3 islands Palmer Archipelago, Antarctica.\nArtwork Horst (2022)\nUse library(palmerpenguins) call load dataset.","code":""},{"path":"intro-to-ggplot2.html","id":"a-basic-graph","chapter":"5 Intro to ggplot2","heading":"5.3 A Basic Graph","text":"sensible place start building basic graph. going LOTS exercise breaks throughout.\nNote: move forward building first graph, new piece code added accompanied literate programming portion, describe words code .\nggplot graphs build using ggplot() call. first thing needs data. %>% used pass penguins dataframe.Start telling ggplot use penguins dataframe dataWoo! actually created something. grey rectangle! course, code alone anything. tell ggplot want plot. Hmm… example, consider penguin’s bill_length_mm related flipper_length_mm. might imagine bigger penguins tend longer bills flippers, maybe ? create visualizations, try help answer questions may data (consist samples thought representative world large)!ggplot needs told variables data mapped aesthetics want render graph. aes() call, start specifying display axis.“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis.”, specified flipper_length_mm y-axis, bill_length_mm x-axis (good practice specify y first x second). aesthetic mappings must separated comma, matter order list (though good practice start axes first). can see, ggplot figured label axes .\nggplot told aesthetic mappings (data source use), render mappings! want ggplot use mappings construct geometric object, way adding geom, aptly named. number different geoms, general syntax geom_X(), X usually refers specific geometric object want render. , want point graph penguin, geom_point() used.\nNote: TON different geoms. see many later.\n“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point.”Okay, NOW talking! looks like actual real graph. Look first ggplot masterpiece!two important things note :+ used instead %>% add new function. ggplot system additive/layered, powerful idea explained later. now, enough know geom_point() added code. want take penguins %>% ggplot(mapping = aes(y = flipper_length_mm, x = bill_length_mm)) code use argument geom_point() function, happen %>% used pipe ! want just add points top existing base code created, + used.+ used instead %>% add new function. ggplot system additive/layered, powerful idea explained later. now, enough know geom_point() added code. want take penguins %>% ggplot(mapping = aes(y = flipper_length_mm, x = bill_length_mm)) code use argument geom_point() function, happen %>% used pipe ! want just add points top existing base code created, + used.running code, addition creating graph (“Plots” section RStudio inline code), following showed console:running code, addition creating graph (“Plots” section RStudio inline code), following showed console:\nWarning message:Removed 2 rows containing missing values (geom_point).\nLooking warnings errors always important, especially creating visualizations! says removed 2 rows data, may seem like big deal want visualizations misleading. Especially start visualizing summary statistics (like means). look actual data though, can verify two penguins measurement value flipper length bill length. obviously without either , included graph. case, okay, important always verify!\nNOTE: moving forward, pedagogical purposes warning message hidden output subsequent code cleaner. However, 2 rows still removed!\n, noted goal visualization understand relationship, pattern, data. every visualization make, verbal description pattern seen (one exist!) provided underneath. help develop intuitive graph literacy. able quickly accurately interpret visualizations important skill, one pillars course.\nThings related graph literacy comprehension appear boxes like moving forward!\nvisualization can seen , generally speaking, penguins greater flipper length tend greater bill length well. seems positive linear relationship bill length flipper length , flipper length increases, bill length increases turn.\nNote: use lot tentative language include many qualifiers . formal statistical analyses done afford ability state relationship effect definitively.\n","code":"\npenguins %>%\n  ggplot()\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm))\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm)) +\n  geom_point()\n#> Warning: Removed 2 rows containing missing values\n#> (geom_point)."},{"path":"intro-to-ggplot2.html","id":"references-1","chapter":"5 Intro to ggplot2","heading":"5.4 References:","text":"Horst , Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/","code":""},{"path":"aesthetics.html","id":"aesthetics","chapter":"6 Aesthetics","heading":"6 Aesthetics","text":"","code":"\nlibrary(tidyverse)\nlibrary(palmerpenguins)"},{"path":"aesthetics.html","id":"color","chapter":"6 Aesthetics","heading":"6.1 Color","text":"looking graph created last section (shown ), kind seems like may different groups clusters penguins data. notice pattern like , worth looking considering variables data related.One way penguins seem grouped cluster top another bottom:might correspond sex variable dataset! Maybe case bigger penguins males, smaller ones females?idea explored way visually indicate observations graph male penguins female. Specifically, want color points different based value observation’s sex. fact… can just ! One best parts coding , can always just try run code see happens!\noften helpful declare formal predictions. , specify two mutually exclusive alternatives see exploring idea.\n“case differences penguin size explained sex (e.g., bigger penguins males smaller ones females), points cluster top one color points cluster bottom different color. case differences penguin size explained sex , points two clusters distinct colors.”Uh… okay. , work. OH! Remember aes() used tell ggplot variables data mapped aesthetics want render graph? Color needs passed another argument aesthetics plot via aes().“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map sex color point.”like ! really look like may thought might though. consistent possible outcome, sex explain differences penguin size. However, looking carefully, actually kind looks like 3 distinct clusters, 2.might correspond species variable dataset! Maybe case different penguin species differ size? actually makes lot sense. idea can tested well!“case differences penguin size explained species , points cluster distinct colors. case differences penguin size explained species , points clusters distinct colors.”“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map species color point.”visualization can seen , generally speaking, penguins greater flipper length tend greater bill length well. seems positive linear relationship bill length flipper length , flipper length increases, bill length increases turn. Additionally, penguins species tend similar flipper bill lengths, distinct species. Adelie penguins tend shortest lengths, Gentoo longest. Chinstrap penguins seem shorter flippers longer bills.Hot dang, looks like promising explanation penguins differ size! obviously need kind formal statistical analysis know sure, visualizing raw data ways like allow quickly get insights different questions may want use data answer.","code":"\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm),\n         color = sex) +\n  geom_point()\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm,\n                       color = sex)) +\n  geom_point()\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm,\n                       color = species)) +\n  geom_point()"},{"path":"aesthetics.html","id":"global-vs-local-aesthetics","chapter":"6 Aesthetics","heading":"6.1.1 Global vs Local Aesthetics","text":"first describing visualization, one things noted , “seems positive linear relationship bill length flipper length , flipper length increases, bill length increases turn.” can helpful add line best fit actually see linear relationship. can using geom_smooth(). arguments need set within geom_smooth(), worry much .code copy/pasted new geom_smooth() call can added directly . best fitting line data displayed.“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map species color point. Add line best fit data.”Hey, wait, quite expected… Instead one line data, looks like line species. happening highlighting difference global aesthetic (put ggplot() call apply added parts graph) local aesthetic (put individual geoms apply individual ones).Color moved geom_point() call, thing mapped values species data.Alright! points still colored species, just one line data, originally intended. also notice mapping= specified geom_point(), removed ggplot() well! actually necessary specify . hang things, can leave part .","code":"\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm,\n                       color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"setting-vs-mapping-aesthetics","chapter":"6 Aesthetics","heading":"6.1.2 Setting vs Mapping Aesthetics","text":", change color points (inadvertently line best fit), color argument specified aes() call map values species variable data. want map something variable data? just want set value something ? might think, “maybe just take mapping = aes() part?” right, smart! Look example just try change points orange (good contrast line).Well, okay, obviously right results error:\nError layer(data = data, mapping = mapping, stat = stat, geom = GeomPoint, : object ‘orange’ found\nwriting orange like , R thinks variable penguins dataset piped ggplot! tell R variable/object defined, instead just color orange, use quotes.Much better! can geom:\nNote: Aesthetic settings can set locally, globally. Aesthetic mappings can local global.\n","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(color = orange) +\n  geom_smooth(method = \"lm\", se = FALSE)\n#> Error in layer(data = data, mapping = mapping, stat = stat, geom = GeomPoint, : object 'orange' not found\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(color = \"orange\") +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(color = \"orange\") +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"purple\")\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm),\n         color = \"orange\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"setting-colors","chapter":"6 Aesthetics","heading":"6.1.3 Setting Colors","text":"setting color, can done name, done , hexcode:neat thing can set colors based logical operation! example, wanted color penguins flipper lengths greater 200 one color, flipper lengths great 200 another color, following:Notice color just set equal simple logical test! still mapped aesthetic, based values variable data.tons good color guides can find google. couple:onetwothreeMore colors covered later lesson.Use R code recreate graphs :\n\n. Make visualization investigate relationship bill length (y-axis) bill depth (x-axis).C. Make visualization investigate relationship body mass flipper length. , make geometric figure rendering observations appear blue.","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(color = \"#9FE2BF\") +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"#FFBF00\")\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = flipper_length_mm > 200)) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"#FFBF00\")"},{"path":"aesthetics.html","id":"shape","chapter":"6 Aesthetics","heading":"6.2 Shape","text":"","code":""},{"path":"aesthetics.html","id":"mapping","chapter":"6 Aesthetics","heading":"6.2.1 Mapping","text":"Color one aesthetics can change, many others ! Another one shape. Like color, shape can mapped variable data. addition changing color points species, code change shape !“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map species color point. Add line best fit data change shape point mapped species.”However, map aesthetic. shape mapped different aesthetic ! Consider happens mapping island instead.now notice instead coloring one shape, mapped variable, now colors can multiple shapes! Mapping another variable different aesthetic visualizes even data patterns dataset! can quickly become overwhelming difficult interpret though, often best try just communicate one main relationship pattern visualizations. practice though, can go nuts!","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = species)) +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = island)) +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"setting","chapter":"6 Aesthetics","heading":"6.2.2 Setting","text":"number different shapes can choose setting . can selected number:name:\nSource: ggplot documentation\nnotice several shapes, appear different versions. example, appears 3 different kinds triangles. differences compared :17 ‘triangle’\nSolid color shape\nSolid color shape2 ‘triangle open’\nColored shape outline hollow center\nColored shape outline hollow center24 ‘triangle filled’\nColored shape outline center can filled another color\nColored shape outline center can filled another colorThis introduces another way change colors ggplot! changing color something, geoms ‘color’ argument, ‘fill’ argument, , like , ! ‘color’ often refers outline/outside, ‘fill’ often refers … well, fill!Part 1:Take code produced Exercise 2 1. Change shape solid color squares mapped species variable. 2. Change shape hollow squares mapped species variable. 3. Change shape filled squares mapped species variable, fill color choosing.\nPart 2:\nUse R code recreate graphs :\n\n1.","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species),\n             shape = 17) +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species),\n             shape = 2) +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species),\n             shape = 24,\n             fill = 'darkgrey') +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"size","chapter":"6 Aesthetics","heading":"6.3 Size","text":"","code":""},{"path":"aesthetics.html","id":"mapping-1","chapter":"6 Aesthetics","heading":"6.3.1 Mapping","text":", actually kind hard see shape differences, wasn’t ? points graph just small. helpful size changed. Wouldn’t know , size happens another aesthetic! example mapping size:“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map species color point. Add line best fit data, change shape point mapped species corresponding size changes.”Well, looks pretty shitty, gets point across! One thing demonstrate meant saying, “ggplot additive/layered”.geom_smooth() last geom added . means, quite literally, added top graph rendered previous code. gets put top, runs covers observations.Think graph look like added geom_smooth() first geom_point() second, click button find :\nconcept important keep mind creating visualizations. Order matters!","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = species,\n                 size = species)) +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"setting-1","chapter":"6 Aesthetics","heading":"6.3.2 Setting","text":"Maybe instead mapping … just change size . example, take one graphs make shapes little bit larger.Wow, okay, shows fill lot better ! can actually pretty neat things playing around different size values. example:","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species),\n             shape = 24,\n             fill = 'darkgrey',\n             size = 4) +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species)) +\n  geom_point(aes(color = species),\n             size = 4,\n             shape = 6) +  \n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"alpha","chapter":"6 Aesthetics","heading":"6.4 Alpha","text":"","code":""},{"path":"aesthetics.html","id":"mapping-2","chapter":"6 Aesthetics","heading":"6.4.1 Mapping","text":"alpha aesthetic changes translucent vs opaque something .“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map species color point. Add line best fit data, change shape point mapped species, corresponding size changes alpha changes.”can see, using alpha mapped aesthetic particularly useful. , , instances want .","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = species,\n                 size = species,\n                 alpha = species)) +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"setting-2","chapter":"6 Aesthetics","heading":"6.4.2 Setting","text":"often, want set alpha levels different elements graphs . Alpha values range 0-1, 0 completely transparent 1 completely opaque.Compare two graphs note alpha levels:working (relatively) small dataset , may already see alpha changes extremely useful working larger datasets:Looking observations highlighted red circles, can notice darker color observations species. means multiple observations values, rendered spot graph. observations completely opaque (alpha), may obscured others occupying space!even clear looking example built diamonds dataset:Even low alpha (look faint points outside center cluster ), can see just many observations overlapping! see better ways visualize data like later.","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = species),\n             size = 3,\n             alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"references-2","chapter":"6 Aesthetics","heading":"6.5 References:","text":"Horst , Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"different-geoms-and-when-to-use-them","chapter":"7 Different Geoms and When To Use Them","heading":"7 Different Geoms and When To Use Them","text":"Previously, stated point visualization explore understand relationship pattern data (often response/outcome variable one explanatory/predictor variables). important know best graphically represent data based types variables (categorical vs continuous) relationships patterns trying visualize. number ways can visualize specific types relationships. better others, sometimes “best” depends specific context.follows overview number different ways can visualize different data relationships, well recommendations best .","code":"\nlibrary(tidyverse)\nlibrary(palmerpenguins)"},{"path":"different-geoms-and-when-to-use-them.html","id":"one-categorical","chapter":"7 Different Geoms and When To Use Them","heading":"7.1 One Categorical","text":"Graphing one categorical variable used show counts proportions.","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"bar","chapter":"7 Different Geoms and When To Use Them","heading":"7.1.1 Bar","text":"One good way visualizing single categorical variable bar chart.Think following question:“many penguin observations island?”Let’s create visualization bar island, bar’s height corresponds number penguins recorded island. , use geom_bar().wanted bars represent proportion observations came island instead raw counts, need way telling R . proportions something already exist data, easily computed. proportion observations island simply :\\[\\frac{nObservationsFromIslandX}{sumOfObservationsFromAllIslands}\\]count’s y-axis , just want ..count.. (numerator ) divided sum ..count..s (denominator ). Luckily, can just give R!\nNote: Proportions must sum 1! bars ever sum one, issue!\n","code":"\npenguins %>%\n  ggplot(aes(x = island)) + \n  geom_bar()\npenguins %>%\n  ggplot(aes(x = island)) + \n  geom_bar(aes(y = (..count..)/sum(..count..)))"},{"path":"different-geoms-and-when-to-use-them.html","id":"pie","chapter":"7 Different Geoms and When To Use Them","heading":"7.1.2 Pie","text":"less good way pie chart. worry understanding code, part use . may, unfortunately, find working particularly intransigent PI collaborator. include code template scenarios.creating visualization communicate something single categorical variable, really just use table graph .","code":"\npenguins %>%\n  ggplot(aes(x = 1,\n             fill = species)) +\n  geom_bar() +\n  coord_polar(\"y\", start = 0)"},{"path":"different-geoms-and-when-to-use-them.html","id":"one-continuous","chapter":"7 Different Geoms and When To Use Them","heading":"7.2 One Continuous","text":"Looking distributionsBeing able understand characterize distributions integral part Social/Data Scientists toolbox. want know distribution particular numerical variable dataset, options available .","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"histogram","chapter":"7 Different Geoms and When To Use Them","heading":"7.2.1 Histogram","text":"One powerful tools examining distributions histogram. histogram, values variable interest separated different bins x-axis.y-axis histogram often represent frequency count value range values distribution. However, can also represent proportion distribution value. pay attention scale y-axis!histogram , height bars correspond long penguin’s flipper , rather number penguins sample flipper lengths particular range/value. example, looks like ~28 penguins sample flipper lengths around 190mm.little difficult tell difference individual bar though. Giving outline help tremendously. can color aesthetic. Remember, ‘color’ often refers outline/outside, ‘fill’ often refers inside.","code":"\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_histogram()\n#> `stat_bin()` using `bins = 30`. Pick better value with\n#> `binwidth`.\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_histogram(color = 'black')\n#> `stat_bin()` using `bins = 30`. Pick better value with\n#> `binwidth`."},{"path":"different-geoms-and-when-to-use-them.html","id":"bins","chapter":"7 Different Geoms and When To Use Them","heading":"7.2.1.1 Bins","text":"may noticed weird message coming histograms far:\nstat_bin() using bins = 30. Pick better value binwidth.\n“bins” refers actual number bins (bars) histogram. “binwidth” refers width bin (bar), words many units x wide bin (bar) . Setting value “binwidth” override number “bins”, R suggesting change value.histogram, difference binwidth size can significantly impact graph looks. , turn, influence kind impressions inferences make. reason important explore different bin settings verify whether patterns notice truly feature data just artifact bin settings!Consider example :first histogram probably say unimodal distribution flipper lengths around 190mm (+/- ). However, looking second histogram, probably say distribution looks bimodal, one cluster around 190mm another around 210mm. data, visualized using type graph, two different stories based choices made. careful make sure telling data’s story, story!","code":"\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_histogram(color = 'black',\n                 bins = 5)\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_histogram(color = 'black',\n                 bins = 15)"},{"path":"different-geoms-and-when-to-use-them.html","id":"density","chapter":"7 Different Geoms and When To Use Them","heading":"7.2.2 Density","text":"density plots, short, smoothed histogram. particularly stats-minded want information, click info.Density plots show probability density (actual probability!) y-axis. mean exactly? Well, little complicated. short, continuous curve (aka kernel) fit individual data point. kernel usually gaussian. gaussians individual data point summed forms curve fit density plot. interested info, check fairly approachable explanation.\nUse geom_density() density plot.better understand density plot, helps see overlays histogram:can see , smoothing, density plots obscure noisiness (variability) data.","code":"\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_density()\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_density(size = 1)+\n  geom_histogram(aes(y=..density..), color=\"black\", alpha=0.2)"},{"path":"different-geoms-and-when-to-use-them.html","id":"vlines","chapter":"7 Different Geoms and When To Use Them","heading":"7.2.3 vlines","text":"One thing may want histogram mark specific parts regions data. can done adding vertical lines geom_vline(). add vertical line must specify x-axis line cross. Since something axis, must make specification aes() call.","code":"\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_histogram(color = 'black',\n                 bins = 15) +  \n  geom_vline(aes(xintercept=180),color=\"black\", size=1) +\n  geom_vline(aes(xintercept=200),color=\"black\", size=1)"},{"path":"different-geoms-and-when-to-use-them.html","id":"continuous-continuous","chapter":"7 Different Geoms and When To Use Them","heading":"7.3 Continuous ~ Continuous","text":"RelationshipsWhen exploring relationship two continuous variables, two main visualizations can work : scatter plots 2d histograms. main difference one pick large dataset trying visualize .","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"scatter-plot","chapter":"7 Different Geoms and When To Use Them","heading":"7.3.1 Scatter plot","text":"recall previous lessons, use geom_point() scatter plots. scatter plot point visualization represents observation data.Use scatter plots datasets lower n’s . also saw , even alpha adjustments, datasets large n’s can look pretty gnarly:","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_point()\ndiamonds %>%\n  ggplot(aes(y = table, x = depth)) +\n  geom_point(alpha = 0.1)"},{"path":"different-geoms-and-when-to-use-them.html","id":"d-histogram","chapter":"7 Different Geoms and When To Use Them","heading":"7.3.2 2d Histogram","text":"Alternatively, working dataset large n, can use 2d histogram geom_bin2d().Like scatter plot, point represents observation. However, also given information many observations may occupying /similar space. example, lighter spot, concentrated observations spot.twist 2d Histogram make hexbin plot, essentially thing uses hexagons instead squares. Everything else , use geom_hex(). also gives added benefit making feel like casting hex data (sometimes ’re coding, look little fun can).conclusions draw two identical. choice two largely personal preference.","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_bin2d()\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_hex()"},{"path":"different-geoms-and-when-to-use-them.html","id":"adding-conditional-means","chapter":"7 Different Geoms and When To Use Them","heading":"7.3.3 Adding Conditional Means","text":"can sometimes good idea include line best fit show trend data. can aid seeing patterns data. can geom_smooth().two main arguments relevance now method= se=. method= argument gets set “lm”, saying want fit line linear model. se= refers whether show Standard Error line.Well… Hang . … okay yes line, may expecting see. highlights important point: Just CAN fit line something always mean .","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_point() +\n  geom_smooth(method = 'lm', se = FALSE)"},{"path":"different-geoms-and-when-to-use-them.html","id":"rugs-and-margins","chapter":"7 Different Geoms and When To Use Them","heading":"7.3.4 Rugs and Margins","text":"Another neat trick can add information individual distribution margins visualization.One way adding “rug” scatter plots. can geom_rug().Another way showing individual histograms continuous variables. can using ggMarginal() ggExtra package (ggExtra::ggMarginal()).\nNote: ggMarginal part ggplot proper, added like geoms. Instead, pipe ggplot graph . , must wrap ggplot code parentheses. way, entire visualization gets piped just last piece!\n","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_point()+\n  geom_rug(alpha=0.1, size=1.5)\n(penguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_point()) %>%\nggExtra::ggMarginal(type = \"histogram\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"continuous-categorical","chapter":"7 Different Geoms and When To Use Them","heading":"7.4 Continuous ~ Categorical","text":"ComparisonsArguably, common thing create graph visualize comparison data many different conditions (levels) variable. Specifically, compare summary statistics . example:average weight (body_mass_g) penguins compare across islands (island)?Maybe case islands better food sources others, penguins can gorge food coma day long penguins islands lucky.LOT options visualize comparisons kind. examples, also see important guidelines implement follow.\nNote: looking values one continuous variable compare across levels categorical variable, helpful first examine values continuous variable vary begin .\n","code":"\npenguins %>%\n  ggplot(aes(x = body_mass_g)) +\n  geom_histogram(color = 'black')"},{"path":"different-geoms-and-when-to-use-them.html","id":"stat_summary","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.1 stat_summary()","text":"stat_summary() function extremely powerful versatile function can used create visualization summarizing y values unique x value. fun = argument specifies type summary want visualize y values. geom = argument specifies want results visualized. short, tell want visualize .summary function use often likely “mean” (average), can also use number others including “median”, “max”, “min”, “sd” (standard deviation), etc., compare several different summary statistics groups x-axis variable. examples follow use mean.Just several summary statistics can use, several ways can visualize summary statistics…","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"bar-1","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.1.1 Bar","text":"canonical visualization bar chart, using “bar” geom.\nGoing forward, habit making predictions /summarizing visualizations create brought back. formal prediction first declared specifying two mutually exclusive alternative patterns observed visualizations. idea (hypothesis) worked , subsequent predictions can just refer hypothesis rather explicitly stating . making visualization, short summary visualization shows written.\n“case differences penguin weight explained island live (e.g., penguins islands heavier average penguins islands), bars higher lower others. case differences penguin weight explained island live , bars roughly equivalent heights.”visualization can see , generally speaking, penguins Biscoe island seem heaviest heavier average penguins either Dream Torgersen island. penguins Dream Torgensen island seem similar weight. can see pattern noticing bar representing Biscoe island higher bars Dream Torgersen islands (height).Unlike histogram, height bar shows mean levels categorical variable, counts observations.","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"bar\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"point","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.1.2 Point","text":"Instead representing means bar geom, “point”.Compared means represented bars, difference average weight penguins Biscoe island two islands looks much drastic. ? data, just visualized differently. note scale y-axis changed . Instead running 0 - 5000 like bar chart, runs 3750 - 4750. Modifying axis scales covered later, now reminder mindful scales making interpretation, scale might skew interpretations someone makes visualization!","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"point\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"line","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.1.3 Line","text":"Another way visualize line instead bars points.Hm, okay, work. R telling something though:\ngeom_path: group consists one observation. need adjust group aesthetic?\ntelling line R trying make needs know points trying connect. know want individual pieces visualization (, mean body_mass_g level island) grouped together, group one observation. R even gave recommendation fix asking need adjust group aesthetic! new aesthetic covered later.now, R needs know levels island treated coming group. can done simply telling R one group:island (x-axis variable) categorical, ggplot try draw individual lines level default. However, , one value factor level least two points needed create line!number different styles line can use changing linetype:Different geoms can also combined. example, point lines make line plot look little cleaner.can use , line plots best used time series data.","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"line\")\n#> geom_path: Each group consists of only one observation.\n#> Do you need to adjust the group aesthetic?\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island, group = 1)) +\n  stat_summary(fun = \"mean\", geom = \"line\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island, group = 1)) +\n  stat_summary(fun = \"mean\", geom = \"line\", linetype = \"dashed\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island, group = 1)) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun = \"mean\", geom = \"line\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"error-bars","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.2 Error bars","text":"want visualizations informative possible. Keeping mind, often want give appreciation much variability data (showing mean). accomplished including error bars (either confidence intervals (CI) Standard Error Mean (SEM)) around summary statistics. use SEM course.manually compute upper lower values error bars mean, fortunately ggplot2 number built ways ! Even convenient, just another extension stat_summary(). , want standard error mean (“mean_se”), want represented error bars (“errorbar”).change anything raw data create new dataframes, stat_summary() just everything !one difference note use fun.data = instead fun =. “mean_se” give mean, upper, lower SE boundaries. Since getting multiple pieces information x-axis value, use slightly different argument.Another thing may note ugly looks. error bars far wide. can change width aesthetic.looks bit better, like see published peer-reviewed journal article.Error bars can added geoms:can also rendered different shapes:shortcut, “pointrange” geom can used create point mean line error bars:gives basically graph , uses one stat_summary() call! downside slightly less control customizing line point separately.","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"bar\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"bar\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\",\n               width = 0.3)\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = 0.2)\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"linerange\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun.data = \"mean_se\", geom = \"pointrange\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"boxplots","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.3 Boxplots","text":"Another way get sense distribution data use box plots.can create boxplot using geom_boxplot()","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_boxplot()"},{"path":"different-geoms-and-when-to-use-them.html","id":"problem-with-summary-stats","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.4 Problem With Summary Stats","text":"first lesson visualizations, saw many different datasets distributions consistent summary statistics (datasauRus dozen Anscombe’s quartet). rationale visualizations important. However, including nothing summary statistics graphs much better reporting summary statistics numbers! never know summary statistics hiding data:\nArtwork Horst (2022)\nboxplots give better sense distribution providing information just bar mean SEM , many datasets can consistent boxplot !\nSource: Stats, Different Graphs…\nbar charts boxplots conventionally common way represent data, just seen problematic can . always recommended visualize distribution data! way transparent accurately communicate patters data. reason, strongly advised use bars represent means.graphs outlined help achieve goals visualizing summary statistics raw distributions individual participant data dataset.","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"violin-plots","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.5 Violin Plots","text":"dataset large /creating visualization lot observations, violin plots can helpful. similar boxplots show little less information sensitive changes distribution raw data.\nSource: Stats, Different Graphs…\ncan create violin plot geom_violin()width section violin plot corresponds number observations area. Violin plots can also pair nicely boxplot!way, get benefits boxplot also conveying information underlying distribution. Since ggplot additive/layered system, can combine different geoms elements make particularly effective visualizations!","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_violin()\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_violin() +\n  geom_boxplot(width = 0.2)"},{"path":"different-geoms-and-when-to-use-them.html","id":"jitter-plots","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.6 Jitter Plots","text":"wanted actually show full distribution data, might think use geom_point() like create scatter plot. However, since x-axis categorical variable, data points value:can add noise (space) data using geom_jitter() jitter data points. Jitter plots especially good variables small n’s. can start little messy difficult read larger n’s though.dataset large, jitter plots can paired number geoms summary statistics create effective visualizations. Consider examples :Combine jitter mean SE:Combine jitter boxplots:jitter violin plots:","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_point()\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter()\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(height = 0, width = 0.2, \n              size = 1, alpha = 0.5,\n              color = \"darkgreen\") +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\",\n               color = \"black\",\n               fill = \"red\",\n               shape = 21,\n               size = 0.5)\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(alpha = 0.4, height = 0, width = 0.2, size = 1) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"errorbar\",\n               color = \"orange\",\n               width = 0.1,\n               size = 1) +\n  stat_summary(fun = \"mean\",\n               geom = \"point\",\n               color = \"red\",\n               size = 2)\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_boxplot(width = 0.6) +\n  geom_jitter(height = 0, width = 0.1,\n              alpha = 0.5, color = \"seagreen\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_violin() +\n  geom_jitter(alpha = 0.4, width = 0.05) +\n  stat_summary(fun = \"mean\",\n               geom = \"point\",\n               color = \"red\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"limits","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.6.1 Limits","text":"3 important things mindful creating jitter plot.adding noise, can quite literally change data visualized. problem categorical variable, like x-axis, small shifts position change value associated point. continuous variables, like y-axis, . reason, recommended jitter along categorical variable. Since y-axis continuous, want height points change. can tell ggplot height argument. preserve actual y-axis value, visualization represent true values dataset.jitter added visualization random. Every time make jitter plot, even rerun code jitter plot, jitter added random visualization look slightly different!jitter added visualization random. Every time make jitter plot, even rerun code jitter plot, jitter added random visualization look slightly different!running code generate jitter plot, sometimes code may work produce graph seems normal accompanied text output console:running code generate jitter plot, sometimes code may work produce graph seems normal accompanied text output console:\nWarning messages: 1: Removed X rows containing non-finite values (stat_smooth). 2: Removed X rows containing missing values (geom_point).\nCRITICALLY important mindful types errors. happening visualization actually showing data! message means X data points removed dataset generating graph. can particularly problematic visualizing summary statistics, like means error bars, reflecting true values dataset!!!common reason receiving error data points values captured axes limits. can either manually limited axis contain known value, value jittered past axis limit. later, now take home point look always check code warning/error messages (general, especially jittering).","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(height = 0)"},{"path":"different-geoms-and-when-to-use-them.html","id":"variations-on-jitter","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.7 Variations on Jitter","text":"","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"strip-chart","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.7.1 Strip Chart","text":"strip chart variation jitter plot. basically jitter plot represents mean small horizontal line (using “crossbar” geom).","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) + \n  geom_jitter(height = 0, width = .1, \n              color = \"darkmagenta\",\n              alpha = .5) + \n  stat_summary(fun = \"mean\", \n               geom = \"crossbar\", \n               width = 0.3)"},{"path":"different-geoms-and-when-to-use-them.html","id":"beeswarmdot-plot","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.7.2 Beeswarm/Dot Plot","text":"Another variation jitter plots Beeswarm Dot plotThe settings can quite temperamental, play around binwidth, stackratio, dotsize, dialed can make nice looking visualizations. Especially paired boxplot:","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +   \n  geom_dotplot(stackdir = \"center\", \n               binaxis = \"y\", \n               binwidth = 80,\n               stackratio = 1,\n               fill = \"cyan3\", \n               color = \"cyan3\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +  \n  geom_boxplot() + \n  geom_dotplot(binaxis = 'y', \n               stackdir = 'center', \n               stackratio = 1, \n               binwidth = 80,\n               binpositions = \"all\",\n               dotsize = 1,\n               alpha = .45, \n               fill = \"cyan3\", \n               color = \"cyan3\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"ridgeline-plot","chapter":"7 Different Geoms and When To Use Them","heading":"7.4.8 Ridgeline Plot","text":"Ridgeline plots, formerly known joy plots, allows visualize distributions numerical variable different levels categorical variable. important distinction ridgeline plots require continuous variable x-axis categorical variable y-axis. can create ridgeline plot using geom_density_ridges() function ggridges package (ggridges::geom_density_ridges()).Using scale argument gives space distribution.Like jitter plots, serve foundation several different visualizations. example, popular extension ridgeline plot make raincloud plot:variations raincloud plots lineranges (look better variability – example ), etc.:","code":"\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = island)) +\n  ggridges::geom_density_ridges(scale = 0.9)\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = island)) +  \n  ggridges::geom_density_ridges(jittered_points = TRUE, \n                      position = \"raincloud\",\n                      scale = 0.4)\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = island)) +\n  ggridges::geom_density_ridges(scale = 0.9) +\n  stat_summary(fun.data = \"mean_se\", geom = \"pointrange\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"new-arguments-and-functions","chapter":"7 Different Geoms and When To Use Them","heading":"7.5 New Arguments and Functions","text":"","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"faceting","chapter":"7 Different Geoms and When To Use Them","heading":"7.5.1 Faceting","text":"plot data may contain data several different variables time.can help differentiate different subsets data adding aesthetics, sometimes may want just separate entirely different graphs. known “faceting” (confused facetuning), can done using facet_grid(). Faceting allows apply ggplot code different subsets data, generating multiple graphs time.facet_grid(), must specify variable(s) want facet , whether want graphs spread across different columnsor spread across different rows.larger datasets, can facet across rows one variable columns another. quick, easy, yet powerful way explore larger datasets conditional relationships may exist certain variables.","code":"\npenguins %>%\n     ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n     geom_point()\npenguins %>%\n    ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n    geom_point() + \n    facet_grid(cols = vars(island))\npenguins %>%\n    ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n    geom_point() + \n    facet_grid(rows = vars(island))\npenguins %>%\n    ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n    geom_point() + \n    facet_grid(rows = vars(island),\n               cols = vars(species))"},{"path":"different-geoms-and-when-to-use-them.html","id":"groups","chapter":"7 Different Geoms and When To Use Them","heading":"7.5.2 Groups","text":"Previously, made line plot looked something like :noted since gear (x-axis variable) categorical, ggplot try draw individual lines level default. Since, one value factor level (mean), least two points needed create line, tell ggplot group 1 data point using group argument.notion grouping powerful another way can plot subsets data without make changes , manually compute summaries , raw data.example, can look wt changes across gear cars different cylinders grouping cyl.often studies implementing within-subjects designs (multiple measurements subject – particularly developmental/infant studies), see figures look like :easily accomplished simply adding group aesthetic!grouping data visualization code, may run instances graph winds looking funky. often result overlapping geoms.fix , think positions…","code":"\nmtcars %>%\n    ggplot(aes(y = wt, x = factor(gear), group = 1)) +\n    stat_summary(fun = \"mean\", geom = \"line\")\nmtcars %>%\n    ggplot(aes(y = wt, x = factor(gear), \n               group = factor(cyl), color = factor(cyl))) +\n    stat_summary(fun = \"mean\", geom = \"line\")\nweight_example %>%\n  ggplot(aes(y = Weight, x = Season)) + \n  geom_boxplot() +\n  geom_point() +\n  geom_line(aes(group = ID))"},{"path":"different-geoms-and-when-to-use-them.html","id":"positions","chapter":"7 Different Geoms and When To Use Them","heading":"7.5.3 Positions","text":"\n(great album though!)\nggplot2 number position/adjustment arguments can used cases. fact, already used one! Jittering position adjustment. , can create jitter plot using geom_jitter(), also accomplish thing using geom_point() setting position argument. e.g.,geom_point(position = \"jitter\") geom_point(position=position_jitter())effect thing. However, want include specific arguments (e.g., specify much vertical horizontal jitter ), can using longer position_*() format. helps create reproducible graphs, jitter otherwise random every time code ran create graph! Changing positional adjustments can drastically alter visualization generate.quick examples graphs came looking funky, using positional adjustments can fix .","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"identity","chapter":"7 Different Geoms and When To Use Them","heading":"7.5.3.1 Identity","text":"things start “identity” default position argument. Identity just overlaps elements:often results elements visualization hidden (definitely seems counterproductive).","code":"\npenguins %>%\n ggplot(aes(x = island, fill = species)) +\n  geom_bar(position = \"identity\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"dodging","chapter":"7 Different Geoms and When To Use Them","heading":"7.5.3.2 Dodging","text":"position = “dodge” places overlapping objects directly beside one another. makes easier compare individual values.\nNote: difference dodge dodge2 latter creates bit space elements. also notice , compared identity, scale y-axis graphs changed.\nuseful geoms bars well:Probably common use case error bars CIs. Observe following. default, often come looking funky:Adding position adjustments corrects !Sometimes want simultaneously dodge jitter. can jitterdodge.still quite cluttered needs work, way better !","code":"\npenguins %>%\n  ggplot(aes(x = island, fill = species)) +\n  geom_bar(position = position_dodge())\npenguins %>%\n  ggplot(aes(x = island, fill = species)) +\n  geom_bar(position = position_dodge2())\npenguins %>%\n ggplot(aes(y = body_mass_g, x = island, fill = species)) +\n     geom_point(shape = 21)\npenguins %>%\n ggplot(aes(y = body_mass_g, x = island, fill = species)) +\n     geom_point(shape = 21, position = position_dodge(width = .75))\ndata.frame(\n  x = c(\"a\",\"a\",\"b\",\"b\"),\n  y = 2:5,\n  g = rep(1:2, 2)\n) %>%\n  ggplot(aes(x, y, group = g)) +\n  geom_col(position = \"dodge\", fill = \"grey50\", color = \"black\")+\n  geom_errorbar(\n  aes(ymin = y - 1, ymax = y + 1),\n  width = 0.2,\n  position = \"dodge\"\n)\ndata.frame(\n  x = c(\"a\",\"a\",\"b\",\"b\"),\n  y = 2:5,\n  g = rep(1:2, 2)\n) %>%\n  ggplot(aes(x, y, group = g)) +\n  geom_col(position = \"dodge\", fill = \"grey50\", color = \"black\")+\n  geom_errorbar(\n    aes(ymin = y - 1, ymax = y + 1),\n    width = 0.2,\n    position = position_dodge(width = 0.9)\n)\npenguins %>%\nggplot(aes(x = island, y = body_mass_g, fill = species)) +\n    geom_boxplot(outlier.size = 0) +\n    geom_point(shape = 21)\npenguins %>%\nggplot(aes(x = island, y = body_mass_g, fill = species)) +\n    geom_boxplot(outlier.size = 0) +\n    geom_point(shape = 21, \n               position = position_jitterdodge(jitter.width = 0.3))"},{"path":"different-geoms-and-when-to-use-them.html","id":"stacking","chapter":"7 Different Geoms and When To Use Them","heading":"7.5.3.3 Stacking","text":"position = “fill” works like stacking, makes set stacked bars uniform height. makes easier compare proportions across groups.However, can misleading. Recall total number species == “Gentoo” penguins much greater species == “Chinstrap”, even though look different . can compare proportions easily, proportions may correspond drastically different raw numbers.","code":"\npenguins %>%\nggplot(aes(x = island, fill = species)) +\n  geom_bar(position = position_fill())"},{"path":"different-geoms-and-when-to-use-them.html","id":"categorical-categorical","chapter":"7 Different Geoms and When To Use Them","heading":"7.6 Categorical ~ Categorical","text":"variation visualizations one categorical variable, just adding second variable x-axis aesthetic mapping.add fill= mapping aesthetic set equal species (categorical variable data). can see, kind hard parse, likely used practice quick glimpse collaborators.","code":"\n# Counts\npenguins %>%\n  ggplot(aes(x = island, fill = species)) + \n  geom_bar(stat = \"count\")\n# Proportions\npenguins %>%\n  ggplot(aes(x = island, fill = species)) + \n    geom_bar(position = position_fill())"},{"path":"different-geoms-and-when-to-use-them.html","id":"cont-cat-cat","chapter":"7 Different Geoms and When To Use Them","heading":"7.6.1 Cont ~ Cat + Cat","text":"Add another aesthetic Cont ~ Cator facet","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(#height = 0, width = 0.2, \n              size = 1, alpha = 0.7,\n              #color = \"darkgreen\",\n              aes(fill = species),\n              pch = 21,\n              position = position_jitterdodge()) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\",\n               color = \"black\",\n               #fill = \"red\",\n               shape = 21,\n               size = 0.5,\n               aes(shape = species,\n                   fill = species),\n               position = position_dodge(width = 0.7))\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(height = 0, width = 0.2, \n              size = 2, alpha = 0.4,\n              pch = 21,\n              aes(shape = island,\n                   fill = island)) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"linerange\",\n               color = \"black\",\n               size = 2) +\n      stat_summary(fun = \"mean\",\n               geom = \"point\",\n               color = \"black\",\n               shape = 21,\n               size = 2.5,\n               aes(fill=island))+\n  facet_grid(cols = vars(species))"},{"path":"different-geoms-and-when-to-use-them.html","id":"raster","chapter":"7 Different Geoms and When To Use Them","heading":"7.6.1.1 Raster","text":"useful looking variable interest varies function two variables. Particularly categorical variables many levels.Looks way better levels variables, example:","code":"\npenguins %>%\n  ggplot(aes(x = island,\n             y = species,\n             z = body_mass_g)) +\n  stat_summary_2d(fun = \"mean\", geom = \"tile\")\ndiamonds %>%\n  ggplot(aes(x = color,\n             y = clarity,\n             z = carat)) +\n  stat_summary_2d(fun = \"mean\", geom = \"tile\",\n                  color = \"black\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"extras","chapter":"7 Different Geoms and When To Use Them","heading":"7.6.1.2 Extras","text":"may asked make visualizations like following. , code case needed.Bars:Lines:Fancier lines:","code":"\npenguins %>%\n  drop_na() %>%\n  ggplot(aes(x = island,\n             y = body_mass_g,\n             group = sex,\n             fill = sex)) +\n  stat_summary(fun = \"mean\",\n               geom = \"bar\",\n               position = position_dodge(width = 0.9),\n               color = \"black\") +\n  stat_summary(fun.data = \"mean_se\",\n               geom = \"linerange\",\n               position = position_dodge(width = 0.9))\npenguins %>%\n  drop_na() %>%\n  ggplot(aes(x = island,\n             y = body_mass_g,\n             group = sex,\n             color = sex)) +\n  stat_summary(fun = \"mean\",\n               geom = \"line\",\n               size = 1) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\")\npenguins %>%\n  drop_na() %>%\n  ggplot(aes(x = island,\n             y = body_mass_g,\n             group = sex,\n             color = sex)) +\n  stat_summary(fun = \"mean\",\n               geom = \"line\",\n               size = 2) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\",\n               size = 1) +\n    geom_vline(xintercept = seq(from = 0.5,\n                              by = 1,\n                              length.out = 3.5),\n             linetype = 2,\n             color = \"gray20\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"cont-cont-cat","chapter":"7 Different Geoms and When To Use Them","heading":"7.6.2 Cont ~ Cont + Cat","text":"Faceting scatter plots:","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_point()+\n  facet_grid(cols = vars(species))"},{"path":"different-geoms-and-when-to-use-them.html","id":"cont-cont-cont","chapter":"7 Different Geoms and When To Use Them","heading":"7.6.3 Cont ~ Cont + Cont","text":"Similar 2d histogram except instead counts, z-axis shows values continuous variable.","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g,\n             x = bill_depth_mm,\n             z = flipper_length_mm)) +\n  stat_summary_2d(color = \"black\")\npenguins %>%\n  ggplot(aes(y = body_mass_g,\n             x = bill_depth_mm,\n             z = flipper_length_mm)) +\n  stat_summary_hex(color = \"black\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"custom-geoms","chapter":"7 Different Geoms and When To Use Them","heading":"7.7 Custom geoms","text":"one exception, visualizations covered use geoms built ggplot2. However, saw one exception, packages contain many geoms use ggplot! addition loading new geoms packages, can use code create . Code included create 2 geoms can used make 2 visualizations currently pretty popular:","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"split-violin-plot","chapter":"7 Different Geoms and When To Use Them","heading":"7.7.1 Split Violin Plot","text":"split violin plot allows easily compare two groups (across levels another variable).\nNote: works comparing two groups! imagine difficult create visualization island measurements 2 species. possible 3 violins 3 box plots work.\n","code":"\nsource(\"geom_split_violin.R\")\npenguins %>%\nggplot(aes(x = island, y = body_mass_g, fill = species)) +\n  geom_split_violin(trim = FALSE, alpha = .4)+\n  geom_boxplot(width = .2, alpha = .6, \n               fatten = NULL, show.legend = FALSE) +\n  stat_summary(fun.data = \"mean_se\", geom = \"pointrange\", \n               show.legend = F, \n               position = position_dodge(.175))"},{"path":"different-geoms-and-when-to-use-them.html","id":"raincloud","chapter":"7 Different Geoms and When To Use Them","heading":"7.7.2 Raincloud","text":"Raincloud plots mentioned passing . However, can extremely effective ways communicating lot information. example template code fleshed version.","code":"\nsource(\"geom_flat_violin.R\")\nrain_height <- .1\n\npenguins %>%\nggplot(aes(x = \"\", y = body_mass_g, fill = species)) +\n  # clouds  \n  geom_flat_violin(position = position_nudge(x = rain_height+.05),\n                   alpha = 0.4, trim = FALSE) + \n  # rain\n  geom_point(aes(color = species), size = 2, \n             alpha = .5, show.legend = FALSE, \n              position = position_jitter(width = 0.05, height = 0)) +\n  # boxplots\n  geom_boxplot(width = 0.05, alpha = 0.4, \n               show.legend = FALSE, outlier.shape = NA,\n               position = position_nudge(x = -rain_height*2)) +\n  # mean and SE point in the cloud\n  stat_summary(fun.data = mean_cl_normal, mapping = aes(color = species), \n               show.legend = FALSE,\n               position = position_nudge(x = rain_height * 3)) +\n  # adjust layout\n  scale_x_discrete(name = \"\", expand = c(rain_height*3, 0, 0, 0.7)) +\n  scale_y_continuous(limits = c(2000, 7000)) +\n  coord_flip()"},{"path":"different-geoms-and-when-to-use-them.html","id":"best-practices","chapter":"7 Different Geoms and When To Use Them","heading":"7.8 Best Practices:","text":"guidelines best practices considered designing visualizations.Graphs EASILY readable, first foremost. top design philosophy constructing graphs.\nLabel everything (axes, titles, legends, anything else) make labels intuitive.\nFollow conventions: y = response variable, x = predictor, mindful variable types, etc.\nPeople need review caption understand visualization showing.\nLabel everything (axes, titles, legends, anything else) make labels intuitive.Follow conventions: y = response variable, x = predictor, mindful variable types, etc.People need review caption understand visualization showing.Graphs purposeful\nspecific relationship trend data trying communicate visualization?\nspecific relationship trend data trying communicate visualization?Graphs facilitate quantitative interpretation comparison, allow inferential statistics eye.\nRepresent variability (show full distribution, include error bars confidence intervals).\nShow relationship trends, means, etc.\nRepresent variability (show full distribution, include error bars confidence intervals).Show relationship trends, means, etc.Cool =/= best.\nJust can make crazy complex graph visualizes lot different variables, might even interactive show lot information, mean best thing . Just CAN something always mean . Keep things simple clean, following conventions type data relationship.\nJust can make crazy complex graph visualizes lot different variables, might even interactive show lot information, mean best thing . Just CAN something always mean . Keep things simple clean, following conventions type data relationship.Make visualization aesthetically pleasing cost wasting ink.","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"extra-resources","chapter":"7 Different Geoms and When To Use Them","heading":"7.9 Extra Resources","text":"ggplot2 referenceR graphics cookbookggplot2 bookggplot2 cheat sheetHelp understand different types graphsRecommendations best graphs visualizing particular relationshipsr-specific information construct graphsMore r-specific stuff. Top 50 ggplot geomsInfo plotlyggplot2 extensionsFundamentals Data Visualization","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"citations","chapter":"7 Different Geoms and When To Use Them","heading":"7.10 Citations","text":"always, illustrations (Horst, 2022)(https://twitter.com/allison_horst)Custom violin plots modified source code ","code":""},{"path":"customization.html","id":"customization","chapter":"8 Customization","heading":"8 Customization","text":"now number different graphs toolkit use visualizing different types relationships comparisons data. also learned lot ways tinker geoms aesthetics. Now time add techniques skills customize elements graphs.serve base plot customize:Saving visualization variable prevents need copy/paste entire code time.","code":"\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nbase_plot = penguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(height = 0, width = 0.1, \n              size = 2, alpha = 0.3,\n              aes(color=island)) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\",\n               color = \"black\",\n               aes(fill = island),\n               shape = 21,\n               size = 0.5)\n\nbase_plot"},{"path":"customization.html","id":"scaling-the-axes","chapter":"8 Customization","heading":"8.1 Scaling The Axes","text":"default, ggplot use axes settings thinks best highlight data visualized. ,y-axis runs ~2000 - 7000 intervals 1000 starting 3000.can changed using scale_*_* function. first * replaced axis want modify, second type data scale want . , y-axis continuous, scale_y_continuous() used. arguments can used modify shown axis. two reasons might want change .Generally speaking, good practice axes start 0 show full scale. can misleading parts scale obscured removed.Generally speaking, good practice axes start 0 show full scale. can misleading parts scale obscured removed.might issue points jittered past scale result Warning message covered previous lessons.might issue points jittered past scale result Warning message covered previous lessons.Hm. change intervals 1000 500, still shows values 3000 6000. actual range axis changed. Remember graphs plotted (x,y) cartesian coordinates. mind, needs modified limits coordinate system. can done coord_cartesian().Changing limits coordinate system changes zoom visualization underlying data.number scale commands override default, scale_y_log10(), scale_y_sqrt(), scale_y_reverse(), quickly easily change scale. Instead completely transform data, just adding transform axis plot can big time saver much safer!","code":"\nbase_plot +\n  scale_y_continuous(breaks = seq(from = 0, to = 7000, by = 500),\n                     labels = seq(from = 0, to = 7000, by = 500))\nbase_plot +\n  coord_cartesian(ylim = c(0,7000)) + \n  scale_y_continuous(breaks = seq(from = 0, to = 7000, by = 500),\n                     labels = seq(from = 0, to = 7000, by = 500))"},{"path":"customization.html","id":"get-rid-of-padding","chapter":"8 Customization","heading":"8.1.1 Get Rid Of Padding","text":"Even though y-axis starts 0 now, bit space actual start graph 0. default bit padding. can particularly egregious bars:can eliminated expand argument.","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) + \n  stat_summary(fun = \"mean\", geom = \"bar\")\nbase_plot +\n  coord_cartesian(ylim = c(0,7000)) + \n  scale_y_continuous(breaks = seq(from = 0, to = 7000, by = 500),\n                     labels = seq(from = 0, to = 7000, by = 500),\n                     expand = c(0,0))"},{"path":"customization.html","id":"titles-captions-and-labels-oh-my","chapter":"8 Customization","heading":"8.2 Titles, Captions, and Labels, Oh My!","text":"case visualization interpretable without reference title caption, good visualization clear informative title. Additionally, may noticed ggplot uses variable names values x- y-axis labels values, respectively. often case names easiest work data manipulation/cleaning want displayed visualizations.Fortunately, extremely easy change things! different arguments can passed labs() function:specific arguments used pretty self explanatory. added information visualization, particularly look great. size title subtitle close together, rather small. fact, text pretty small. titles centered footnote left-aligned. Adding information just created needs customized!\nNote: Graphs may look slightly different generate code. hidden formatting back-end included help graphs render properly space constraint.\n","code":"\nbase_plot +\n  coord_cartesian(ylim = c(0,7000)) + \n  scale_y_continuous(breaks = seq(from = 0, to = 7000, by = 500),\n                     labels = seq(from = 0, to = 7000, by = 500),\n                     expand = c(0,0)) +\n  labs(title = \"How Does Penguin Weight Vary Across Islands?\",\n       subtitle = \"Islands Contain Different Penguin Species\",\n       y = \"Body Mass (grams)\",\n       x = \"Island\",\n       tag = \"Figure 1\",\n       caption = \"Note: Error bars represent +/- 1 SEM\")"},{"path":"customization.html","id":"themes","chapter":"8 Customization","heading":"8.3 Themes","text":"theme visualization nuanced customization take place.First, tweaks made thus far saved, prevent need copy/pasting:, prevent need copy/pasting long code strings, subsequent changes just added saved one variable. full code displayed end.ggplot comes number built themes preset settings. Among common theme_minimal(), theme_bw(), theme_classic().start develop personal taste visualizations find pleasing informative. sake illustration, subsequent figures use theme_classic().using one ggplot’s built themes serves good starting point, make manual changes theme’s settings, use theme() function. function works follows, generally speaking, first specify specific element visualization want modify, set equal type element element_*() call (e.g., text, line, blank, etc.), specify part element want change value equal .example, wanted change title text size 18 font, add following code:theme(plot.title = element_text(size = 18)), , commit memory different visualization element names arguments modify! fact, just check handy cheat sheet!common elements ways may want modify highlighted . pretty intuitive, ton explanation.","code":"\nmodified_plot = base_plot +\n  coord_cartesian(ylim = c(0,7000)) + \n  scale_y_continuous(breaks = seq(from = 0, to = 7000, by = 500),\n                     labels = seq(from = 0, to = 7000, by = 500),\n                     expand = c(0,0)) +\n  labs(title = \"How Does Penguin Weight Vary Across Islands?\",\n       subtitle = \"Islands Contain Different Penguin Species\",\n       y = \"Body Mass (grams)\",\n       x = \"Island\",\n       tag = \"Figure 1\",\n       caption = \"Note: Error bars represent +/- 1 SEM\")\nmodified_plot +\n  theme_minimal()\nmodified_plot +\n  theme_bw()\nmodified_plot +\n  theme_classic()"},{"path":"customization.html","id":"titles","chapter":"8 Customization","heading":"8.3.1 Titles","text":"Changing size, font face (making bold), color, text visualization help improve overall legibility.default, text ggplot2 left-aligned. change location text, need adjust vertical horizontal location coordinate system, using vjust hjust, respectively. adjusting:0 == left-aligned0.5 == centered1 == right-aligned","code":"\nmodified_plot = modified_plot +\n  theme_classic() +\n  theme(plot.title = element_text(size = 18),\n        plot.subtitle = element_text(size = 10, \n                                     color = \"grey50\",\n                                     face = \"bold\"),\n        plot.tag = element_text(face = \"bold\"))\n\nmodified_plot\nmodified_plot = modified_plot +\n  theme(plot.title = element_text(size = 18,\n                                  hjust = 0.5,\n                                  face = \"bold\"),\n        plot.subtitle = element_text(size = 10, \n                                     color = \"grey50\",\n                                     hjust = 0.5),\n        plot.tag = element_text(face = \"bold\"))\n\nmodified_plot"},{"path":"customization.html","id":"captions","chapter":"8 Customization","heading":"8.3.2 Captions","text":"","code":"\nmodified_plot = modified_plot +\n  theme(plot.caption = element_text(hjust = 0,\n                                    face = 'italic'))\n\nmodified_plot"},{"path":"customization.html","id":"axes-titles","chapter":"8 Customization","heading":"8.3.3 Axes Titles","text":"multiple elements visualization (e.g., multiple axis titles), can either change simultaneously (e.g., using axis.title) specify individually (e.g., using axis.title.x axis.title.y).text gets bigger, axes titles seem close tick mark values. needs breathing room keep different elements visually distinct easy parse. Otherwise, visualization trouble can achieved modifying text’s margins – area top, right, bottom, left .Notice margins reference overall orientation graph. add space y-axis title values, even though “bottom” element, right overall graph. Thus, “r” space added margin().","code":"\nmodified_plot +\n  theme(axis.title.x = element_text(size = 14,\n                                    face = \"bold\"),\n        axis.title.y = element_text(size = 14,\n                                    face = \"bold\"))\nmodified_plot = modified_plot +\n  theme(plot.subtitle = element_text(size = 10, \n                                     color = \"grey50\",\n                                     hjust = 0.5,\n                                     margin = margin(b = 0.2, \n                                                     unit = \"inch\")),\n        axis.title.x = element_text(size = 16,\n                                    face = \"bold\",\n                                    margin = margin(t = 0.2, \n                                                    unit = \"inch\")),\n        axis.title.y = element_text(size = 16,\n                                    face = \"bold\",\n                                    margin = margin(r = 0.2, \n                                                    unit = \"inch\")))\n\nmodified_plot"},{"path":"customization.html","id":"axes-values","chapter":"8 Customization","heading":"8.3.4 Axes Values","text":"saw previously actual values axes modified scale_*_* function. appearance values can also customized. values axis, well tick marks lines !\nNote: generally recommended change color axis lines tick marks. included instructional purposes.\nNow looking like publication-worthy visualization!","code":"\nmodified_plot = modified_plot +\n  theme(axis.line.x = element_line(color = \"gray40\", size = 0.5),\n        axis.ticks = element_line(color = \"gray40\", size = 0.5),\n        axis.text = element_text(face = \"bold\",\n                                 color = \"black\",\n                                 size = 12))\n\nmodified_plot"},{"path":"customization.html","id":"setting-a-default","chapter":"8 Customization","heading":"8.3.5 Setting a Default","text":"gone learned ways customize visualizations. may started develop sense think looks best generally – e.g., particular font sizes, spacing, etc. individual visualizations course need tweaks (like correct titles), may settings think can serve good baseline.Instead include theme() code every single visualization make:can just set default automatically applied visualizations make ggplot restart R session. can theme_set()Now new visualizations automatically settings applied default!","code":"\ntheme(plot.title = element_text(size = 18,\n                                face = \"bold\",\n                                hjust = 0.5),\n      plot.subtitle = element_text(size = 10, \n                                   color = \"grey50\",\n                                   face = \"bold\",\n                                   hjust = 0.5,\n                                   margin = margin(b = 0.2, \n                                                   unit = \"inch\")),\n      plot.tag = element_text(face = \"bold\"),\n      plot.caption = element_text(hjust = 0,\n                                  face = 'italic'),\n      axis.title.x = element_text(size = 16,\n                                  face = \"bold\",\n                                  margin = margin(t = 0.2, \n                                                  unit = \"inch\")),\n      axis.title.y = element_text(size = 16,\n                                  face = \"bold\",\n                                  margin = margin(r = 0.2, \n                                                  unit = \"inch\")),\n      axis.line.x = element_line(color = \"gray40\", size = 0.5),\n      axis.ticks = element_line(color = \"gray40\", size = 0.5),\n      axis.text = element_text(face = \"bold\",\n                               color = \"black\",\n                               size = 12))\ntheme_set(theme_classic() + \n            theme(plot.title = element_text(size = 18,\n                                face = \"bold\",\n                                hjust = 0.5),\n      plot.subtitle = element_text(size = 10, \n                                   color = \"grey50\",\n                                   face = \"bold\",\n                                   hjust = 0.5,\n                                   margin = margin(b = 0.2, \n                                                   unit = \"inch\")),\n      plot.tag = element_text(face = \"bold\"),\n      plot.caption = element_text(hjust = 0,\n                                  face = 'italic'),\n      axis.title.x = element_text(size = 16,\n                                  face = \"bold\",\n                                  margin = margin(t = 0.2, \n                                                  unit = \"inch\")),\n      axis.title.y = element_text(size = 16,\n                                  face = \"bold\",\n                                  margin = margin(r = 0.2, \n                                                  unit = \"inch\")),\n      axis.line.x = element_line(color = \"gray40\", size = 0.5),\n      axis.ticks = element_line(color = \"gray40\", size = 0.5),\n      axis.text = element_text(face = \"bold\",\n                               color = \"black\",\n                               size = 12)))\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_violin(aes(fill = island),\n              alpha = 0.2) +\n  geom_jitter(alpha = 0.4, width = 0.05) +\n  stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\",\n               aes(color = island),\n               size = 0.5)"},{"path":"customization.html","id":"legends","chapter":"8 Customization","heading":"8.3.6 Legends","text":"Modifying visualization’s legend can bit tricky lot changes can make. One first options get rid altogether, since graphs rely legend comprehension:However, certain cases, particularly displaying information another variable (e.g., indicating penguin sex point shape), legend needed customization may useful.","code":"\nmodified_plot +\n  theme(legend.position = \"none\")\npenguins %>%\n  drop_na() %>%\n    ggplot(aes(y = body_mass_g, x = island)) +\n    geom_point(size = 2, alpha = 0.3,\n               shape = 21,\n                aes(fill = sex),\n                position = position_jitterdodge()) +\n    stat_summary(fun.data = \"mean_se\",\n                 geom = \"pointrange\",\n                 color = \"black\",\n                 aes(fill = sex),\n                 shape = 21,\n                 size = 0.5,\n                 position = position_dodge(width = 0.75)) +  \n  coord_cartesian(ylim = c(0,7000)) + \n  scale_y_continuous(breaks = seq(from = 0, to = 7000, by = 500),\n                     labels = seq(from = 0, to = 7000, by = 500),\n                     expand = c(0,0)) +\n  labs(title = \"How Does Penguin Weight Vary Across Islands?\",\n       subtitle = \"Islands Contain Different Penguin Species\",\n       y = \"Body Mass (grams)\",\n       x = \"Island\",\n       tag = \"Figure 1\",\n       caption = \"Note: Error bars represent +/- 1 SEM\",\n        # New code starts here:\n       fill = \"Sex\" # Change Legend label with the name of the mapped aesthetic.\n       ) +\n  theme(legend.box.background = element_rect(color = \"black\", # Add a defined box around legend\n                                             size = 2),\n        legend.title = element_text(face = \"bold\"), # Modify the title\n        legend.text = element_text(face = \"bold\"), # Modify text\n        legend.title.align = 0.5, # Change alignment of legend title. Think of this like an hjust.\n        legend.key = element_rect(fill = \"white\", colour = \"black\") # Add defined boxes around legend key graphic\n        ) "},{"path":"customization.html","id":"combining-graphs","chapter":"8 Customization","heading":"8.4 Combining Graphs","text":"newly acquired data visualization skills, likely creating single visualization time. combine arrange multiple graphs single figure, can use patchwork package!\nArtwork Horst (2022)\nTake following 3 graphs example:Patchwork uses pretty intuitive system create different layouts combining graphs using +, /, | operators.+ combines graphs using default layout (creating square grid possible)/ stack graphs top | places graphs next can nest arrangements created operators. 3 graphs result using | identical +. Using | best communicates intended layout.\nNote: format settings defined single graph may best arrangement multiple graphs combined single visualization. visualizations axes titles labels little big, causing overlap unreadable.\n","code":"\na = penguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(height = 0, width = 0.1, \n              size = 2, alpha = 0.3,\n              aes(color=island)) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\",\n               color = \"black\",\n               aes(fill = island),\n               shape = 21,\n               size = 0.5)\na\nb = penguins %>%\n  ggplot(aes(y = body_mass_g, x = species)) +\n  geom_jitter(height = 0, width = 0.1, \n              size = 2, alpha = 0.3,\n              aes(color=species)) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\",\n               color = \"black\",\n               aes(fill = species),\n               shape = 21,\n               size = 0.5)\nb\nc = penguins %>%\n  drop_na() %>%\n    ggplot(aes(y = body_mass_g, x = sex)) +\n    geom_point(size = 2, alpha = 0.3,\n               shape = 21,\n                aes(fill = sex),\n                position = position_jitter(width = 0.1)) +\n    stat_summary(fun.data = \"mean_se\",\n                 geom = \"pointrange\",\n                 color = \"black\",\n                 aes(fill = sex),\n                 shape = 21,\n                 size = 0.5)\nc\nlibrary(patchwork)\na + b\nb / c\n(c | (a / b))"},{"path":"customization.html","id":"saving-graphs","chapter":"8 Customization","heading":"8.5 Saving Graphs","text":"created masterpieces, may want export can added manuscripts created outside R, posters, anything else. save ggplot graphs, can use ggsave(). several file type options, recommend pdf. generally maintains high resolution aspect ratio. ggsave(), must specify:filename want graph saved (can/include relative file path)plot want savingthe width height file","code":"\nggsave(plot = a, \n       filename = \"visualizations/test_plot.pdf\",\n       width = 12,\n       height = 8)"},{"path":"customization.html","id":"extra-resources-1","chapter":"8 Customization","heading":"8.6 Extra resources","text":"Data Visualization – practical introduction (Kieran Healy)Graphics communicationPatchwork sourcePatchwork backgroundggplot theme cheat sheetHorst, . (2022). https://github.com/allisonhorst/stats-illustrations/","code":""}]
