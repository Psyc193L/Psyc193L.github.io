[{"path":"why-use-r.html","id":"why-use-r","chapter":"1 Why use R?","heading":"1 Why use R?","text":"Consider main tasks done Social Sciences. sciences, work data. inspect manipulate data different ways, modify make amenable analysis visualizations. Visualizations statistical analyses help explore relationships observed real world test relationships experiments/studies. use communicate findings general public.want use R programming language vs Graphical User Interface (GUI) software like Excel, JMP, SPSS, SAS, ?start, simple practical considerations:R free. software .R can handle large datasets, GUI-based software struggle often crash .R open-source language, means anyone can contribute . results constantly evolving improving, increasing capabilities.consequence , R, can perform MUCH complex sophisticated statistical analyses data visualization. R literally created purpose!important, however, one main reasons use programming language accomplish main tasks Social Sciences Reproducibility.Excel conventional statistics software like SPSS use point--click GUI, thus lack simple way document share analyses. makes repeating editing work later hard need rely memory repetition. hard work backwards end result see arrived documented anywhere. “reinvent wheel” perform analysis across different data sets. R open-source interpreted programming language. Instead pointing clicking software accomplish tasks, write code execute . code write read evaluated line line documents save. practical consequences :Selfishly, allows prepare cleaning, analysis, visualization code beforehand. soon finish data collection, can just run code ’ve written immediately done!Also, allows automate tasks . way, repeat process clicking GUI re-thing many times.\nSource: trendct.org\nAllows create literate programming documents (markdown, later) – explain English code . drastically helps communicate results making code interpretable, even re-visit weeks/months/years line.\n“always working least one collaborator: Future .”-Hadley Wickham\n“always working least one collaborator: Future .”-Hadley WickhamOften times working non-collaborators, makes easier. People can build work (code writing) done see step step exactly work .Generally, helps others able see exactly run analyses . great practice open-science movement, can actually help fight back critiques questions data/analyses.\nArtwork @allison_horst\nR particular instead programming language?“Python?” – might ask. learn ! Python great advanced machine learning (neural networks deep learning), fMRI image analyses, lots advanced programming things. However, data science tasks social scientists researchers often concerned , R preferable uses basic syntax approach everything. Python, toolbox may bigger, tools different.\nTobi Gerstenberg’s Statistical Methods Behavioral Social Sciences class\n","code":""},{"path":"why-use-r.html","id":"r-tools","chapter":"1 Why use R?","heading":"1.1 R tools","text":"","code":""},{"path":"why-use-r.html","id":"base-r-vs-rstudio","chapter":"1 Why use R?","heading":"1.1.1 Base R vs RStudio","text":"talking R, referred programming language R . use RStudio help write use R code. RStudio Integrated Development Environment (IDE). Basically, provides interface make writing using R code easier.R can downloaded .RStudio can downloaded .\nmust download R RStudio.\nmust download R RStudio.","code":""},{"path":"why-use-r.html","id":"rstudio-tour","chapter":"1 Why use R?","heading":"1.1.2 RStudio Tour","text":"Generally speaking, see 4 sections RStudio window. quickly overview :R file / documentThis contents file write code. usually largest section top left window.ConsoleThis code executed/ran, output code appears running. can run line code file clicking line pressing command+enter OSX, control+enter windows.EnvironmentThis defined objects , later.Extra/swiss army knife sectionThis graphs/visualizations make appear (plots), list installed loaded packages (Packages), R Documentation functions look (Help).","code":""},{"path":"why-use-r.html","id":"customize-your-rstudio","chapter":"1 Why use R?","heading":"1.1.3 Customize Your RStudio","text":"Looking default white screen long time can put lot strain eyes. RStudio comes lot different themes can apply going :preferences -> appearance. personally use custom theme called “Mojave Dark” (one see screenshots called “Cobalt”). theme use personal preference.Additionally, two settings tweaks make. Go preferences …R Markdown -> deselect “show output inline R markdown documents”Code -> Display -> check Rainbow Parentheses","code":""},{"path":"why-use-r.html","id":"file-types","chapter":"1 Why use R?","heading":"1.1.4 Different types of files","text":"three main types R files.R scripts (“fileName.r”) contain R code.R markdown notebooks (“fileName.rmd”) contain text, code, outputs.\nArtwork @allison_horst\nRData files (“fileName.RData”), contain saved R objects/variables.use markdown files class enable easily annotate code create literate programming documents. also allow easily abide general programming philosophy called “separation concerns,” says code organized distinct sections, handling specific task. enables quickly navigate code know look something working intended.Markdown files can also used create documents help communicate data analysis pipeline. use Microsoft Word, every time figure result changes, go copy/paste bunch stuff, make million changes throughout, save new files, nuisance often error prone. R Markdown files living, breathing documents. Figures results automatically updated data changed. Also, everything one place. fact, looking output markdown file!\nArtwork @allison_horst\n","code":""},{"path":"why-use-r.html","id":"components-of-a-markdown-file","chapter":"1 Why use R?","heading":"1.1.5 Components of a Markdown File","text":"Markdown files 2 components:General text, like isCode chunks, like :put code inside chunks, text outside. can comment text starting line hashtag. Comments text ignored R running code.create code chunk putting three back-ticks ( ``` ) two lines break ,adding set curly brackets {} “r” next first set back ticks: ```{r}can also insert code chunks pressing control+options+OSX control+alt+windows (RStudio full nifty shortcuts!)Generally speaking, want name code chunks help readily identify task section code handling.","code":"\n# This is a code chunk -- essentially mini r files\n# You put R code inside chunks, text outside.\n# You can comment out text by starting the line with a hashtag. \n  # Comments are text that is not run."},{"path":"why-use-r.html","id":"resources","chapter":"1 Why use R?","heading":"1.2 Resources","text":"good resources help throughout class R learning journey.R CheatsheetsR CheatsheetsA particularly useful cheatsheetA particularly useful cheatsheetSolutions common problemsSolutions common problemsWorking consoleWorking consoleKeyboard shortcutsKeyboard shortcutsMore Keyboard shortcutsMore Keyboard shortcutsTips efficient codeTips efficient codeFunctional Programming (Advanced)Functional Programming (Advanced)","code":""},{"path":"r-coding-basics.html","id":"r-coding-basics","chapter":"2 R Coding Basics","heading":"2 R Coding Basics","text":"Okay R?","code":""},{"path":"r-coding-basics.html","id":"operators","chapter":"2 R Coding Basics","heading":"2.1 Operators","text":"","code":""},{"path":"r-coding-basics.html","id":"arithmetic-operators","chapter":"2 R Coding Basics","heading":"2.1.1 Arithmetic Operators","text":"R programming language used statistical modeling, data analysis, visualization. core, uses operators evaluate different statements. basic form using arithmetic operators perform arithmetic operations:","code":"\n2 + 2\n#> [1] 4\n6 / 2\n#> [1] 3\n3^2\n#> [1] 9\n10 %% 4\n#> [1] 2\n3^2/2*5/2\n#> [1] 11.25"},{"path":"r-coding-basics.html","id":"comparison-operators","chapter":"2 R Coding Basics","heading":"2.1.2 Comparison Operators","text":"Return TRUE FALSE values (aka booleans):can look simple test expressions see evaluate:","code":"\n6 > 4\n#> [1] TRUE\n(2+4) < (8+8)\n#> [1] TRUE\n2.5 <= 2.5\n#> [1] TRUE"},{"path":"r-coding-basics.html","id":"logical-operators","chapter":"2 R Coding Basics","heading":"2.1.3 Logical Operators","text":"Look simple test expressions see evaluate:TRUE also = 1, FALSE also = 0.Programming languages often makes use booleans (TRUE FALSE), using logical operators simple logical test see expression evaluates TRUE FALSE. bit!\nNote: must use CAPS (spell logical’s name)\n","code":"\nTRUE & FALSE\n#> [1] FALSE\nTRUE | FALSE\n#> [1] TRUE\n!FALSE\n#> [1] TRUE\nTRUE < FALSE\n#> [1] FALSE\nTRUE + TRUE\n#> [1] 2\nTRUE + FALSE \n#> [1] 1"},{"path":"r-coding-basics.html","id":"variable-assignment","chapter":"2 R Coding Basics","heading":"2.2 Variable Assignment","text":"can also define objects (variables) save values strings code . Variables store information can access later. R, assign value variable assignment operator: = <-:x = 4x <- 4Think = <- mean “gets”. statements mean, “x gets 4”.R, conventionally, use <-. languages, use =. main argument using = sometimes can run trouble accidentally use = mean use ==. big deal languages performing arithmetic core. typically use = default since use one language, ’d recommend using <- beginner.reference access information stored variable, “call” (type code) variable’s name:R programming language, specific finicky. must precise code.Running code give :\nError: object ‘myvar’ found\nSmall typos like one can cause big issues!\nArtwork @allison_horst\n","code":"\nx = 4\nx\n#> [1] 4\nx+2\n#> [1] 6\nx + x\n#> [1] 8\ny = x + 4\ny\n#> [1] 8\nz = \"Hello world\"\nz\n#> [1] \"Hello world\"\nmyVar = 4\nmyVar\n#> [1] 4\nmyVar = 4\nmyvar"},{"path":"r-coding-basics.html","id":"variabledata-modes-types","chapter":"2 R Coding Basics","heading":"2.3 Variable/Data modes (types)","text":"R classifies data works different types storage modes, can organized different categories:\nArtwork @allison_horst\n. ContinuousNumeric – Whole numbers decimalsIntegers (int) - whole numbersDouble-precision (dbl) - real numbers (floating point numerical values)B. DiscreteCharacter (chr) - string characters/text (can use ” ’)Logical (lgl) - logical TRUE FALSEFactor (fct) - factors, R uses represent categorical variables fixed possible values discrete data. Useful true categorical data, want override ordering character vectors improve displayThere data types (e.g., date) largely avoided .Variables automatically dynamically assigned one modes based assigned . can check type data using typeof() function (functions later!).","code":"\ny\n#> [1] 8\ntypeof(y)\n#> [1] \"double\"\nz\n#> [1] \"Hello world\"\ntypeof(z)\n#> [1] \"character\""},{"path":"r-coding-basics.html","id":"global-environment","chapter":"2 R Coding Basics","heading":"2.4 Global environment","text":"workspace’s global environment contain objects saved R session, including variables, functions, data, etc. can print workspace code ls(). Previously objects x, y, z, myVar saved. ls() ran, four objects seen.can remove objects environment rm() command.Notice x object longer . rm() permanent, careful!may thought, “y = x + 2, remove x, error?” good question answer , exact value x saved variable y. x dynamic value, rather set x = 4, anytime R reads x, replace 4. y set equal 4 + 2. R, variable declared (set = <-), value change unless explicitly overwrite .want clear entire workspace (good practice beginning script), type rm(list=ls()) – saying remove (rm) objects workspace (ls()).","code":"\nls()\n#> [1] \"myVar\" \"x\"     \"y\"     \"z\"\nrm(x)\n\nls()\n#> [1] \"myVar\" \"y\"     \"z\""},{"path":"r-coding-basics.html","id":"data-objects","chapter":"2 R Coding Basics","heading":"2.5 Data Objects","text":"obviously want evaluate simple expressions R. end, point going need save just single value variable! many different types data objects, structures can hold data. 2 particular focused : vectors data frames.","code":""},{"path":"r-coding-basics.html","id":"Vectors","chapter":"2 R Coding Basics","heading":"2.5.1 Vectors","text":"Often times want work series values (elements). (Atomic) Vectors exactly ! item vector element. initiate vector c():Arithmetic logical operations can performed vector (one computationally efficient ways code):Vector operations can also involve vectors! example:looking vec1 + vec2, first, element 1 vec1 added element 1 vec2. , element 2 vec1 added element 2 vec2, etc. use operator two vectors, operator applied position-matched elements two vectors.Observe output . notice?elements vector type data. R automatically coerce (change) data types elements vector match . careful can often cause issues!","code":"\nmyVector = c(4,2,0,6,9)\nmyVector\n#> [1] 4 2 0 6 9\n# Can also store text, not just numbers.\ny = \"hello\"\ny\n#> [1] \"hello\"\n# Or strings of text\ny = c(\"hello\", \"world\")\ny\n#> [1] \"hello\" \"world\"\nmyVector * 2\n#> [1]  8  4  0 12 18\nmyVector > 4\n#> [1] FALSE FALSE FALSE  TRUE  TRUE\nvec1 = c(1, 2, 3)\nvec2 = c(4, 5, 6)\n\nvec1 + vec2\n#> [1] 5 7 9\nvec1 > vec2\n#> [1] FALSE FALSE FALSE\nc(1, \"hello\")\n#> [1] \"1\"     \"hello\""},{"path":"r-coding-basics.html","id":"indexing-vectors","chapter":"2 R Coding Basics","heading":"2.5.1.1 Indexing Vectors","text":"“Indexing” term used refer process selecting pulling specific elements object. can index vector following variable name set brackets specify numerical position element want.","code":"\n# Here, select the second element in the vector. \n# Done so by putting 2 in brackets after the vector to \n# say: \"index the second element of this object\"\nmyVector[2] \n#> [1] 2"},{"path":"r-coding-basics.html","id":"dataframes","chapter":"2 R Coding Basics","heading":"2.5.2 Dataframes","text":"time going working just one vector values. Instead, set different data (dataset). common data structure used R data frame (df), used datasets. majority work Social Sciences involving data frames. , good get used early!can think data frame like excel spreadsheet: series equal length vectors, vector treated column elements vectors rows. time using data frame loading dataset existing file. However, can also create scratch:Column name quotes, values vectorsWhen one value specified, repeated.two, cycle two.","code":"\ndata.frame()\n#> data frame with 0 columns and 0 rows\ndata.frame(\"Exam\" = c(1:4), \n           \"Score\" = c(88,90,77,98)) \n#>   Exam Score\n#> 1    1    88\n#> 2    2    90\n#> 3    3    77\n#> 4    4    98\ndata.frame(\"Exam\" = c(1:4), \n           \"Score\" = c(88,90,77,98), \n           \"Student\" = c(\"Dave\")) \n#>   Exam Score Student\n#> 1    1    88    Dave\n#> 2    2    90    Dave\n#> 3    3    77    Dave\n#> 4    4    98    Dave\ndata.frame(\"Exam\" = c(1:4), \n           \"Score\" = c(88,90,77,98), \n           \"Student\" = c(\"Dave\", \"Ally\")) \n#>   Exam Score Student\n#> 1    1    88    Dave\n#> 2    2    90    Ally\n#> 3    3    77    Dave\n#> 4    4    98    Ally"},{"path":"r-coding-basics.html","id":"indexing-dfs","chapter":"2 R Coding Basics","heading":"2.5.2.1 Indexing dfs","text":", isolating specific part object called indexing.ways index different parts df.df[column] (single value brackets selects columns)example, get second column dfdf[row,column] select single element (row/column combination) using numbers.example, get value 2nd row 1st column dfLeaving one row column sections bracket blank select .example, get value first row columns dfto get value first column rows dfA common way index columns data frame using $ sign. wanted score column data frame, use df$ScoreNote difference two. index column brackets, pulling entire column . data frame, output list, always use directly functions. index $, however, output vector just values, can used many functions. quick way check object’s type using typeof() function (common programming languages). example, compare types two objects observe happens try find mean scores:Since output $ indexing vector, can index get particular element want, just done !Instead using $ index name, can also use double brackets:may familiar knowledge coding languages, little verbose.","code":"\ndf = data.frame(\"Exam\" = c(1:4), \n                \"Score\" = c(88,90,77,98), \n                \"Student\" = c(\"Dave\"))\ndf\n#>   Exam Score Student\n#> 1    1    88    Dave\n#> 2    2    90    Dave\n#> 3    3    77    Dave\n#> 4    4    98    Dave\ndf[2]\n#>   Score\n#> 1    88\n#> 2    90\n#> 3    77\n#> 4    98\ndf[2,1]\n#> [1] 2\ndf[1,]\n#>   Exam Score Student\n#> 1    1    88    Dave\ndf[,1]\n#> [1] 1 2 3 4\ndf$Score\n#> [1] 88 90 77 98\ndf[2]\n#>   Score\n#> 1    88\n#> 2    90\n#> 3    77\n#> 4    98\ndf[2]\n#>   Score\n#> 1    88\n#> 2    90\n#> 3    77\n#> 4    98\ntypeof(df[2])\n#> [1] \"list\"\nmean(df[2])\n#> Warning in mean.default(df[2]): argument is not numeric or\n#> logical: returning NA\n#> [1] NA\ndf$Score\n#> [1] 88 90 77 98\ntypeof(df$Score)\n#> [1] \"double\"\nmean(df$Score)\n#> [1] 88.25\n# Name of the second Student\ndf$Student[2] \n#> [1] \"Dave\"\ndf[[\"Student\"]] # Same as before but using [[]] instead of $\n#> [1] \"Dave\" \"Dave\" \"Dave\" \"Dave\"\ndf[[\"Student\"]][2] # Same as above\n#> [1] \"Dave\""},{"path":"using-r-effectively.html","id":"using-r-effectively","chapter":"3 Using R Effectively","heading":"3 Using R Effectively","text":"many things can set success make life easier (now future). really important start implementing good practices ASAP establish good habits early . much harder break routines later. coding best practices general well things specific R RStudio covered .Remember quote mentioned previously:always working least one collaborator: Future .”-Hadley WickhamEven selfish purposes , ignore impact anyone else, help future . put future position mad present !","code":""},{"path":"using-r-effectively.html","id":"rstudio","chapter":"3 Using R Effectively","heading":"3.1 RStudio","text":"","code":""},{"path":"using-r-effectively.html","id":"settings","chapter":"3 Using R Effectively","heading":"3.1.1 Settings","text":"number settings tweaks want make help force good habits.“Restore .RData workspace startup” unselected\nmake RStudio load .RData file () found initial working directory R workspace (global environment) startup.\nmake RStudio load .RData file () found initial working directory R workspace (global environment) startup.“Save workspace .RData exit” set Never\nAsk whether save .RData exit, always save , never save .\nAsk whether save .RData exit, always save , never save .basically just make variables saved data floating around global environment get preserved automatically loaded R closes. can create -reliance things just exist locally files. much contra whole aim benefit reproducibility using R! always able easily re-run code get anything need.can also cause weird behavior R sessions things may still saved workspace realize .thus best practice feel attached stuff workspace. need something, rerun code get ! things think hard replicate, problem need fix!Particularly time predict things go wrong…\nArtwork @allison_horst\nsettings changes help fix . Something else can regularly restart R, clear content, re-run code scripts (particularly development!). can restart R Session menu, keyboard shortcut cmd/ctrl+shift+F10. can clear workspace output using brooms!Upper right pane: click environment tab, click broomUpper right pane: click environment tab, click broomLower left pane: console tab (top right), click broom tooLower left pane: console tab (top right), click broom tooOne settings change make :“Soft-wrap R source files” selected\njust make written code easier read, scroll horizontally. impacts working RStudio, outputs!\njust make written code easier read, scroll horizontally. impacts working RStudio, outputs!Full explanation different RStudio settings can found .","code":""},{"path":"using-r-effectively.html","id":"functions","chapter":"3 Using R Effectively","heading":"3.2 Functions","text":"“understand computations R, two slogans helpful:\nEverything exists object, \nEverything happens function call.”\n- John Chambers, Advanced R, p. 79.already used functions (typeof(), class(), ()), formally introduced now. Almost everything coding built around using functions. Functions variables containing pre-written code , often, verb name always followed set parentheses. things inside parentheses, called arguments, verb applied. running:typeof(x = myDF)finding type myDF . function one argument, x, given value “myDF”. Functions expect arguments given values. need something apply pre-written code ! Functions multiple arguments often default values, need set one . see later .\nNote: Arguments separated comma often given line.\n","code":""},{"path":"using-r-effectively.html","id":"where-do-functions-come-from","chapter":"3 Using R Effectively","heading":"3.2.1 Where Do Functions Come From?","text":"number different sources! :Available base R\ndefault, R many functions (like seen far)\ndefault, R many functions (like seen far)Defined (beyond scope course)Available packages import\nPackages collections data, code, functions, people created install R. many packages used throughout course.\nPackages collections data, code, functions, people created install R. many packages used throughout course.","code":""},{"path":"using-r-effectively.html","id":"installing-packages","chapter":"3 Using R Effectively","heading":"3.2.2 Installing Packages","text":"way install packages using install.packages() function! just include name package quotes, ! Packages often need code packages work (aka dependencies). package dependencies, also automatically installed. means lot scary looking code ran console installing packages. may look like lot things installed, totally normal fine! packages extremely small. can hundreds packages installed take less 1gb space computer! package installed, actually load R session using library().Install new package:install.packages(\"tidyverse\")\n1x per machine\n1x per machineLoad installed package:library(tidyverse)\n1x per work session\n1x per work session","code":""},{"path":"using-r-effectively.html","id":"r-markdown-syntax","chapter":"3 Using R Effectively","heading":"3.3 R Markdown Syntax","text":"R Markdown syntax whole course , couple fundamental things worth knowing:can insert code chunks keyboard shortcut: ctrl+option+OSX alt+WindowsYou always name chunks (part literate programming), number options can set (chunk specific). include:Figure height widthWhether echo (show) evaluate (run) code chunk final document (debugging tip! problem code chunk, set eval = FALSE can still knit, leave note fix later!)Whether show warnings messagesYou can see full list options .can also write R code inline, , without chunk. can writing set backticks, r (lowercase) first, space code. example:mean `r mean(x)`.document generated, R code evaluated look though “mean 14.” (whatever mean x happens ) written!","code":"\n## R code here"},{"path":"using-r-effectively.html","id":"coding-best-practices","chapter":"3 Using R Effectively","heading":"3.4 Coding Best Practices","text":"many best practices good incorporate coding. Several main ones highlighted , list many others included bottom.","code":""},{"path":"using-r-effectively.html","id":"naming-convention","chapter":"3 Using R Effectively","heading":"3.4.1 Develop a Naming Convention","text":"One important thing initially develop naming convention. important objects files.Object names must start letter, can contain letters, numbers, _ .. File names require , can also use -. However, avoid using . , never use spaces! want names descriptive, need convention multiple words.\nArtwork @allison_horst\ncamelCase, first word capitalized first letter subsequent word , technically efficient terms keystrokes. can run issues using acronyms singular letters (e.g., “RStudio” technically breaks rule) though. people recently recommending snake_case arguing use capital letters . Generally, camelCase snake_case recommended.want use names concise, unique, meaningful (difficult!), avoiding terms commonly repeated. also case variable (column) factor names well. However, helpful develop relatively consistent way naming things . helps make easier work different projects (especially time). example:x_df – dataframes\n“x” refers type data experiment\nx_df – dataframesWhere “x” refers type data experimentX_m – mean dataX_m – mean dataX_sd – SD dataX_sd – SD dataX_se – standard error dataX_se – standard error data","code":""},{"path":"using-r-effectively.html","id":"style-and-syntax","chapter":"3 Using R Effectively","heading":"3.4.2 Style and Syntax","text":"“Good coding style like correct punctuation: can manage without , butitsuremakesthingseasiertoread.”\n - Hadley WickhamMany following tips highlights tidyverse style guide.","code":""},{"path":"using-r-effectively.html","id":"spacing","chapter":"3 Using R Effectively","heading":"3.4.2.1 Spacing","text":"general, want aim write code legible. sake others. R makes difference following code:Always put space comma, never , just like regular English:put spaces inside outside parentheses:operators (==, +, -, <-, etc.) always surrounded spaces:","code":"\n#1\n3*2/2*5/2\n\n((3 * 2) / 2) * 5 / 2\n\n#2\nx=2+4\n\nx = 2 + 4\n# Good\ndf[, 1]\n\n# Bad\ndf[,1]\ndf[ ,1]\ndf[ , 1]\n# Good\nmean(x, na.rm = TRUE)\n\n# Bad\nmean (x, na.rm = TRUE)\nmean( x, na.rm = TRUE )\n# Good\nx + (3 * 4)\n\n# Bad\nx+(3*4)"},{"path":"using-r-effectively.html","id":"avoid-long-lines","chapter":"3 Using R Effectively","heading":"3.4.2.2 Avoid Long Lines","text":"Avoid writing code takes lot space horizontally. Use strategically placed line breaks indentations, particularly argument/chunk code. can use keyboard shortcut cmd+OSX ctrl+Windows get R automatically indent appropriately line--line!","code":"\n# Good\ndo_something_very_complicated(\n  something = \"that\",\n  requires = many,\n  arguments = \"some of which may be long\"\n)\n\n# Bad\ndo_something_very_complicated(\"that\", requires, many, arguments,\n                              \"some of which may be long\"\n                              )"},{"path":"using-r-effectively.html","id":"misc.","chapter":"3 Using R Effectively","heading":"3.4.2.3 Misc.","text":"Use double quotes \"hello\", single quotes 'hello', quoting text. exception text already contains double quotes single quotes \"said, 'hello.'\".Use double quotes \"hello\", single quotes 'hello', quoting text. exception text already contains double quotes single quotes \"said, 'hello.'\".Use TRUE FALSE T FUse TRUE FALSE T FEach line comment begin comment symbol single space:\n#line comment begin comment symbol single space:\n#Index columns subset rows names filtering, numbers. order/position may change. name likely .Index columns subset rows names filtering, numbers. order/position may change. name likely .Pass named arguments functions, place.Pass named arguments functions, place.hardcode. Always softcode. saves constantly update different sections code time change.hardcode. Always softcode. saves constantly update different sections code time change.","code":""},{"path":"using-r-effectively.html","id":"pipes","chapter":"3 Using R Effectively","heading":"3.5 Pipes","text":" reference René Magritte’s “Treachery Images,” actually display LAC Museum Art!One powerful tools R use %>% (pipe) operator.RStudio Keyboard Shortcuts:OSX: CMD + SHIFT + MElse: CTRL + SHIFT + MHow Pipe Work?Consider following example making eating cake.several things need :ingredientsMix ingredientsPour mixture panBake mixtureLet coolSliceEat pieceOne thing might think just go step step:creates lot unnecessary interim step variables care . use just clog workspace.express process set nested functions, look like :Nesting functions like (functions within functions) hard read forces read sequence functions inside . start innermost parentheses, work way /back.Even apply style syntax guidelines :still difficult unnatural read. describe process words, spoken written, take totally different form! might say something like:“need start taking ingredients, mix together, pour mixture baking pan, put pan oven bake 30 minutes. done let cool 20 minutes, slice 6 pieces, eat one (several, )!”much easier write code form match actually think process. precisely piping %>% allows ! write code piping:pipe dataframe function, chain together number functions, lets read left right / . code “sentence” starts noun instead verb. much easier read write takes form actually think process. chronological order want .two mantras pipes:Think %>% mean “”“dataframe first, dataframe ”%>% operator actually taking result/output previous computation (thing left ) piping input next computation. cases, computations functions.mix(ingredients) equivalent ingredients %>% mix()animated illustration similar example:\nSource: Arthur Welle\n","code":"\nmixture = mix(ingredients)\nthing_in_oven = pour(mixture)\nhot_baked_cake = bake(thing_in_oven)\ncooled_baked_cake = cool(hot_baked_bake)\nsliced_cake = slice(cooled_baked_cake)\n\neat(sliced_cake, 1)\neat(slice(cool(bake(put(pour(mix(ingredients), into = baking_pan), into = oven), time = 30), duration = 20), pieces = 6, 1))\neat(\n  slice(\n    cool(\n      bake(\n        put(\n          pour(\n            mix(ingredients),\n            into = baking_pan),\n          into = oven),\n        time = 30),\n      duration = 20),\n    pieces = 6,\n    1)\n)\ningredients %>% \n  mix() %>% \n  pour(into = baking_pan) %>% \n  put(into = oven) %>% \n  bake(time = 30) %>% \n  cool(during = 20) %>%\n  slice(pieces = 6) %>% \n  eat(1)"},{"path":"using-r-effectively.html","id":"dos-and-donts","chapter":"3 Using R Effectively","heading":"3.5.1 Do’s and Dont’s","text":":Apply style/syntax guidelines\nSpace %>%\nnew step line\nIndent subsequent line chain\nEtc.\nSpace %>%new step lineIndent subsequent line chainEtc.DON’T:Use pipe …one object needs manipulated.\nPipes used chain steps applied one object.\nPipes used chain steps applied one object.intermediate objects need use given informative name.","code":""},{"path":"using-r-effectively.html","id":"data-importing-and-exporting","chapter":"3 Using R Effectively","heading":"3.6 Data Importing and Exporting","text":"built datasets R comes can helpful, whole point learning R use needs. need ways get raw data R, products code R.","code":""},{"path":"using-r-effectively.html","id":"file-paths","chapter":"3 Using R Effectively","heading":"3.6.1 File Paths","text":"file’s path specifies file located. like map computer, giving instructions go look specific file. download file (e.g., “dataset.csv”), likely appear downloads folder. Thus, full file specification :mac: /Users/user_name/Downloads/dataset.csvFor windows: C:\\Users\\user_name\\Downloads\\dataset.csv(Replacing “user_name” whatever user name machine )file path constructed 2 parts:file location: /users/user_name/Downloads/ C:\\Users\\user_name\\Downloads\\file name: dataset.csv","code":""},{"path":"using-r-effectively.html","id":"importing","chapter":"3 Using R Effectively","heading":"3.6.2 Importing","text":"often going work csv’s .RData files. can work number file types R, beyond scope class.","code":""},{"path":"using-r-effectively.html","id":"csv-files","chapter":"3 Using R Effectively","heading":"3.6.2.1 csv Files","text":"use read_csv() function load dataset R. function takes file argument. R know look file? need give right file path! output read_csv() saved variable, just print console. need variable get output can use later code. saving variable.additional point, can also directly load files websites using website file path. Remember, file path just map tell computer look something. file path just needs lead read_csv() .csv file!","code":"# On mac\nread_csv(\"/Users/user_name/Downloads/dataset.csv\")\n\n# On windows\nread_csv(\"C:\\Users\\user_name\\Downloads\\dataset.csv\")\nexample_df = read_csv(\"https://www.ethanhurwitz.com/example_data.csv\")"},{"path":"using-r-effectively.html","id":"rdata-files","chapter":"3 Using R Effectively","heading":"3.6.2.2 RData Files","text":"type file may want import .RData file. directly load R objects workspace. Instead using read_csv(), just use load() pass file path .RData file!Since .RData files already contain R objects, save variable. loading variables already exist!","code":"# On mac\nload(\"/Users/user_name/Downloads/dataset.RData\")\n\n# On windows\nload(\"C:\\Users\\user_name\\Downloads\\dataset.RData\")"},{"path":"using-r-effectively.html","id":"exporting","chapter":"3 Using R Effectively","heading":"3.6.3 Exporting","text":"goal using R code make tasks easily reproducible, instances may want directly save export something. example, may want use data software. instances, can easy export file write_csv(), takes form: write_csv(object_to_be_saved, file = \"file_name.csv\"). create new .csv file dataframe/object working directory.Alternatively, may run code takes V.F.L.T. (, Frankly, Long Time) run. Somewhere road may executing complicated models can take hours even days run! may want rerun code consecutively time revisit project. avoid , can save R data object can easily load R.using save() function, takes similar form save(objects_to_be_saved, file = \"fil_name.rdata\").","code":""},{"path":"control-flow.html","id":"control-flow","chapter":"4 Control Flow","heading":"4 Control Flow","text":"","code":"\nlibrary(tidyverse)\nlibrary(palmerpenguins)"},{"path":"control-flow.html","id":"ifelse-statements","chapter":"4 Control Flow","heading":"4.1 If/Else statements","text":"","code":""},{"path":"control-flow.html","id":"traditional","chapter":"4 Control Flow","heading":"4.1.1 Traditional","text":"Sometimes, want code perform different actions depending something’s value. circumstances, useful implement ...else statements. statements work :test/condition evaluates TRUE, execute specific code.tests/conditions can appended else statements, specify original test/condition evaluates FALSE based subsequent tests/conditions. syntax basic statement follows:example:x set equal 4. R evaluates test 3 < x statement, equivalent 3 < 4, evaluates TRUE. Since condition evaluates TRUE, runs code curly brackets.x may always 4 though. x 4? know x ? test statement evaluates FALSE, nothing happens. nothing happens, may know error code test just evaluated FALSE. Considering , always good practice set alternative test evaluates FALSE. else statements come .code change x random value, actual value unknown.code specifies depending whether test evaluates TRUE evaluates FALSE.can get specific link several conditions together. may want just 2 options – e.g., something test TRUE something else done cases. Instead using else, use else () specify another test.Writing statements like useful code want run executes function. note , instances print() function code executed (curly brackets). infinite number conditions can chained together ...else chain.two alternative ways write ...else statements.","code":"if(some test/condition to evaluate) {\n  code for what to do if that test/condition evaluates to true\n}\nx = 4\n\nif(3 < x) {\n  print(\"The condition evaluated TRUE\")\n}\n#> [1] \"The condition evaluated TRUE\"\nx = sample(c(1:6), 1) # From the values 1 to 6, sample 1 value\n\nif(3 < x) {\n  print(\"The condition evaluated TRUE\")\n} else {\n  print(\"the condition evaluated FALSE\")\n}\n#> [1] \"The condition evaluated TRUE\"\nx\n#> [1] 5\nx = sample(c(1:6), 1)\n\nif(4 < x) {\n  print(\"The first condition evaluated TRUE\")\n} else if (2 < x & x < 5) { \n  print(\"The second condition evaluated TRUE\")\n} else {\n  print(\"Neither the first or second condition evaluated TRUE.\")\n}\n#> [1] \"The second condition evaluated TRUE\"\nx\n#> [1] 4"},{"path":"control-flow.html","id":"ifelse","chapter":"4 Control Flow","heading":"4.1.2 ifelse()","text":"ifelse() useful need return values rather execute code/function (like printing character string).ifelse() statements take form:ifelse(test, value return test evaluates *TRUE*, value return test evaluates *FALSE*)Multiple ifelse() statements can chained together, akin else adding nested ifelse() call place FALSE argument.examples demonstrates :","code":"\nx = sample(c(1:6), 1)\n\nifelse(4 < x, \"The first condition evaluated true.\",\n       ifelse(2 < x & x < 5, \"The second condition evaluated true.\", \n              \"Neither the first or second condition evaluated true.\"))\n#> [1] \"The second condition evaluated true.\"\nx\n#> [1] 3"},{"path":"control-flow.html","id":"case_when","chapter":"4 Control Flow","heading":"4.1.3 case_when()","text":"case_when() just different way formulate ifelse() strings, useful many nested tests/conditions specify.sum:Traditional ...else statements useful need result execute code.ifelse() case_when() useful need result specific value often used create new data variables.","code":"\nx = sample(c(1:6), 1)\n\ncase_when(\n  x < 4 ~ \"The first condition evaluated true.\",\n  2 < x & x < 5 ~ \"The second condition evaluated true.\",\n  TRUE ~ \"Neither the first or second condition evaluated true.\"\n)\n#> [1] \"The first condition evaluated true.\"\nx\n#> [1] 3"},{"path":"control-flow.html","id":"loops","chapter":"4 Control Flow","heading":"4.2 Loops","text":"Loops used repeat certain code iteratively, example want apply code element sequence (e.g., columns dataframe, elements vector, etc). basic syntax loop follows:initiates loop, val completely arbitrary can replaced character string. Conventionally just letter , subsequently j k nested loops (loops within loops).simple use case, imagine following scenario:UGIA helping professor exam. series exam scores c(1:10). professor feeling generous wants curve scores 1 point. pretty annoying try manually change value. Instead, can automatically loop!Breaking code step step: First loop initiated, saying wanted iterate element sequence 1 length(x). length() function returns number elements object pass . specified ith element x replaced value resulting sum value + 1 (x[] + 1). value change iteration loop. starts 1 (code tells 1: part), increments 1 iteration, iterating length(x) times.1:length(x) used instead just 10 (number elements vector x) keep code dynamic. illustrates important coding principle: soft coding vs hard coding. Hard coding static unchanging, whereas soft coding dynamic. mean? Well, x may always 10 exam scores. Maybe students take exams OSD, wait days get exams back. want able run code without making modifications. 1:10 used loop, new exam scores added x, code won’t run exams! loop specificed explicitly iterate range 1:10. However, using 1:length(x), length(x) always replaced exact number elements vector x! way, code can used matter many exam scores ! Generally speaking, always want soft code make code dynamic.loops often combined statements apply conditional code iteratively data.\nArtwork @allison_horst\nImagine instead needing add bonus point every exam, need give particular students bonus completed SONA experiment extra credit.can accomplished adding statement code executed executed iteration:task can accomplished using ifelse(), since goal return values:can see Ally Tyreek’s scores, students completed SONA extra credit, changed.","code":"for (val in sequence) \n  {code to be executed}\nx = c(1:10) # Exam scores\n\nfor (i in 1:length(x)) {\n  x[i]= x[i] + 1 # Set the ith X to be equal to itself + 1\n  # This will be iterated through each value in x\n}\n\nx # Look at output to verify changes\n#>  [1]  2  3  4  5  6  7  8  9 10 11\ny = data.frame(\"Exam\" = c(1:4), \n               \"Score\" = c(88,90,77,98), \n               \"Student\" = c(\"Dave\", \"Ally\", \n                             \"Tyreek\", \"Jeanie\"), \n               \"Sona\" = c(0,1,1,0))\n\ny\n#>   Exam Score Student Sona\n#> 1    1    88    Dave    0\n#> 2    2    90    Ally    1\n#> 3    3    77  Tyreek    1\n#> 4    4    98  Jeanie    0\nfor (i in 1:nrow(y)) { \n    # Use nrow for a dataframe\n  if(y$Sona[i] == 1){ \n    # $ to index -- You want the y dataframe, \n    # the Student column, and the ith row. \n    y$Score[i] = y$Score[i] + 5 \n          # For every row in the Score column of \n          # the y dataframe, if the condition y$Sona[i] == 1 \n          # evaluates to TRUE, that value is going to be \n          # equal to what is currently there + 5.\n  }\n}\ny = data.frame(\"Exam\" = c(1:4), \n               \"Score\" = c(88,90,77,98), \n               \"Student\" = c(\"Dave\", \"Ally\", \n                             \"Tyreek\", \"Jeanie\"), \n               \"Sona\" = c(0,1,1,0))\n\nfor (i in 1:nrow(y)) {\n  y$Score[i] = ifelse(y$Sona[i] == 1, # Test\n                      y$Score[i]+5, # What to do if TRUE\n                      y$Score[i]) # What to do if FALSE\n}\n\ny\n#>   Exam Score Student Sona\n#> 1    1    88    Dave    0\n#> 2    2    95    Ally    1\n#> 3    3    82  Tyreek    1\n#> 4    4    98  Jeanie    0"},{"path":"tidy-data-and-tidyverse.html","id":"tidy-data-and-tidyverse","chapter":"5 Tidy Data and Tidyverse","heading":"5 Tidy Data and Tidyverse","text":"","code":""},{"path":"tidy-data-and-tidyverse.html","id":"Tidy-Data","chapter":"5 Tidy Data and Tidyverse","heading":"5.1 Tidy Data","text":"can represent data many different ways. almost cases, best way make sure data tidy. tidy data, row corresponds unique observation, column variable, cell contains value particular observation variable.series illustrations helps explain concept tidy data useful!tidy data?Tidy data like families.Since know sets tidy data structure, tools can used across different datasets.enables universality tools used, rather different people trying accomplish task different ways.makes life better making easier automation & iteration across projects datasets.also makes tidy datasets seem welcoming!\nIllustrations Openscapes blog Tidy Data reproducibility, efficiency, collaboration Julia Lowndes Allison Horst.\n","code":""},{"path":"tidy-data-and-tidyverse.html","id":"tidyverse","chapter":"5 Tidy Data and Tidyverse","heading":"5.2 Tidyverse","text":"tidyverse collection packages “share underlying design philosophy, grammar, data structure” tidy data. tidyverse packages functions tools use fill R workbench, help every step workflow.\nUpdated Grolemund & Wickham’s classis R4DS schematic, envisioned Dr. Julia Lowndes 2019 useR! keynote talk illustrated Allison Horst.\nillustrates Social/Data Science workflow tidyverse suite packages designed help accomplish:Import – get data RImport – get data RTidy – clean format dataTidy – clean format dataTransform – select variables, create new ones, group summarizeTransform – select variables, create new ones, group summarizeVisualize – look data different waysVisualize – look data different waysModel – answer questions data\nmodeling statistics covered course\nModel – answer questions datamodeling statistics covered courseCommunicate – write reproducible research reportsCommunicate – write reproducible research reportsThe majority remaining course content build arsenal tidyverse tools help manage unruly raw data, almost certainly case data get initially messy need lots cleaning prepping!\nArtwork @allison_horst\n","code":""},{"path":"tidy-data-and-tidyverse.html","id":"investigating-data","chapter":"5 Tidy Data and Tidyverse","heading":"5.3 Investigating Data","text":"One first things working new dataset actually look . might seem obvious simple, important allows get sense type wrangling manipulation may need apply able work data.","code":""},{"path":"tidy-data-and-tidyverse.html","id":"view-full","chapter":"5 Tidy Data and Tidyverse","heading":"5.3.1 View Full","text":"can view data object using View() function. inspect penguins object can run View(penguins) click object RStudio’s global environment panel.","code":""},{"path":"tidy-data-and-tidyverse.html","id":"glimpse","chapter":"5 Tidy Data and Tidyverse","heading":"5.3.2 glimpse","text":"Often times datasets large impractical try comb whole file. much helpful way quickly glimpse data get overall impression . appropriately named function : glimpse()!one function alone, can learn lot data:names variables (columns), also can get names().names variables (columns), also can get names().number observations (rows, 344) variables (columns, 8). can also get information nrow() ncol() functions.number observations (rows, 344) variables (columns, 8). can also get information nrow() ncol() functions.variables saved either “fct” (factors), “dbl” (double-precision), “int” (integers).variables saved either “fct” (factors), “dbl” (double-precision), “int” (integers).","code":"\nglimpse(penguins)\n#> Rows: 344\n#> Columns: 8\n#> $ species           <fct> Adelie, Adelie, Adelie, Adelie, …\n#> $ island            <fct> Torgersen, Torgersen, Torgersen,…\n#> $ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3…\n#> $ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6…\n#> $ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181…\n#> $ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650…\n#> $ sex               <fct> male, female, female, NA, female…\n#> $ year              <int> 2007, 2007, 2007, 2007, 2007, 20…"},{"path":"tidy-data-and-tidyverse.html","id":"head","chapter":"5 Tidy Data and Tidyverse","heading":"5.3.3 head","text":"glimpse() gives high level snapshot data, can also useful look actual rows data. Looking silly though. really just want look observations see can recognize anything may need corrected. head() function can used . print first rows data argument pass .can specify exact amount rows want print passing second argument head() specifies number rows. E.g.,","code":"\nhead(penguins)\n#> # A tibble: 6 x 8\n#>   species island    bill_length_mm bill_depth_mm\n#>   <fct>   <fct>              <dbl>         <dbl>\n#> 1 Adelie  Torgersen           39.1          18.7\n#> 2 Adelie  Torgersen           39.5          17.4\n#> 3 Adelie  Torgersen           40.3          18  \n#> 4 Adelie  Torgersen           NA            NA  \n#> 5 Adelie  Torgersen           36.7          19.3\n#> 6 Adelie  Torgersen           39.3          20.6\n#> # … with 4 more variables: flipper_length_mm <int>,\n#> #   body_mass_g <int>, sex <fct>, year <int>\nhead(penguins, 10)\n#> # A tibble: 10 x 8\n#>    species island    bill_length_mm bill_depth_mm\n#>    <fct>   <fct>              <dbl>         <dbl>\n#>  1 Adelie  Torgersen           39.1          18.7\n#>  2 Adelie  Torgersen           39.5          17.4\n#>  3 Adelie  Torgersen           40.3          18  \n#>  4 Adelie  Torgersen           NA            NA  \n#>  5 Adelie  Torgersen           36.7          19.3\n#>  6 Adelie  Torgersen           39.3          20.6\n#>  7 Adelie  Torgersen           38.9          17.8\n#>  8 Adelie  Torgersen           39.2          19.6\n#>  9 Adelie  Torgersen           34.1          18.1\n#> 10 Adelie  Torgersen           42            20.2\n#> # … with 4 more variables: flipper_length_mm <int>,\n#> #   body_mass_g <int>, sex <fct>, year <int>"},{"path":"basic-wrangling.html","id":"basic-wrangling","chapter":"6 Basic Wrangling","heading":"6 Basic Wrangling","text":"\nArtwork @allison_horst\nThroughout page, explanations code appear blocks like one!wrangling data, performing series actions clean prepare whatever task . Whether creating visualizations, performing statistical analyses, anything else, likely need change data object way. , several fundamental basic data manipulation functions outlined. notice function names verbs, denoting performing action data object.may find helpful review section pipes moving forward!","code":"\nlibrary(tidyverse) # Load tidyverse packages"},{"path":"basic-wrangling.html","id":"arrange","chapter":"6 Basic Wrangling","heading":"6.1 Arrange","text":"arrange() orders rows data frame values selected columns. default ascending, lowest values first rows.code changes order rows mtcars2 values wt column, lowest top.get rows arranged descending order, highest values top, wrap variable names desc() within arrange() call. second column passed, rows identical values first variable arranged values second.","code":"\nmtcars2 %>%\n  arrange(wt)"},{"path":"basic-wrangling.html","id":"rename","chapter":"6 Basic Wrangling","heading":"6.2 Rename","text":"\nArtwork @allison_horst\nColumns dataframe can named poorly several ways. name meaningful interpretable, name long, name includes special characters otherwise difficult work (e.g., including spaces).can rename columns using rename() function. function takes following form:mtcars2 object, several variable names shorthand abbreviations may make sense someone already familiar dataset. rename() can used change :\nNote: address variables order appear df. variable names mapped regardless position!\n","code":"\ndf %>%\n  rename(\"new_column_name\" = \"old_column_name\")\nmtcars2 %>%\n  rename(\"weight\" = \"wt\", \"horse_power\" = \"hp\",\n         \"cylinders\" = \"cyl\", \"displacement\" = \"disp\") %>%\n  head()\n#>            model mpg cylinders displacement horse_power\n#> 1      Fiat X1-9  27         4           79          66\n#> 2  Porsche 914-2  26         4          120          91\n#> 3   Lotus Europa  30         4           95         113\n#> 4 Ford Pantera L  16         8          351         264\n#> 5   Ferrari Dino  20         6          145         175\n#> 6  Maserati Bora  15         8          301         335\n#>   weight gear\n#> 1   1.94    4\n#> 2   2.14    5\n#> 3   1.51    5\n#> 4   3.17    5\n#> 5   2.77    5\n#> 6   3.57    5"},{"path":"basic-wrangling.html","id":"saving-changes","chapter":"6 Basic Wrangling","heading":"6.2.1 Saving Changes","text":"code using rename() changed variable names mtcars2 dataframe. However, look mtcars2 dataframe…variable names , rename() code seems like work! Look carefully code though:code executed just prints results. saved anywhere! actually wanted update dataframe, need save results:Saving object permanent change, though. careful . good practice first make sure code runs intend . verified , can overwrite object like:\nNote: head() used pedagogical purposes, code want use testing changes data. modifying dataframe, want accidentally overwrite first 5 rows new output!\ngood rule thumb need use object current state make significant changes , particularly change structure, create new object (e.g., mtcars3) rather overwrite/update existing one.","code":"\nmtcars2 %>%\n  head()\n#>            model mpg cyl disp  hp   wt gear\n#> 1      Fiat X1-9  27   4   79  66 1.94    4\n#> 2  Porsche 914-2  26   4  120  91 2.14    5\n#> 3   Lotus Europa  30   4   95 113 1.51    5\n#> 4 Ford Pantera L  16   8  351 264 3.17    5\n#> 5   Ferrari Dino  20   6  145 175 2.77    5\n#> 6  Maserati Bora  15   8  301 335 3.57    5\nmtcars2 %>%\n  rename(\"weight\" = \"wt\", \"horse_power\" = \"hp\",\n         \"cylinders\" = \"cyl\", \"displacement\" = \"disp\") %>%\n  head()\nmtcars2 = mtcars2 %>%\n  rename(\"weight\" = \"wt\", \"horse_power\" = \"hp\",\n         \"cylinders\" = \"cyl\", \"displacement\" = \"disp\")\nmtcars2 %>%\n  rename(\"weight\" = \"wt\", \"horse_power\" = \"hp\",\n         \"cylinders\" = \"cyl\", \"displacement\" = \"disp\") %>%\n  head()\n\nmtcars2 = mtcars2 %>%\n  rename(\"weight\" = \"wt\", \"horse_power\" = \"hp\",\n         \"cylinders\" = \"cyl\", \"displacement\" = \"disp\")"},{"path":"basic-wrangling.html","id":"clean-names","chapter":"6 Basic Wrangling","heading":"6.3 Clean Names","text":"\nArtwork @allison_horst\nclean_names() function janitor package powerful tool change column names specific naming convention. can used easily convert variable names one naming conventions mentioned Coding Best Practices section:snake (snake_case)lower_camel (lowerCamel)upper_camel (UpperCamel)screaming_snake (SCREAMING_SNAKE)well many others! can access particular function package first specifying package name, two colons, function name. demonstrated illustration , using janitor::clean_names() saying want use clean_names() function defined janitor package.ever want ? Well, worth recognizing functions just variables. Instead value, defined series code. Two variables name co-exist global environment. R know use! define x = 4 x = 6, original x = 4 overwritten.Different packages may use variable names functions contain. load package library(), may overwrite functions loaded packages. Thus, may want use function particular package, load entire package contents override functions!","code":""},{"path":"basic-wrangling.html","id":"relocate","chapter":"6 Basic Wrangling","heading":"6.4 Relocate","text":"relocate() can used reorder columns dataframe. relocate(), specify column(s) want move, come ...\nArtwork @allison_horst\ncode moves wt column model column.relocate() can also move multiple columns simultaneously passed vector column names.","code":"\nmtcars2 %>%\n  relocate(wt, .after = model)\nmtcars2 %>%\n  relocate(c(disp, drat), .after = model)"},{"path":"basic-wrangling.html","id":"select","chapter":"6 Basic Wrangling","heading":"6.5 Select","text":", used head() wanted output preview dataframe. many times like want subset data (cutting show subsets – contain exclude specific variables/observations).two primary subsetting functions. first select(), selects returns specified columns (passed vector column names).select(c(columns_of_interest))Just : used generate values range numbers (e.g., 1:4 return: 1,2,3,4), can also use : return values range columns. example:selects cyl column, hp column, columns two!select() can also used get rid columns want negating vector column names using !.selects columns except cyl gear.specifically want move variable (variables) front df, easy way using select() instead relocate():everything() function selects… everything! select variables df. first selecting wt variable, everything else. result still variables df, wt front.","code":"\nmtcars2 %>%\n  select(c(cyl, gear))\nmtcars2 %>%\n  select(c(cyl:hp))\nmtcars2 %>%\n  select(!c(cyl, gear))\nmtcars2 %>%\n  select(wt, everything())\n#>     wt          model mpg cyl disp  hp gear\n#> 1 1.94      Fiat X1-9  27   4   79  66    4\n#> 2 2.14  Porsche 914-2  26   4  120  91    5\n#> 3 1.51   Lotus Europa  30   4   95 113    5\n#> 4 3.17 Ford Pantera L  16   8  351 264    5\n#> 5 2.77   Ferrari Dino  20   6  145 175    5\n#> 6 3.57  Maserati Bora  15   8  301 335    5\n#> 7 2.78     Volvo 142E  21   4  121 109    4"},{"path":"basic-wrangling.html","id":"filter","chapter":"6 Basic Wrangling","heading":"6.6 Filter","text":"second primary subsetting function filter(), returns rows meet specified condition(s). condition logical test performed column. results vector TRUE FALSE values, rows test evaluates TRUE returned!\nArtwork @allison_horst\nsee illustration , rows check mark (logical test resulted TRUE) returned filter() call!filters dataframe return rows gear value 4.evaluative operator can used conditions. test conditions need result TRUE FALSE:filters dataframe return rows gear column value 4.values specified tests numbers, can text strings well!filters dataframe return rows model column value “Lotus Europa”.Multiple conditions can strung together using logical operators:filters dataframe return rows cyl value 4 hp less 100.multiple logical tests strung together get evaluated left right. must mindful order operations using parentheses make sure conditions evaluated intended. example, say wanted filter observations either 4 cylinder less 200 horse power, also 5 gears. words, cars 4 cylinders 5 gears cars less 200 horse power 5 gears:filter(cyl == 4 | hp < 200 & gear == 5) evaluated :filter(cyl == 4 | (hp < 200 & gear == 5))\n\ndifferent :filter((cyl == 4 | hp < 200) & gear == 5).","code":"\nmtcars2 %>%\n  filter(gear == 4)\nmtcars2 %>%\n  filter(disp > 300)\nmtcars2 %>%\n  filter(model == \"Lotus Europa\")\nmtcars2 %>%\n  filter(cyl != 4 | hp < 100)"},{"path":"basic-wrangling.html","id":"in","chapter":"6 Basic Wrangling","heading":"6.6.1 %in%","text":"Stringing together multiple tests text patterns cumbersome (e.g., model == \"Lotus Europa\" | model == \"Ferrari Dino\" | ...). Fortunately, alternative %% operator. reminder, check see value one variable vector possible values. Test conditions using %% operator used way test conditions using operators: must specify variable search within values return (vector).filters dataframe return rows value model “Lotus Europa”, “Ferrari Dino”, “Volvo 142E”.%% operator, can also combined operators!filters dataframe return rows value hp greater 300 value model “Lotus Europa”, “Ferrari Dino”, “Volvo 142E”.","code":"\nmtcars2 %>%\n  filter(model %in% c(\"Lotus Europa\", \"Ferrari Dino\", \"Volvo 142E\"))\nmtcars2 %>%\n  filter(hp > 300 | model %in% c(\"Lotus Europa\", \"Ferrari Dino\", \"Volvo 142E\"))\n#>           model mpg cyl disp  hp   wt gear\n#> 1  Lotus Europa  30   4   95 113 1.51    5\n#> 2  Ferrari Dino  20   6  145 175 2.77    5\n#> 3 Maserati Bora  15   8  301 335 3.57    5\n#> 4    Volvo 142E  21   4  121 109 2.78    4"},{"path":"basic-wrangling.html","id":"pattern-matching","chapter":"6 Basic Wrangling","heading":"6.6.2 Pattern Matching","text":"number reasons may times want search exact string match. Rather, want filter based whether value contains certain string. can accomplished grepl(), takes form:grepl(pattern_to_search_for, where_to_search)filters dataframe return rows model contains string “Porsche” value.","code":"\nmtcars2 %>%\n  filter(grepl(\"Porsche\", model))\n#>           model mpg cyl disp hp   wt gear\n#> 1 Porsche 914-2  26   4  120 91 2.14    5"},{"path":"basic-wrangling.html","id":"indexing","chapter":"6 Basic Wrangling","heading":"6.7 Indexing","text":"Indexing dfs introduced previously, often need done throughout pipe chain. two functions help : pull() pluck().","code":""},{"path":"basic-wrangling.html","id":"pull","chapter":"6 Basic Wrangling","heading":"6.7.1 pull()","text":"pull() extract variable df. can done variable’s name numeric position (using name always preferred). pull() like using $ operator index.result vector, variables just vectors! helpful allows result piped number functions require vector rather df. example:using select(), result dataframe one column. trying pass mean(), get NA error:\nWarning message: mean.default(.) : argument numeric logical: returning NA.\nusing pull(), result vector can passed mean() without issue.","code":"\nmtcars2 %>%\n  pull(cyl)\n#> [1] 4 4 4 8 6 8 4\nmtcars2 %>% \n  select(cyl) %>% \n  mean()\n#> Warning in mean.default(.): argument is not numeric or\n#> logical: returning NA\n#> [1] NA\nmtcars2 %>%\n  pull(cyl) %>%\n  mean()\n#> [1] 5.428571"},{"path":"basic-wrangling.html","id":"pluck","chapter":"6 Basic Wrangling","heading":"6.7.2 pluck()","text":"pluck() allows index elements object, can also done name numeric position. , cyl column indexed mtcars2. Say wanted 4th observation column:pluck() extremely useful indexing deeply nested data structures. covered course, brief demonstration can consider df nested object. vector 1st level element values within vectors 2nd level elements. get 4th value 3rd vector (previous code string), following:can also done named positions.short, argument pluck() position index. x %>% pluck(2, 2) == x[[2]][[2]]","code":"\nmtcars2 %>%\n  pull(cyl) %>%\n  pluck(4)\n#> [1] 8\nmtcars2 %>%\n  pluck(3,4)\n#> [1] 8\nmtcars2 %>%\n  pluck(\"model\", 2)\n#> [1] \"Porsche 914-2\""},{"path":"basic-wrangling.html","id":"Unique-Entries","chapter":"6 Basic Wrangling","heading":"6.8 Unique Entries","text":"working larger dfs, difficult get sense unique values particular variable may contain. can get using distinct().way works keeping row corresponds first entry unique value particular column. becomes clear using .keep_all argumentTo get number unique values can use n_distinct(), takes vector values input.","code":"\nmtcars2\n#>            model mpg cyl disp  hp   wt gear\n#> 1      Fiat X1-9  27   4   79  66 1.94    4\n#> 2  Porsche 914-2  26   4  120  91 2.14    5\n#> 3   Lotus Europa  30   4   95 113 1.51    5\n#> 4 Ford Pantera L  16   8  351 264 3.17    5\n#> 5   Ferrari Dino  20   6  145 175 2.77    5\n#> 6  Maserati Bora  15   8  301 335 3.57    5\n#> 7     Volvo 142E  21   4  121 109 2.78    4\nmtcars2 %>%\n  distinct(cyl)\n#>   cyl\n#> 1   4\n#> 2   8\n#> 3   6\nmtcars2 %>%\n  distinct(cyl, .keep_all = TRUE)\n#>            model mpg cyl disp  hp   wt gear\n#> 1      Fiat X1-9  27   4   79  66 1.94    4\n#> 2 Ford Pantera L  16   8  351 264 3.17    5\n#> 3   Ferrari Dino  20   6  145 175 2.77    5\nmtcars2 %>%\n  pull(cyl) %>%\n  n_distinct()\n#> [1] 3"},{"path":"basic-wrangling.html","id":"adding-variables","chapter":"6 Basic Wrangling","heading":"6.9 Adding Variables","text":"add new variables dataframe, use mutate() function.\nArtwork @allison_horst\nmutate() takes form:mutate(\"new_col_name\" = content_for_that_column)new column’s name whatever passed left, contents result R expression assigned . example:creates new variable showing weight observation (car) pounds.Recall variables dataframe vectors. two consequences :new variables must length existing columns dataframe.R expression must return vector, computations vectors can used!\nexample , wt vector. R expression computation vector! value wt vector (column) multiplied 1000. essentially thing seen section vectors first introduced.\nexample , wt vector. R expression computation vector! value wt vector (column) multiplied 1000. essentially thing seen section vectors first introduced.Multiple new columns can created simultaneously within mutate() call:addition weight pounds variable, code also creates variable showing cost traveling 1 mile observation (car) considering current price gas.","code":"\nmtcars2 %>%\n  mutate(wt_lbs = wt * 1000)\n#>            model mpg cyl disp  hp   wt gear wt_lbs\n#> 1      Fiat X1-9  27   4   79  66 1.94    4   1940\n#> 2  Porsche 914-2  26   4  120  91 2.14    5   2140\n#> 3   Lotus Europa  30   4   95 113 1.51    5   1510\n#> 4 Ford Pantera L  16   8  351 264 3.17    5   3170\n#> 5   Ferrari Dino  20   6  145 175 2.77    5   2770\n#> 6  Maserati Bora  15   8  301 335 3.57    5   3570\n#> 7     Volvo 142E  21   4  121 109 2.78    4   2780\nprice_of_gas = 6.25\n\nmtcars2 %>%\n  mutate(cost_per_mile = price_of_gas / mpg,\n         wt_lbs = wt * 1000)\n#>            model mpg cyl disp  hp   wt gear cost_per_mile\n#> 1      Fiat X1-9  27   4   79  66 1.94    4     0.2314815\n#> 2  Porsche 914-2  26   4  120  91 2.14    5     0.2403846\n#> 3   Lotus Europa  30   4   95 113 1.51    5     0.2083333\n#> 4 Ford Pantera L  16   8  351 264 3.17    5     0.3906250\n#> 5   Ferrari Dino  20   6  145 175 2.77    5     0.3125000\n#> 6  Maserati Bora  15   8  301 335 3.57    5     0.4166667\n#> 7     Volvo 142E  21   4  121 109 2.78    4     0.2976190\n#>   wt_lbs\n#> 1   1940\n#> 2   2140\n#> 3   1510\n#> 4   3170\n#> 5   2770\n#> 6   3570\n#> 7   2780"},{"path":"basic-wrangling.html","id":"conditional-values","chapter":"6 Basic Wrangling","heading":"6.9.1 Conditional Values","text":"may want variable value based different conditions. case_when() introduced way string together number ifelse type statements return values. can extremely useful creating new variables!\nArtwork @allison_horst\ncreates new variable called fuel_efficiency. observation’s value variable depends value mpg, differs based different conditions.simple instances, ifelse() can used:creates new variable called power. observation’s value variable depends value hp. hp greater 200, “High” powered, lower 200 “Low” powered.","code":"\nmtcars2 %>%\n  mutate(fuel_efficiency = case_when(\n    mpg <= 19 ~ \"Poor\",\n    mpg >= 20 & mpg <= 25 ~ \"Average\",\n    TRUE ~ \"Great\"\n  ))\n#>            model mpg cyl disp  hp   wt gear fuel_efficiency\n#> 1      Fiat X1-9  27   4   79  66 1.94    4           Great\n#> 2  Porsche 914-2  26   4  120  91 2.14    5           Great\n#> 3   Lotus Europa  30   4   95 113 1.51    5           Great\n#> 4 Ford Pantera L  16   8  351 264 3.17    5            Poor\n#> 5   Ferrari Dino  20   6  145 175 2.77    5         Average\n#> 6  Maserati Bora  15   8  301 335 3.57    5            Poor\n#> 7     Volvo 142E  21   4  121 109 2.78    4         Average\nmtcars2 %>%\n  mutate(power = ifelse(hp >=200, \"High\", \"Low\"))\n#>            model mpg cyl disp  hp   wt gear power\n#> 1      Fiat X1-9  27   4   79  66 1.94    4   Low\n#> 2  Porsche 914-2  26   4  120  91 2.14    5   Low\n#> 3   Lotus Europa  30   4   95 113 1.51    5   Low\n#> 4 Ford Pantera L  16   8  351 264 3.17    5  High\n#> 5   Ferrari Dino  20   6  145 175 2.77    5   Low\n#> 6  Maserati Bora  15   8  301 335 3.57    5  High\n#> 7     Volvo 142E  21   4  121 109 2.78    4   Low"},{"path":"basic-wrangling.html","id":"position","chapter":"6 Basic Wrangling","heading":"6.9.2 Position","text":"default mutate() adds new variable(s) end dataframe. However, can specify existing column want new column appear ...specifies new cost_per_mile variable created mpg.\nNote: ..specifications apply new variables created particular mutate() call. want create multiple new variables added different places dataframe, need separate different mutate() calls.\n","code":"\nprice_of_gas = 6.25\n\nmtcars2 %>%\n  mutate(cost_per_mile = price_of_gas / mpg, .after = \"mpg\")\n#>            model mpg cost_per_mile cyl disp  hp   wt gear\n#> 1      Fiat X1-9  27     0.2314815   4   79  66 1.94    4\n#> 2  Porsche 914-2  26     0.2403846   4  120  91 2.14    5\n#> 3   Lotus Europa  30     0.2083333   4   95 113 1.51    5\n#> 4 Ford Pantera L  16     0.3906250   8  351 264 3.17    5\n#> 5   Ferrari Dino  20     0.3125000   6  145 175 2.77    5\n#> 6  Maserati Bora  15     0.4166667   8  301 335 3.57    5\n#> 7     Volvo 142E  21     0.2976190   4  121 109 2.78    4"},{"path":"basic-wrangling.html","id":"NAs","chapter":"6 Basic Wrangling","heading":"6.9.3 NAs","text":"performing vector computations, mindful NA values data. NA values can cause major issues. example:can see, time NA part computation, results NA. NAs thought contagious. instances, get around utilizing functions like na.omit(), drop_na(), na.rm argument set TRUE.na.omit() remove NAs. used dataframe, remove entire row data NA value column.drop_na() used specifically dataframes, remove entire row data NA value specific column(s) select. pass specific columns, function similarly na.omit() remove entire row NA value column.","code":"\n4 + NA + 2\n#> [1] NA\nmean(c(4,5,3,NA))\n#> [1] NA\nc(4, 5, 3, NA) %>%\n  na.omit() %>% \n  mean()\n#> [1] 4\nmean(c(4,5,3,NA), na.rm = TRUE)\n#> [1] 4\nex_df = data.frame(A = c(NA, 1, 4), \n           B = c(1, NA, 4), \n           C = c(1,4,5))\nex_df\n#>    A  B C\n#> 1 NA  1 1\n#> 2  1 NA 4\n#> 3  4  4 5\nex_df %>%\n  na.omit()\n#>   A B C\n#> 3 4 4 5\nex_df %>%\n  drop_na()\n#>   A B C\n#> 1 4 4 5\nex_df %>%\n  drop_na(A)\n#>   A  B C\n#> 1 1 NA 4\n#> 2 4  4 5"},{"path":"basic-wrangling.html","id":"Modifying-Existing-Variables","chapter":"6 Basic Wrangling","heading":"6.10 Modifying Existing Variables","text":"mutate() can also used modify existing variables! done passing column name already exists dataframe. example:tweaking code , instead creating new one, existing wt variable modified.\nNote: generally want overwrite variable changing meaningful way (case example ). Instead, create new variable.\n","code":"\nmtcars2 %>%\n  mutate(wt = wt * 1000)\n#>            model mpg cyl disp  hp   wt gear\n#> 1      Fiat X1-9  27   4   79  66 1940    4\n#> 2  Porsche 914-2  26   4  120  91 2140    5\n#> 3   Lotus Europa  30   4   95 113 1510    5\n#> 4 Ford Pantera L  16   8  351 264 3170    5\n#> 5   Ferrari Dino  20   6  145 175 2770    5\n#> 6  Maserati Bora  15   8  301 335 3570    5\n#> 7     Volvo 142E  21   4  121 109 2780    4"},{"path":"basic-wrangling.html","id":"change-variable-types","chapter":"6 Basic Wrangling","heading":"6.10.1 Change Variable Types","text":"One ways appropriate modify variable need change type data contains. R, can change data type using .* function. example, .logical() changes passed values logical. one exception changing something factor, use factor() (.)modifies data mpg column character, data cyl column factor. output piped glimpse() types column displayed.can see output numbers mpg quotes around . Also, labeled “” “”. raw data cyl look unchanged, can see now says “”.","code":"\nmtcars2 %>%\n  mutate(mpg = as.character(mpg),\n         cyl = factor(cyl)) %>%\n  glimpse()\n#> Rows: 7\n#> Columns: 7\n#> $ model <chr> \"Fiat X1-9\", \"Porsche 914-2\", \"Lotus Europa\"…\n#> $ mpg   <chr> \"27\", \"26\", \"30\", \"16\", \"20\", \"15\", \"21\"\n#> $ cyl   <fct> 4, 4, 4, 8, 6, 8, 4\n#> $ disp  <dbl> 79, 120, 95, 351, 145, 301, 121\n#> $ hp    <dbl> 66, 91, 113, 264, 175, 335, 109\n#> $ wt    <dbl> 1.94, 2.14, 1.51, 3.17, 2.77, 3.57, 2.78\n#> $ gear  <dbl> 4, 5, 5, 5, 5, 5, 4"},{"path":"basic-wrangling.html","id":"factors","chapter":"6 Basic Wrangling","heading":"6.10.2 Factors","text":"Factors important, can little tricky work , get section. Factors categorical data specific order, proxy specific defined range possible values (e.g., Months year).","code":""},{"path":"basic-wrangling.html","id":"factor-conversion","chapter":"6 Basic Wrangling","heading":"6.10.2.1 Factor Conversion","text":"working factors, particularly converting data factor, careful. Consider following:simple dataframe one column data factor values 0 1. Say want change data factor numeric. Simple enough, just apply appropriate .* function (.numeric()).However, observe output :obviously intended. happening mutate() taking level value, 0 level 1 1 level 2. Instead, circumvent issue first converting values character, number:take-home point always double check code intend , especially converting factor!","code":"\ndata.frame(test = factor(c(\"0\", \"1\")))\n#>   test\n#> 1    0\n#> 2    1\ndata.frame(test = factor(c(\"0\", \"1\"))) %>% \n  mutate(test = as.numeric(test))\n#>   test\n#> 1    1\n#> 2    2\ndata.frame(test = factor(c(\"0\", \"1\"))) %>% \n  mutate(test = as.character(test),\n         test = as.numeric(test))\n#>   test\n#> 1    0\n#> 2    1"},{"path":"basic-wrangling.html","id":"reorder-levels","chapter":"6 Basic Wrangling","heading":"6.10.2.2 Reorder Levels","text":"levels factor ordered, may times want change order . One common instances occur visualizations. Consider following:x-axis sensible arrangement, 1. function fact factors happen numbers, 2. particularly aesthetically pleasing looking actual bars. bars inherent ordering may make sense organize . can accomplished using fct_infreq(), reorder levels factor frequency occurrence (highest frequency first).order levels lowest frequency first, can use fct_rev() “reverse frequency”.\nNote: Notice color mapping changing well. bottom graph, blue bar 4 cylinder bar, whereas preceding graph 6 cylinder bar. color mappings correspond factor levels!\ntime creating graphs visualize counts single variable. Instead, visualizing relationship comparison two variables, like graph :reorder levels factor relationship another variable (instead frequency occurrence), can use fct_reorder(). fct_reorder(), must specify factor reorder, variable wish reorder levels .\nNote: fct_reorder() used ggplot call directly fairly particular reordering. unlikely , outside purpose generating specific visualization, want levels cyl ordered based level mpg.Also, can combine fct_reorder() fct_rev() reverse order levels.\n","code":"\nmtcars2 %>%\n  mutate(cyl = factor(cyl)) %>%\n  ggplot(aes(x = cyl, fill = cyl)) +\n    geom_bar(position = \"identity\")\nmtcars2 %>%\n  mutate(cyl = factor(cyl) %>%\n           fct_infreq()) %>%\n  ggplot(aes(x = cyl, fill = cyl)) +\n    geom_bar(position = \"identity\")\nmtcars2 %>%\n  mutate(cyl = factor(cyl) %>%\n           fct_infreq() %>%\n           fct_rev()) %>%\n  ggplot(aes(x = cyl, fill = cyl)) +\n    geom_bar(position = \"identity\")\nmtcars2 %>%\n  mutate(cyl = factor(cyl)) %>%\n  ggplot(aes(y = mpg, x = cyl)) +\n  stat_summary(fun.data = \"mean_se\", geom = \"pointrange\")\nmtcars2 %>%\n  mutate(cyl = factor(cyl)) %>%\n  ggplot(aes(y = mpg, x = fct_reorder(cyl, mpg))) +\n  stat_summary(fun.data = \"mean_se\", geom = \"pointrange\")"},{"path":"basic-wrangling.html","id":"extras","chapter":"6 Basic Wrangling","heading":"6.11 Extras","text":"Factors cheatsheet","code":""},{"path":"basic-wrangling.html","id":"references","chapter":"6 Basic Wrangling","heading":"6.12 References","text":"","code":""},{"path":"summarizing-data.html","id":"summarizing-data","chapter":"7 Summarizing Data","heading":"7 Summarizing Data","text":"wrangled subset data, may want compute summary information data. several quick flexible ways !","code":"\nlibrary(tidyverse) # Load tidyverse packages\nlibrary(palmerpenguins) # Load penguins data"},{"path":"summarizing-data.html","id":"table-and-count","chapter":"7 Summarizing Data","heading":"7.1 Table and Count","text":"R many tools create quick easy summaries descriptive statistics data. saw previously n_distinct() used get number distinct values variable. instead want number instances unique values, can use table() (table output) count() (df/tibble output).","code":"\npenguins %>%\n  pull(species) %>%\n  table()\n#> .\n#>    Adelie Chinstrap    Gentoo \n#>       152        68       124\npenguins %>%\n  count(species)\n#> # A tibble: 3 x 2\n#>   species       n\n#>   <fct>     <int>\n#> 1 Adelie      152\n#> 2 Chinstrap    68\n#> 3 Gentoo      124"},{"path":"summarizing-data.html","id":"proportions","chapter":"7 Summarizing Data","heading":"7.1.1 Proportions","text":"wanted proportions instead counts, several ways get method depends type object working (table vs df).tables, simply add prop.table() pipe chain.dfs, manually compute proportions add new variable.mutate call manually computing proportion unique value species. n column name generated automatically count(). taking number entries unique value dividing total number entries (original dataframe’s species must used length() call!).computing proportions, ’s always important check make sure things correctly. , sum 1:","code":"\npenguins %>%\n  pull(species) %>%\n  table() %>%\n  prop.table()\n#> .\n#>    Adelie Chinstrap    Gentoo \n#> 0.4418605 0.1976744 0.3604651\npenguins %>%\n  count(species) %>%\n  mutate(proportion = n / length(penguins$species))\n#> # A tibble: 3 x 3\n#>   species       n proportion\n#>   <fct>     <int>      <dbl>\n#> 1 Adelie      152      0.442\n#> 2 Chinstrap    68      0.198\n#> 3 Gentoo      124      0.360\npenguins %>%\n  pull(species) %>%\n  table() %>%\n  prop.table() %>%\n  sum()\n#> [1] 1\npenguins %>%\n  count(species) %>%\n  mutate(proportion = n / length(penguins$species)) %>%\n  pull(proportion) %>%\n  sum()\n#> [1] 1"},{"path":"summarizing-data.html","id":"summary","chapter":"7 Summarizing Data","heading":"7.2 Summary","text":"want snapshot data, can use summary() quick quantitative summary variable. summary() works number different data objects R. applied dataframe, summary() give summary statistics variable. categorical variables, give count value. continuous variables, give basic summary statistics.","code":"\nsummary(penguins)\n#>       species          island    bill_length_mm \n#>  Adelie   :152   Biscoe   :168   Min.   :32.10  \n#>  Chinstrap: 68   Dream    :124   1st Qu.:39.23  \n#>  Gentoo   :124   Torgersen: 52   Median :44.45  \n#>                                  Mean   :43.92  \n#>                                  3rd Qu.:48.50  \n#>                                  Max.   :59.60  \n#>                                  NA's   :2      \n#>  bill_depth_mm   flipper_length_mm  body_mass_g  \n#>  Min.   :13.10   Min.   :172.0     Min.   :2700  \n#>  1st Qu.:15.60   1st Qu.:190.0     1st Qu.:3550  \n#>  Median :17.30   Median :197.0     Median :4050  \n#>  Mean   :17.15   Mean   :200.9     Mean   :4202  \n#>  3rd Qu.:18.70   3rd Qu.:213.0     3rd Qu.:4750  \n#>  Max.   :21.50   Max.   :231.0     Max.   :6300  \n#>  NA's   :2       NA's   :2         NA's   :2     \n#>      sex           year     \n#>  female:165   Min.   :2007  \n#>  male  :168   1st Qu.:2007  \n#>  NA's  : 11   Median :2008  \n#>               Mean   :2008  \n#>               3rd Qu.:2009  \n#>               Max.   :2009  \n#> "},{"path":"summarizing-data.html","id":"summarize","chapter":"7 Summarizing Data","heading":"7.3 Summarize","text":"works, little messy. likely want little specific want. get specific summaries data, use summarize() summarise() (equivalent, just depends like spell ). summarize() similar format mutate(), define new variables values computed. summarize() return new dataframe one column name passed , value column result R expression name equal . Consider example uses subset penguins data:, name one column flipper_m, value mean flp_mm variable. Likewise, mass_m column mean mass variable. third variable, ratio, mean(mass / flp_mm). mass flp_mm vectors quotient computed , quotient first value found, second… ith, mean new set numbers taken. come surprise summary designed work summary functions – output single value.verify true:","code":"\npenguins_example\n#> # A tibble: 6 x 3\n#>   species    mass flp_mm\n#>   <fct>     <int>  <int>\n#> 1 Adelie     3750    181\n#> 2 Adelie     3800    186\n#> 3 Chinstrap  3500    192\n#> 4 Chinstrap  3900    196\n#> 5 Gentoo     4500    211\n#> 6 Gentoo     5700    230\npenguins_example %>%\n  summarize(flipper_m = mean(flp_mm),\n            mass_m = mean(mass),\n            ratio = mean(mass / flp_mm))\n#> # A tibble: 1 x 3\n#>   flipper_m mass_m ratio\n#>       <dbl>  <dbl> <dbl>\n#> 1      199.  4192.  20.9\nfirstCol = c(181, 186, 192, 196, 211, 230)\nmean(firstCol)\n#> [1] 199.3333\nsecondCol = c(3750, 3800, 3500, 3900, 4500, 5700)\nmean(secondCol)\n#> [1] 4191.667\nthirdCol = c(3750/181, 3800/186, 3500/192, 3900/196,\n             4500/211, 5700/230)\nmean(thirdCol)\n#> [1] 20.89751"},{"path":"summarizing-data.html","id":"grouping-data","chapter":"7 Summarizing Data","heading":"7.4 Grouping Data","text":"power summarize() comes pairing group_by(). group_by() organizes data subgroups based shared values. Compare output following:two things note . First, two slightly different classes. Applying group_by() converts object grouped df/tibble, basically just denotes data organized subgroups. Second, additional line second output: Groups: species [3], denotes grouping . 3 unique species dataset, line says species value separated group 3 groups. df can grouped single multiple variables.","code":"\npenguins %>%\n  glimpse()\n#> Rows: 344\n#> Columns: 8\n#> $ species           <fct> Adelie, Adelie, Adelie, Adelie, …\n#> $ island            <fct> Torgersen, Torgersen, Torgersen,…\n#> $ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3…\n#> $ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6…\n#> $ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181…\n#> $ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650…\n#> $ sex               <fct> male, female, female, NA, female…\n#> $ year              <int> 2007, 2007, 2007, 2007, 2007, 20…\npenguins %>%\n  class()\n#> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\npenguins %>%\n  group_by(species) %>%\n  glimpse()\n#> Rows: 344\n#> Columns: 8\n#> Groups: species [3]\n#> $ species           <fct> Adelie, Adelie, Adelie, Adelie, …\n#> $ island            <fct> Torgersen, Torgersen, Torgersen,…\n#> $ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3…\n#> $ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6…\n#> $ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181…\n#> $ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650…\n#> $ sex               <fct> male, female, female, NA, female…\n#> $ year              <int> 2007, 2007, 2007, 2007, 2007, 20…\npenguins %>%\n  group_by(species) %>%\n  class()\n#> [1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\""},{"path":"summarizing-data.html","id":"grouped-summaries","chapter":"7 Summarizing Data","heading":"7.5 Grouped Summaries","text":"group_by() allows perform operations group-wise helps unlock true power summarize(). tells R want analyze data separately according different levels grouping variable specify. following example use subset penguins data:Put different way, summarize() gets passed grouped df, :Treat groups data though distinct datasetApply code group individually, resulting separate summary statistics eachCombine results new data frame.see can process illustrated figure .\nNote: using summarize(), important remember ungroup() data finished. Otherwise, subsequent functions unintentionally applied individual groups rather entire dataset! relevant using summarize() resulting output new dataframe.\nsummarize() handy functions easily works . example n() give number values vector. particularly useful find number observations different groups:first groups island species within island, finds number observations . output, can see islands observations species. fact, islands contain obsercvations single species!","code":"\npenguins_example %>%\n  group_by(species) %>%\n  summarize(m = mean(flp_mm))#> # A tibble: 3 x 2\n#>   species   Flp_m\n#>   <fct>     <dbl>\n#> 1 Adelie     184.\n#> 2 Chinstrap  194 \n#> 3 Gentoo     220.\npenguins %>%\n  group_by(island, species) %>%\n  summarize(n = n())\n#> `summarise()` has grouped output by 'island'. You can\n#> override using the `.groups` argument.\n#> # A tibble: 5 x 3\n#> # Groups:   island [3]\n#>   island    species       n\n#>   <fct>     <fct>     <int>\n#> 1 Biscoe    Adelie       44\n#> 2 Biscoe    Gentoo      124\n#> 3 Dream     Adelie       56\n#> 4 Dream     Chinstrap    68\n#> 5 Torgersen Adelie       52"},{"path":"summarizing-data.html","id":"using-across-with-summarize","chapter":"7 Summarizing Data","heading":"7.5.1 Using across() with summarize()","text":"lieu manual specification, can use across() within summarize() call make use helper functions introduced previously. allows perform computations several columns ! example, wanted get grouped means bill related variables, instead calling mean(x) individually, like :following:\nNote: Instead using drop_na(), na.rm argument used. accomplish thing.\ncan perform multiple summary functions time passing list rather just function name:another example, say wanted find number unique levels different factors data. done entire dataset:grouping variable:combination group_by(), summarize(), across(), allow quick powerful code relatively short. just lines , able get specific nuanced information dataset!","code":"\npenguins %>%\n  drop_na() %>%\n  group_by(species) %>%\n  summarize(bill_length_mean = mean(bill_length_mm),\n            bill_depth_mean = mean(bill_depth_mm))\n#> # A tibble: 3 x 3\n#>   species   bill_length_mean bill_depth_mean\n#>   <fct>                <dbl>           <dbl>\n#> 1 Adelie                38.8            18.3\n#> 2 Chinstrap             48.8            18.4\n#> 3 Gentoo                47.6            15.0\npenguins %>%\n  group_by(species) %>%\n  summarize(across(starts_with(\"bill\"),\n                   mean, na.rm = TRUE))\n#> # A tibble: 3 x 3\n#>   species   bill_length_mm bill_depth_mm\n#>   <fct>              <dbl>         <dbl>\n#> 1 Adelie              38.8          18.3\n#> 2 Chinstrap           48.8          18.4\n#> 3 Gentoo              47.5          15.0\n# penguins %>%\n#   group_by(species) %>%\n#   summarize(across(starts_with(\"bill\"), ~ mean(.x, na.rm = TRUE)))\n\n# ^Long form of the same thing.\npenguins %>%\n  group_by(island) %>%\n  summarize(across(starts_with(\"bill\"), \n                   list(mean = mean, sd = sd), na.rm = TRUE))\n#> # A tibble: 3 x 5\n#>   island  bill_length_mm_… bill_length_mm_… bill_depth_mm_m…\n#>   <fct>              <dbl>            <dbl>            <dbl>\n#> 1 Biscoe              45.3             4.77             15.9\n#> 2 Dream               44.2             5.95             18.3\n#> 3 Torger…             39.0             3.03             18.4\n#> # … with 1 more variable: bill_depth_mm_sd <dbl>\npenguins %>%\n  drop_na() %>%\n  summarize(across(where(is.factor), n_distinct))\n#> # A tibble: 1 x 3\n#>   species island   sex\n#>     <int>  <int> <int>\n#> 1       3      3     2\npenguins %>% \n  drop_na() %>%\n  group_by(species) %>% \n  summarize(across(where(is.factor), n_distinct))\n#> # A tibble: 3 x 3\n#>   species   island   sex\n#>   <fct>      <int> <int>\n#> 1 Adelie         3     2\n#> 2 Chinstrap      1     2\n#> 3 Gentoo         1     2"},{"path":"summarizing-data.html","id":"extra-resources","chapter":"7 Summarizing Data","heading":"7.6 Extra Resources","text":"dplyr documentation row-wise column-wise operationsacross documentationdata wrangling cheatsheet","code":""},{"path":"text-cleaning.html","id":"text-cleaning","chapter":"8 Text Cleaning","heading":"8 Text Cleaning","text":"often , working text responses sort character data output, initially difficult work . case dealing qualitative data sometimes even just output data collection means (Qualtrics, Googleforms, etc.). follow common cleaning procedures.","code":""},{"path":"text-cleaning.html","id":"remove-text-from-strings","chapter":"8 Text Cleaning","heading":"8.1 Remove Text From Strings","text":"Say data output included “Response:” response. Obviously, want variable just contain actual response values. can use str_remove_all() remove specified pattern text response. , removing “Response:”.","code":"\nx = \"Response:Apple Juice\"\nx\n#> [1] \"Response:Apple Juice\"\nx = str_remove_all(x, \"Response:\")\nx\n#> [1] \"Apple Juice\""},{"path":"text-cleaning.html","id":"escaping-special-characters","chapter":"8 Text Cleaning","heading":"8.2 Escaping Special Characters","text":"many programming languages, dealing special characters difficult. language trouble deciding trying use character just refer .Consider example :Instead, called “escaping” special character. One way R wrap character brackets.Now raises question want escape bracket? can double forward slash.\nNote: Double forward slash (\\) can used escape special character well, just brackets.\n","code":"\nx = '{Response:\"Apple Juice\"}'\nx\n#> [1] \"{Response:\\\"Apple Juice\\\"}\"\nstr_remove_all(x, '{')\n#> Error in stri_replace_all_regex(string, pattern, fix_replacement(replacement), : Syntax error in regex pattern. (U_REGEX_RULE_SYNTAX, context=`{`)\nx = '{Response:\"Apple Juice\"}'\nx\n#> [1] \"{Response:\\\"Apple Juice\\\"}\"\nstr_remove_all(x, '[{]')\n#> [1] \"Response:\\\"Apple Juice\\\"}\"\nx = '[Response:\"Apple Juice\"]'\nx\n#> [1] \"[Response:\\\"Apple Juice\\\"]\"\nstr_remove_all(x, '\\\\[')\n#> [1] \"Response:\\\"Apple Juice\\\"]\""},{"path":"text-cleaning.html","id":"removing-multiple-strings-at-once","chapter":"8 Text Cleaning","heading":"8.3 Removing Multiple Strings at Once","text":"can remove multiple strings using paste() include characters strings want removed.","code":"\nx = 'Response:{\"Apple Juice\"}'\n\nstr_remove_all(x, paste(c('Response', '[:]', '[{]', '[\"]', '[}]'), \n                        collapse='|'))\n#> [1] \"Apple Juice\""},{"path":"text-cleaning.html","id":"removing-the-first-instance","chapter":"8 Text Cleaning","heading":"8.4 Removing the First Instance","text":"Sometimes, want EVERY instance string removed. example , string “Answer” actually part participant’s response. removed!removed things , ’d lose part response! Instead, can just remove first instance string using str_remove()first gets rid text strings removed using str_remove_all() . , deal extra “Response”, str_remove() used, first instance removed.","code":"\nx = 'Response:{\"Apple Juice Response\"}'\n\nstr_remove_all(x, paste(c('Response', '[:]', '[{]', '[\"]', '[}]'), \n                        collapse='|'))\n#> [1] \"Apple Juice \"\nx = 'Response:{\"Apple Juice Response\"}'\n\nx = str_remove_all(x, paste(c('[:]', '[{]', '[\"]', '[}]'), \n                            collapse='|'))\nx\n#> [1] \"ResponseApple Juice Response\"\nstr_remove(x, \"Response\")\n#> [1] \"Apple Juice Response\""},{"path":"text-cleaning.html","id":"replace-parts-of-a-response","chapter":"8 Text Cleaning","heading":"8.5 Replace Parts of a Response","text":"Sometimes want remove part response also replace something else. Whereas str_remove() function simply remove string, gsub() substitute something else specify!gsub() takes form:gsub(string replace, replace , look)","code":"\nx = \"foo:bar\"\n\nstr_remove(x, \":\") # Not what you want\n#> [1] \"foobar\"\ngsub(\":\", \" \", x) # What you want!\n#> [1] \"foo bar\""},{"path":"intro-to-ggplot2.html","id":"intro-to-ggplot2","chapter":"9 Intro to ggplot2","heading":"9 Intro to ggplot2","text":"“greatest value picture forces us notice never expected see.”— John Tukey“single statistical tool powerful well‐chosen graph.” (Chambers et al. 1983)Care Visualizing Data?Consider following scenario:two different datasets, comprised individuals measured two outcomes (say height weight). mean standard deviation height weight datasets. correlation height weight datasets well. every statistical metric, datasets . , must look similar, right?Click button :collection data called datasauRus, information generated can found technical paper. modern version famous Anscombe’s Quartet:four datasets matching n’s, means, standard deviations, correlations. means slope intercept, corresponding statistical tests, equivalent. data clearly look different though. (data built R object called anscombe, can look test !)key point summary statistics variables linear relationships inherently overlook aspects data. highlights critical importance visualizing data, just relying summary statistics alone. point visualization, just like summary statistic, understand relationship pattern data. However, looking raw data , run risk missing things way relying summary statistics alone.","code":"\nlibrary(tidyverse)\nlibrary(palmerpenguins)"},{"path":"intro-to-ggplot2.html","id":"when-visualizing-go-wrong","chapter":"9 Intro to ggplot2","heading":"9.1 When Visualizing Go Wrong","text":"easy enough just say, “Look raw data! Create visualization!” However, bad visualization often times worse visualization . One things Covid-19 pandemic brought originally plethora data visualizations. observed real world last 2 years:, enough just make visualization, important also consider principles make GOOD visualization. next lessons, covered.","code":""},{"path":"intro-to-ggplot2.html","id":"ggplot2","chapter":"9 Intro to ggplot2","heading":"9.2 ggplot2","text":"Data visualization one things sets R apart programming languages can used statistics, like Python. R still best data visualization capabilities, one primary reasons used Python Social Sciences. also one first times get see coding can . actually going creating stuff code!class, ggplot2 package used create visualizations. Graphs constructed mapping data geometric objects (lines, bars, points, etc.) according aesthetic attributes (color, shape, size, etc.). ggplot2 uses inform grammar.\nArtwork @allison_horst\n","code":""},{"path":"intro-to-ggplot2.html","id":"meet-the-penguins","chapter":"9 Intro to ggplot2","heading":"9.2.1 Meet the Penguins","text":"create visualizations, need data visualize! palmerpenguins dataset Alison Horst used create examples throughout.dataset contains measurements 344 different penguins. Measurements include things like bill length depth, sex, among others.\nArtwork @allison_horst\n3 different species penguins dataset, collected 3 islands Palmer Archipelago, Antarctica.\nArtwork @allison_horst\nUse library(palmerpenguins) call load dataset.","code":""},{"path":"intro-to-ggplot2.html","id":"a-basic-graph","chapter":"9 Intro to ggplot2","heading":"9.3 A Basic Graph","text":"sensible place start building basic graph. going LOTS exercise breaks throughout.\nNote: move forward building first graph, new piece code added accompanied literate programming portion, describe words code .\nggplot graphs build using ggplot() call. first thing needs data. %>% used pass penguins dataframe.Start telling ggplot use penguins dataframe dataWoo! actually created something. grey rectangle! course, code alone anything. tell ggplot want plot. Hmm… example, consider penguin’s bill_length_mm related flipper_length_mm. might imagine bigger penguins tend longer bills flippers, maybe ? create visualizations, try help answer questions may data (consist samples thought representative world large)!ggplot needs told variables data mapped aesthetics want render graph. aes() call, start specifying display axis.“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis.”, specified flipper_length_mm y-axis, bill_length_mm x-axis (good practice specify y first x second). aesthetic mappings must separated comma, matter order list (though good practice start axes first). can see, ggplot figured label axes .ggplot told aesthetic mappings (data source use), render mappings! want ggplot use mappings construct geometric object, way adding geom, aptly named. number different geoms, general syntax geom_X(), X usually refers specific geometric object want render. , want point graph penguin, geom_point() used.\nNote: TON different geoms. see many later.\n“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point.”Okay, NOW talking! looks like actual real graph. Look first ggplot masterpiece!two important things note :+ used instead %>% add new function. ggplot system additive/layered, powerful idea explained later. now, enough know geom_point() added code. want take penguins %>% ggplot(mapping = aes(y = flipper_length_mm, x = bill_length_mm)) code use argument geom_point() function, happen %>% used pipe ! want just add points top existing base code created, + used.+ used instead %>% add new function. ggplot system additive/layered, powerful idea explained later. now, enough know geom_point() added code. want take penguins %>% ggplot(mapping = aes(y = flipper_length_mm, x = bill_length_mm)) code use argument geom_point() function, happen %>% used pipe ! want just add points top existing base code created, + used.running code, addition creating graph (“Plots” section RStudio inline code), following showed console:running code, addition creating graph (“Plots” section RStudio inline code), following showed console:\nWarning message:Removed 2 rows containing missing values (geom_point).\nLooking warnings errors always important, especially creating visualizations! says removed 2 rows data, may seem like big deal want visualizations misleading. Especially start visualizing summary statistics (like means). look actual data though, can verify two penguins measurement value flipper length bill length. obviously without either , included graph. case, okay, important always verify!\nNOTE: moving forward, pedagogical purposes warning message hidden output subsequent code cleaner. However, 2 rows still removed!\n, noted goal visualization understand relationship, pattern, data. every visualization make, verbal description pattern seen (one exist!) provided underneath. help develop intuitive graph literacy. able quickly accurately interpret visualizations important skill, one pillars course.\nThings related graph literacy comprehension appear boxes like moving forward!\nvisualization can seen , generally speaking, penguins greater flipper length tend greater bill length well. seems positive linear relationship bill length flipper length , flipper length increases, bill length increases turn.\nNote: use lot tentative language include many qualifiers . formal statistical analyses done afford ability state relationship effect definitively.\n","code":"\npenguins %>%\n  ggplot()\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm))\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm)) +\n  geom_point()\n#> Warning: Removed 2 rows containing missing values\n#> (geom_point)."},{"path":"intro-to-ggplot2.html","id":"references-1","chapter":"9 Intro to ggplot2","heading":"9.4 References:","text":"Horst , Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/","code":""},{"path":"aesthetics.html","id":"aesthetics","chapter":"10 Aesthetics","heading":"10 Aesthetics","text":"","code":"\nlibrary(tidyverse)\nlibrary(palmerpenguins)"},{"path":"aesthetics.html","id":"color","chapter":"10 Aesthetics","heading":"10.1 Color","text":"looking graph created last section (shown ), kind seems like may different groups clusters penguins data. notice pattern like , worth looking considering variables data related.One way penguins seem grouped cluster top another bottom:might correspond sex variable dataset! Maybe case bigger penguins males, smaller ones females?idea explored way visually indicate observations graph male penguins female. Specifically, want color points different based value observation’s sex. fact… can just ! One best parts coding , can always just try run code see happens!\noften helpful declare formal predictions. , specify two mutually exclusive alternatives see exploring idea.\n“case differences penguin size explained sex (e.g., bigger penguins males smaller ones females), points cluster top one color points cluster bottom different color. case differences penguin size explained sex , points two clusters distinct colors.”Uh… okay. , work. OH! Remember aes() used tell ggplot variables data mapped aesthetics want render graph? Color needs passed another argument aesthetics plot via aes().“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map sex color point.”like ! really look like may thought might though. consistent possible outcome, sex explain differences penguin size. However, looking carefully, actually kind looks like 3 distinct clusters, 2.might correspond species variable dataset! Maybe case different penguin species differ size? actually makes lot sense. idea can tested well!“case differences penguin size explained species , points cluster distinct colors. case differences penguin size explained species , points clusters distinct colors.”“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map species color point.”visualization can seen , generally speaking, penguins greater flipper length tend greater bill length well. seems positive linear relationship bill length flipper length , flipper length increases, bill length increases turn. Additionally, penguins species tend similar flipper bill lengths, distinct species. Adelie penguins tend shortest lengths, Gentoo longest. Chinstrap penguins seem shorter flippers longer bills.Hot dang, looks like promising explanation penguins differ size! obviously need kind formal statistical analysis know sure, visualizing raw data ways like allow quickly get insights different questions may want use data answer.","code":"\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm),\n         color = sex) +\n  geom_point()\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm,\n                       color = sex)) +\n  geom_point()\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm,\n                       color = species)) +\n  geom_point()"},{"path":"aesthetics.html","id":"global-vs-local-aesthetics","chapter":"10 Aesthetics","heading":"10.1.1 Global vs Local Aesthetics","text":"first describing visualization, one things noted , “seems positive linear relationship bill length flipper length , flipper length increases, bill length increases turn.” can helpful add line best fit actually see linear relationship. can using geom_smooth(). arguments need set within geom_smooth(), worry much .code copy/pasted new geom_smooth() call can added directly . best fitting line data displayed.“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map species color point. Add line best fit data.”Hey, wait, quite expected… Instead one line data, looks like line species. happening highlighting difference global aesthetic (put ggplot() call apply added parts graph) local aesthetic (put individual geoms apply individual ones).Color moved geom_point() call, thing mapped values species data.Alright! points still colored species, just one line data, originally intended. also notice mapping= specified geom_point(), removed ggplot() well! actually necessary specify . hang things, can leave part .","code":"\npenguins %>%\n  ggplot(mapping = aes(y = flipper_length_mm,\n                       x = bill_length_mm,\n                       color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species)) +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"setting-vs-mapping-aesthetics","chapter":"10 Aesthetics","heading":"10.1.2 Setting vs Mapping Aesthetics","text":", change color points (inadvertently line best fit), color argument specified aes() call map values species variable data. want map something variable data? just want set value something ? might think, “maybe just take mapping = aes() part?” right, smart! Look example just try change points orange (good contrast line).Well, okay, obviously right results error:\nError layer(data = data, mapping = mapping, stat = stat, geom = GeomPoint, : object ‘orange’ found\nwriting orange like , R thinks variable penguins dataset piped ggplot! tell R variable/object defined, instead just color orange, use quotes.Much better! can geom:\nNote: Aesthetic settings can set locally, globally. Aesthetic mappings can local global.\n","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(color = orange) +\n  geom_smooth(method = \"lm\", se = FALSE)\n#> Error in layer(data = data, mapping = mapping, stat = stat, geom = GeomPoint, : object 'orange' not found\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(color = \"orange\") +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(color = \"orange\") +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"purple\")\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm),\n         color = \"orange\") +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"setting-colors","chapter":"10 Aesthetics","heading":"10.1.3 Setting Colors","text":"setting color, can done name, done , hexcode:neat thing can set colors based logical operation! example, wanted color penguins flipper lengths greater 200 one color, flipper lengths great 200 another color, following:Notice color just set equal simple logical test! still mapped aesthetic, based values variable data.tons good color guides can find google. couple:onetwothreeMore colors covered later lesson.","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(color = \"#9FE2BF\") +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"#FFBF00\")\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = flipper_length_mm > 200)) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"#FFBF00\")"},{"path":"aesthetics.html","id":"shape","chapter":"10 Aesthetics","heading":"10.2 Shape","text":"","code":""},{"path":"aesthetics.html","id":"mapping","chapter":"10 Aesthetics","heading":"10.2.1 Mapping","text":"Color one aesthetics can change, many others ! Another one shape. Like color, shape can mapped variable data. addition changing color points species, code change shape !“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map species color point. Add line best fit data change shape point mapped species.”However, map aesthetic. shape mapped different aesthetic ! Consider happens mapping island instead.now notice instead coloring one shape, mapped variable, now colors can multiple shapes! Mapping another variable different aesthetic visualizes even data patterns dataset! can quickly become overwhelming difficult interpret though, often best try just communicate one main relationship pattern visualizations. practice though, can go nuts!","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = species)) +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = island)) +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"setting","chapter":"10 Aesthetics","heading":"10.2.2 Setting","text":"number different shapes can choose setting . can selected number:name:\nSource: ggplot documentation\nnotice several shapes, appear different versions. example, appears 3 different kinds triangles. differences compared :17 ‘triangle’\nSolid color shape\nSolid color shape2 ‘triangle open’\nColored shape outline hollow center\nColored shape outline hollow center24 ‘triangle filled’\nColored shape outline center can filled another color\nColored shape outline center can filled another colorThis introduces another way change colors ggplot! changing color something, geoms ‘color’ argument, ‘fill’ argument, , like , ! ‘color’ often refers outline/outside, ‘fill’ often refers … well, fill!","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species),\n             shape = 17) +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species),\n             shape = 2) +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species),\n             shape = 24,\n             fill = 'darkgrey') +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"size","chapter":"10 Aesthetics","heading":"10.3 Size","text":"","code":""},{"path":"aesthetics.html","id":"mapping-1","chapter":"10 Aesthetics","heading":"10.3.1 Mapping","text":", actually kind hard see shape differences, wasn’t ? points graph just small. helpful size changed. Wouldn’t know , size happens another aesthetic! example mapping size:“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map species color point. Add line best fit data, change shape point mapped species corresponding size changes.”Well, looks pretty shitty, gets point across! One thing demonstrate meant saying, “ggplot additive/layered”.geom_smooth() last geom added . means, quite literally, added top graph rendered previous code. gets put top, runs covers observations.Think graph look like added geom_smooth() first geom_point() second, click button find :\nconcept important keep mind creating visualizations. Order matters!","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = species,\n                 size = species)) +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"setting-1","chapter":"10 Aesthetics","heading":"10.3.2 Setting","text":"Maybe instead mapping … just change size . example, take one graphs make shapes little bit larger.Wow, okay, shows fill lot better ! can actually pretty neat things playing around different size values. example:","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species),\n             shape = 24,\n             fill = 'darkgrey',\n             size = 4) +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species)) +\n  geom_point(aes(color = species),\n             size = 4,\n             shape = 6) +  \n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"alpha","chapter":"10 Aesthetics","heading":"10.4 Alpha","text":"","code":""},{"path":"aesthetics.html","id":"mapping-2","chapter":"10 Aesthetics","heading":"10.4.1 Mapping","text":"alpha aesthetic changes translucent vs opaque something .“Start telling ggplot use penguins dataframe data, map flipper length y-axis bill length x-axis. Represent observation point, map species color point. Add line best fit data, change shape point mapped species, corresponding size changes alpha changes.”can see, using alpha mapped aesthetic particularly useful. , , instances want .","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = species,\n                 size = species,\n                 alpha = species)) +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"setting-2","chapter":"10 Aesthetics","heading":"10.4.2 Setting","text":"often, want set alpha levels different elements graphs . Alpha values range 0-1, 0 completely transparent 1 completely opaque.Compare two graphs note alpha levels:working (relatively) small dataset , may already see alpha changes extremely useful working larger datasets:Looking observations highlighted red circles, can notice darker color observations species. means multiple observations values, rendered spot graph. observations completely opaque (alpha), may obscured others occupying space!even clear looking example built diamonds dataset:Even low alpha (look faint points outside center cluster ), can see just many observations overlapping! see better ways visualize data like later.","code":"\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = species),\n             size = 3,\n             alpha = 0.8) +\n  geom_smooth(method = \"lm\", se = FALSE)\npenguins %>%\n  ggplot(aes(y = flipper_length_mm,\n             x = bill_length_mm)) +\n  geom_point(aes(color = species,\n                 shape = species),\n             size = 3,\n             alpha = 0.3) +\n  geom_smooth(method = \"lm\", se = FALSE)"},{"path":"aesthetics.html","id":"references-2","chapter":"10 Aesthetics","heading":"10.5 References:","text":"Horst , Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"different-geoms-and-when-to-use-them","chapter":"11 Different Geoms and When To Use Them","heading":"11 Different Geoms and When To Use Them","text":"Previously, stated point visualization explore understand relationship pattern data (often response/outcome variable one explanatory/predictor variables). important know best graphically represent data based types variables (categorical vs continuous) relationships patterns trying visualize. number ways can visualize specific types relationships. better others, sometimes “best” depends specific context.follows overview number different ways can visualize different data relationships, well recommendations best .","code":"\nlibrary(tidyverse)\nlibrary(palmerpenguins)"},{"path":"different-geoms-and-when-to-use-them.html","id":"one-categorical","chapter":"11 Different Geoms and When To Use Them","heading":"11.1 One Categorical","text":"Graphing one categorical variable used show counts proportions.","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"bar","chapter":"11 Different Geoms and When To Use Them","heading":"11.1.1 Bar","text":"One good way visualizing single categorical variable bar chart.Think following question:“many penguin observations island?”Let’s create visualization bar island, bar’s height corresponds number penguins recorded island. , use geom_bar().wanted bars represent proportion observations came island instead raw counts, need way telling R . proportions something already exist data, easily computed. proportion observations island simply :\\[\\frac{nObservationsFromIslandX}{sumOfObservationsFromAllIslands}\\]count’s y-axis , just want ..count.. (numerator ) divided sum ..count..s (denominator ). Luckily, can just give R!\nNote: Proportions must sum 1! bars ever sum one, issue!\n","code":"\npenguins %>%\n  ggplot(aes(x = island)) + \n  geom_bar()\npenguins %>%\n  ggplot(aes(x = island)) + \n  geom_bar(aes(y = (..count..)/sum(..count..)))"},{"path":"different-geoms-and-when-to-use-them.html","id":"pie","chapter":"11 Different Geoms and When To Use Them","heading":"11.1.2 Pie","text":"less good way pie chart. worry understanding code, part use . may, unfortunately, find working particularly intransigent PI collaborator. include code template scenarios.information recommended avoid using pie charts can found (stop “Alternatives” section).creating visualization communicate something single categorical variable, really just use table graph .","code":"\npenguins %>%\n  ggplot(aes(x = 1,\n             fill = species)) +\n  geom_bar() +\n  coord_polar(\"y\", start = 0)"},{"path":"different-geoms-and-when-to-use-them.html","id":"one-continuous","chapter":"11 Different Geoms and When To Use Them","heading":"11.2 One Continuous","text":"Looking distributionsBeing able understand characterize distributions integral part Social/Data Scientists toolbox. want know distribution particular numerical variable dataset, options available .","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"histogram","chapter":"11 Different Geoms and When To Use Them","heading":"11.2.1 Histogram","text":"One powerful tools examining distributions histogram. histogram, values variable interest separated different bins x-axis.y-axis histogram often represent frequency count value range values distribution. However, can also represent proportion distribution value. pay attention scale y-axis!histogram , height bars correspond long penguin’s flipper , rather number penguins sample flipper lengths particular range/value. example, looks like ~28 penguins sample flipper lengths around 190mm.little difficult tell difference individual bar though. Giving outline help tremendously. can color aesthetic. Remember, ‘color’ often refers outline/outside, ‘fill’ often refers inside.","code":"\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_histogram()\n#> `stat_bin()` using `bins = 30`. Pick better value with\n#> `binwidth`.\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_histogram(color = 'black')\n#> `stat_bin()` using `bins = 30`. Pick better value with\n#> `binwidth`."},{"path":"different-geoms-and-when-to-use-them.html","id":"bins","chapter":"11 Different Geoms and When To Use Them","heading":"11.2.1.1 Bins","text":"may noticed weird message coming histograms far:\nstat_bin() using bins = 30. Pick better value binwidth.\n“bins” refers actual number bins (bars) histogram. “binwidth” refers width bin (bar), words many units x wide bin (bar) . Setting value “binwidth” override number “bins”, R suggesting change value.histogram, difference binwidth size can significantly impact graph looks. , turn, influence kind impressions inferences make. reason important explore different bin settings verify whether patterns notice truly feature data just artifact bin settings!Consider example :first histogram probably say unimodal distribution flipper lengths around 190mm (+/- ). However, looking second histogram, probably say distribution looks bimodal, one cluster around 190mm another around 210mm. data, visualized using type graph, two different stories based choices made. careful make sure telling data’s story, story!","code":"\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_histogram(color = 'black',\n                 bins = 5)\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_histogram(color = 'black',\n                 bins = 15)"},{"path":"different-geoms-and-when-to-use-them.html","id":"density","chapter":"11 Different Geoms and When To Use Them","heading":"11.2.2 Density","text":"density plots, short, smoothed histogram. particularly stats-minded want information, click info.Density plots show probability density (actual probability!) y-axis. mean exactly? Well, little complicated. short, continuous curve (aka kernel) fit individual data point. kernel usually gaussian. gaussians individual data point summed forms curve fit density plot. interested info, check fairly approachable explanation.\nUse geom_density() density plot.better understand density plot, helps see overlays histogram:can see , smoothing, density plots obscure noisiness (variability) data.","code":"\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_density()\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_density(size = 1)+\n  geom_histogram(aes(y=..density..), color=\"black\", alpha=0.2)"},{"path":"different-geoms-and-when-to-use-them.html","id":"vlines","chapter":"11 Different Geoms and When To Use Them","heading":"11.2.3 vlines","text":"One thing may want histogram mark specific parts regions data. can done adding vertical lines geom_vline(). add vertical line must specify x-axis line cross. Since something axis, must make specification aes() call.","code":"\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) +\n  geom_histogram(color = 'black',\n                 bins = 15) +  \n  geom_vline(aes(xintercept=180),color=\"black\", size=1) +\n  geom_vline(aes(xintercept=200),color=\"black\", size=1)"},{"path":"different-geoms-and-when-to-use-them.html","id":"continuous-continuous","chapter":"11 Different Geoms and When To Use Them","heading":"11.3 Continuous ~ Continuous","text":"RelationshipsWhen exploring relationship two continuous variables, two main visualizations can work : scatter plots 2d histograms. main difference one pick large dataset trying visualize .","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"scatter-plot","chapter":"11 Different Geoms and When To Use Them","heading":"11.3.1 Scatter plot","text":"recall previous lessons, use geom_point() scatter plots. scatter plot point visualization represents observation data.Use scatter plots datasets lower n’s . also saw , even alpha adjustments, datasets large n’s can look pretty gnarly:","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_point()\ndiamonds %>%\n  ggplot(aes(y = table, x = depth)) +\n  geom_point(alpha = 0.1)"},{"path":"different-geoms-and-when-to-use-them.html","id":"d-histogram","chapter":"11 Different Geoms and When To Use Them","heading":"11.3.2 2d Histogram","text":"Alternatively, working dataset large n, can use 2d histogram geom_bin2d().Like scatter plot, point represents observation. However, also given information many observations may occupying /similar space. example, lighter spot, concentrated observations spot.twist 2d Histogram make hexbin plot, essentially thing uses hexagons instead squares. Everything else , use geom_hex(). also gives added benefit making feel like casting hex data (sometimes ’re coding, look little fun can).conclusions draw two identical. choice two largely personal preference.","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_bin2d()\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_hex()"},{"path":"different-geoms-and-when-to-use-them.html","id":"adding-conditional-means","chapter":"11 Different Geoms and When To Use Them","heading":"11.3.3 Adding Conditional Means","text":"can sometimes good idea include line best fit show trend data. can aid seeing patterns data. can geom_smooth().two main arguments relevance now method= se=. method= argument gets set “lm”, saying want fit line linear model. se= refers whether show Standard Error line.Well… Hang . … okay yes line, may expecting see. highlights important point: Just CAN fit line something always mean .","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_point() +\n  geom_smooth(method = 'lm', se = FALSE)"},{"path":"different-geoms-and-when-to-use-them.html","id":"rugs-and-margins","chapter":"11 Different Geoms and When To Use Them","heading":"11.3.4 Rugs and Margins","text":"Another neat trick can add information individual distribution margins visualization.One way adding “rug” scatter plots. can geom_rug().Another way showing individual histograms continuous variables. can using ggMarginal() ggExtra package (ggExtra::ggMarginal()).\nNote: ggMarginal part ggplot proper, added like geoms. Instead, pipe ggplot graph . , must wrap ggplot code parentheses. way, entire visualization gets piped just last piece!\n","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_point()+\n  geom_rug(alpha=0.1, size=1.5)\n(penguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_point()) %>%\nggExtra::ggMarginal(type = \"histogram\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"continuous-categorical","chapter":"11 Different Geoms and When To Use Them","heading":"11.4 Continuous ~ Categorical","text":"ComparisonsArguably, common thing create graph visualize comparison data many different conditions (levels) variable. Specifically, compare summary statistics . example:average weight (body_mass_g) penguins compare across islands (island)?Maybe case islands better food sources others, penguins can gorge food coma day long penguins islands lucky.LOT options visualize comparisons kind. examples, also see important guidelines implement follow.\nNote: looking values one continuous variable compare across levels categorical variable, helpful first examine values continuous variable vary begin .\n","code":"\npenguins %>%\n  ggplot(aes(x = body_mass_g)) +\n  geom_histogram(color = 'black')"},{"path":"different-geoms-and-when-to-use-them.html","id":"stat_summary","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.1 stat_summary()","text":"stat_summary() function extremely powerful versatile function can used create visualization summarizing y values unique x value. fun = argument specifies type summary want visualize y values. geom = argument specifies want results visualized. short, tell want visualize .summary function use often likely “mean” (average), can also use number others including “median”, “max”, “min”, “sd” (standard deviation), etc., compare several different summary statistics groups x-axis variable. examples follow use mean.Just several summary statistics can use, several ways can visualize summary statistics…","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"bar-1","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.1.1 Bar","text":"canonical visualization bar chart, using “bar” geom.\nGoing forward, habit making predictions /summarizing visualizations create brought back. formal prediction first declared specifying two mutually exclusive alternative patterns observed visualizations. idea (hypothesis) worked , subsequent predictions can just refer hypothesis rather explicitly stating . making visualization, short summary visualization shows written.\n“case differences penguin weight explained island live (e.g., penguins islands heavier average penguins islands), bars higher lower others. case differences penguin weight explained island live , bars roughly equivalent heights.”visualization can see , generally speaking, penguins Biscoe island seem heaviest heavier average penguins either Dream Torgersen island. penguins Dream Torgensen island seem similar weight. can see pattern noticing bar representing Biscoe island higher bars Dream Torgersen islands (height).Unlike histogram, height bar shows mean levels categorical variable, counts observations.","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"bar\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"point","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.1.2 Point","text":"Instead representing means bar geom, “point”.Compared means represented bars, difference average weight penguins Biscoe island two islands looks much drastic. ? data, just visualized differently. note scale y-axis changed . Instead running 0 - 5000 like bar chart, runs 3750 - 4750. Modifying axis scales covered later, now reminder mindful scales making interpretation, scale might skew interpretations someone makes visualization!","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"point\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"line","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.1.3 Line","text":"Another way visualize line instead bars points.Hm, okay, work. R telling something though:\ngeom_path: group consists one observation. need adjust group aesthetic?\ntelling line R trying make needs know points trying connect. know want individual pieces visualization (, mean body_mass_g level island) grouped together, group one observation. R even gave recommendation fix asking need adjust group aesthetic! new aesthetic covered later.now, R needs know levels island treated coming group. can done simply telling R one group:island (x-axis variable) categorical, ggplot try draw individual lines level default. However, , one value factor level least two points needed create line!number different styles line can use changing linetype:Different geoms can also combined. example, point lines make line plot look little cleaner.can use , line plots best used time series data.","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"line\")\n#> geom_path: Each group consists of only one observation.\n#> Do you need to adjust the group aesthetic?\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island, group = 1)) +\n  stat_summary(fun = \"mean\", geom = \"line\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island, group = 1)) +\n  stat_summary(fun = \"mean\", geom = \"line\", linetype = \"dashed\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island, group = 1)) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun = \"mean\", geom = \"line\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"error-bars","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.2 Error bars","text":"want visualizations informative possible. Keeping mind, often want give appreciation much variability data (showing mean). accomplished including error bars (either confidence intervals (CI) Standard Error Mean (SEM)) around summary statistics. use SEM course.manually compute upper lower values error bars mean, fortunately ggplot2 number built ways ! Even convenient, just another extension stat_summary(). , want standard error mean (“mean_se”), want represented error bars (“errorbar”).change anything raw data create new dataframes, stat_summary() just everything !one difference note use fun.data = instead fun =. “mean_se” give mean, upper, lower SE boundaries. Since getting multiple pieces information x-axis value, use slightly different argument.Another thing may note ugly looks. error bars far wide. can change width aesthetic.looks bit better, like see published peer-reviewed journal article.Error bars can added geoms:can also rendered different shapes:shortcut, “pointrange” geom can used create point mean line error bars:gives basically graph , uses one stat_summary() call! downside slightly less control customizing line point separately.","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"bar\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"bar\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\",\n               width = 0.3)\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"errorbar\", width = 0.2)\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun = \"mean\", geom = \"point\") +\n  stat_summary(fun.data = \"mean_se\", geom = \"linerange\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  stat_summary(fun.data = \"mean_se\", geom = \"pointrange\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"boxplots","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.3 Boxplots","text":"Another way get sense distribution data use box plots.can create boxplot using geom_boxplot()","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_boxplot()"},{"path":"different-geoms-and-when-to-use-them.html","id":"problem-with-summary-stats","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.4 Problem With Summary Stats","text":"first lesson visualizations, saw many different datasets distributions consistent summary statistics (datasauRus dozen Anscombe’s quartet). rationale visualizations important. However, including nothing summary statistics graphs much better reporting summary statistics numbers! never know summary statistics hiding data:\nArtwork @allison_horst\nboxplots give better sense distribution providing information just bar mean SEM , many datasets can consistent boxplot !\nSource: Stats, Different Graphs…\nbar charts boxplots conventionally common way represent data, just seen problematic can . always recommended visualize distribution data! way transparent accurately communicate patters data. reason, strongly advised use bars represent means.graphs outlined help achieve goals visualizing summary statistics raw distributions individual participant data dataset.","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"violin-plots","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.5 Violin Plots","text":"dataset large /creating visualization lot observations, violin plots can helpful. similar boxplots show little less information sensitive changes distribution raw data.\nSource: Stats, Different Graphs…\ncan create violin plot geom_violin()width section violin plot corresponds number observations area. Violin plots can also pair nicely boxplot!way, get benefits boxplot also conveying information underlying distribution. Since ggplot additive/layered system, can combine different geoms elements make particularly effective visualizations!","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_violin()\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_violin() +\n  geom_boxplot(width = 0.2)"},{"path":"different-geoms-and-when-to-use-them.html","id":"jitter-plots","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.6 Jitter Plots","text":"wanted actually show full distribution data, might think use geom_point() like create scatter plot. However, since x-axis categorical variable, data points value:can add noise (space) data using geom_jitter() jitter data points. Jitter plots especially good variables small n’s. can start little messy difficult read larger n’s though.dataset large, jitter plots can paired number geoms summary statistics create effective visualizations. Consider examples :Combine jitter mean SE:Combine jitter boxplots:jitter violin plots:","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_point()\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter()\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(height = 0, width = 0.2, \n              size = 1, alpha = 0.5,\n              color = \"darkgreen\") +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\",\n               color = \"black\",\n               fill = \"red\",\n               shape = 21,\n               size = 0.5)\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(alpha = 0.4, height = 0, width = 0.2, size = 1) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"errorbar\",\n               color = \"orange\",\n               width = 0.1,\n               size = 1) +\n  stat_summary(fun = \"mean\",\n               geom = \"point\",\n               color = \"red\",\n               size = 2)\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_boxplot(width = 0.6) +\n  geom_jitter(height = 0, width = 0.1,\n              alpha = 0.5, color = \"seagreen\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_violin() +\n  geom_jitter(alpha = 0.4, width = 0.05) +\n  stat_summary(fun = \"mean\",\n               geom = \"point\",\n               color = \"red\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"limits","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.6.1 Limits","text":"3 important things mindful creating jitter plot.adding noise, can quite literally change data visualized. problem categorical variable, like x-axis, small shifts position change value associated point. continuous variables, like y-axis, . reason, recommended jitter along categorical variable. Since y-axis continuous, want height points change. can tell ggplot height argument. preserve actual y-axis value, visualization represent true values dataset.jitter added visualization random. Every time make jitter plot, even rerun code jitter plot, jitter added random visualization look slightly different!jitter added visualization random. Every time make jitter plot, even rerun code jitter plot, jitter added random visualization look slightly different!running code generate jitter plot, sometimes code may work produce graph seems normal accompanied text output console:running code generate jitter plot, sometimes code may work produce graph seems normal accompanied text output console:\nWarning messages: 1: Removed X rows containing non-finite values (stat_smooth). 2: Removed X rows containing missing values (geom_point).\nCRITICALLY important mindful types errors. happening visualization actually showing data! message means X data points removed dataset generating graph. can particularly problematic visualizing summary statistics, like means error bars, reflecting true values dataset!!!common reason receiving error data points values captured axes limits. can either manually limited axis contain known value, value jittered past axis limit. later, now take home point look always check code warning/error messages (general, especially jittering).","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(height = 0)"},{"path":"different-geoms-and-when-to-use-them.html","id":"variations-on-jitter","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.7 Variations on Jitter","text":"","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"strip-chart","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.7.1 Strip Chart","text":"strip chart variation jitter plot. basically jitter plot represents mean small horizontal line (using “crossbar” geom).","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) + \n  geom_jitter(height = 0, width = .1, \n              color = \"darkmagenta\",\n              alpha = .5) + \n  stat_summary(fun = \"mean\", \n               geom = \"crossbar\", \n               width = 0.3)"},{"path":"different-geoms-and-when-to-use-them.html","id":"beeswarmdot-plot","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.7.2 Beeswarm/Dot Plot","text":"Another variation jitter plots Beeswarm Dot plotThe settings can quite temperamental, play around binwidth, stackratio, dotsize, dialed can make nice looking visualizations. Especially paired boxplot:","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +   \n  geom_dotplot(stackdir = \"center\", \n               binaxis = \"y\", \n               binwidth = 80,\n               stackratio = 1,\n               fill = \"cyan3\", \n               color = \"cyan3\")\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +  \n  geom_boxplot() + \n  geom_dotplot(binaxis = 'y', \n               stackdir = 'center', \n               stackratio = 1, \n               binwidth = 80,\n               binpositions = \"all\",\n               dotsize = 1,\n               alpha = .45, \n               fill = \"cyan3\", \n               color = \"cyan3\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"ridgeline-plot","chapter":"11 Different Geoms and When To Use Them","heading":"11.4.8 Ridgeline Plot","text":"Ridgeline plots, formerly known joy plots, allows visualize distributions numerical variable different levels categorical variable. important distinction ridgeline plots require continuous variable x-axis categorical variable y-axis. can create ridgeline plot using geom_density_ridges() function ggridges package (ggridges::geom_density_ridges()).Using scale argument gives space distribution.Like jitter plots, serve foundation several different visualizations. example, popular extension ridgeline plot make raincloud plot:variations raincloud plots lineranges (look better variability – example ), etc.:","code":"\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = island)) +\n  ggridges::geom_density_ridges(scale = 0.9)\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = island)) +  \n  ggridges::geom_density_ridges(jittered_points = TRUE, \n                      position = \"raincloud\",\n                      scale = 0.4)\npenguins %>%\n  ggplot(aes(x = body_mass_g, y = island)) +\n  ggridges::geom_density_ridges(scale = 0.9) +\n  stat_summary(fun.data = \"mean_se\", geom = \"pointrange\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"new-arguments-and-functions","chapter":"11 Different Geoms and When To Use Them","heading":"11.5 New Arguments and Functions","text":"","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"faceting","chapter":"11 Different Geoms and When To Use Them","heading":"11.5.1 Faceting","text":"plot data may contain data several different variables time.can help differentiate different subsets data adding aesthetics, sometimes may want just separate entirely different graphs. known “faceting” (confused facetuning), can done using facet_grid(). Faceting allows apply ggplot code different subsets data, generating multiple graphs time.facet_grid(), must specify variable(s) want facet , whether want graphs spread across different columnsor spread across different rows.larger datasets, can facet across rows one variable columns another. quick, easy, yet powerful way explore larger datasets conditional relationships may exist certain variables.","code":"\npenguins %>%\n     ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n     geom_point()\npenguins %>%\n    ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n    geom_point() + \n    facet_grid(cols = vars(island))\npenguins %>%\n    ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n    geom_point() + \n    facet_grid(rows = vars(island))\npenguins %>%\n    ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n    geom_point() + \n    facet_grid(rows = vars(island),\n               cols = vars(species))"},{"path":"different-geoms-and-when-to-use-them.html","id":"groups","chapter":"11 Different Geoms and When To Use Them","heading":"11.5.2 Groups","text":"Previously, made line plot looked something like :noted since gear (x-axis variable) categorical, ggplot try draw individual lines level default. Since, one value factor level (mean), least two points needed create line, tell ggplot group 1 data point using group argument.notion grouping powerful another way can plot subsets data without make changes , manually compute summaries , raw data.example, can look wt changes across gear cars different cylinders grouping cyl.often studies implementing within-subjects designs (multiple measurements subject – particularly developmental/infant studies), see figures look like :easily accomplished simply adding group aesthetic!grouping data visualization code, may run instances graph winds looking funky. often result overlapping geoms.fix , think positions…","code":"\nmtcars %>%\n    ggplot(aes(y = wt, x = factor(gear), group = 1)) +\n    stat_summary(fun = \"mean\", geom = \"line\")\nmtcars %>%\n    ggplot(aes(y = wt, x = factor(gear), \n               group = factor(cyl), color = factor(cyl))) +\n    stat_summary(fun = \"mean\", geom = \"line\")\nweight_example %>%\n  ggplot(aes(y = Weight, x = Season)) + \n  geom_boxplot() +\n  geom_point() +\n  geom_line(aes(group = ID))"},{"path":"different-geoms-and-when-to-use-them.html","id":"positions","chapter":"11 Different Geoms and When To Use Them","heading":"11.5.3 Positions","text":"\n(great album though!)\nggplot2 number position/adjustment arguments can used cases. fact, already used one! Jittering position adjustment. , can create jitter plot using geom_jitter(), also accomplish thing using geom_point() setting position argument. e.g.,geom_point(position = \"jitter\") geom_point(position=position_jitter())effect thing. However, want include specific arguments (e.g., specify much vertical horizontal jitter ), can using longer position_*() format. helps create reproducible graphs, jitter otherwise random every time code ran create graph! Changing positional adjustments can drastically alter visualization generate.quick examples graphs came looking funky, using positional adjustments can fix .","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"identity","chapter":"11 Different Geoms and When To Use Them","heading":"11.5.3.1 Identity","text":"things start “identity” default position argument. Identity just overlaps elements:often results elements visualization hidden (definitely seems counterproductive).","code":"\npenguins %>%\n ggplot(aes(x = island, fill = species)) +\n  geom_bar(position = \"identity\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"dodging","chapter":"11 Different Geoms and When To Use Them","heading":"11.5.3.2 Dodging","text":"position = “dodge” places overlapping objects directly beside one another. makes easier compare individual values.\nNote: difference dodge dodge2 latter creates bit space elements. also notice , compared identity, scale y-axis graphs changed.\nuseful geoms bars well:Probably common use case error bars CIs. Observe following. default, often come looking funky:Adding position adjustments corrects !Sometimes want simultaneously dodge jitter. can jitterdodge.still quite cluttered needs work, way better !","code":"\npenguins %>%\n  ggplot(aes(x = island, fill = species)) +\n  geom_bar(position = position_dodge())\npenguins %>%\n  ggplot(aes(x = island, fill = species)) +\n  geom_bar(position = position_dodge2())\npenguins %>%\n ggplot(aes(y = body_mass_g, x = island, fill = species)) +\n     geom_point(shape = 21)\npenguins %>%\n ggplot(aes(y = body_mass_g, x = island, fill = species)) +\n     geom_point(shape = 21, position = position_dodge(width = .75))\ndata.frame(\n  x = c(\"a\",\"a\",\"b\",\"b\"),\n  y = 2:5,\n  g = rep(1:2, 2)\n) %>%\n  ggplot(aes(x, y, group = g)) +\n  geom_col(position = \"dodge\", fill = \"grey50\", color = \"black\")+\n  geom_errorbar(\n  aes(ymin = y - 1, ymax = y + 1),\n  width = 0.2,\n  position = \"dodge\"\n)\ndata.frame(\n  x = c(\"a\",\"a\",\"b\",\"b\"),\n  y = 2:5,\n  g = rep(1:2, 2)\n) %>%\n  ggplot(aes(x, y, group = g)) +\n  geom_col(position = \"dodge\", fill = \"grey50\", color = \"black\")+\n  geom_errorbar(\n    aes(ymin = y - 1, ymax = y + 1),\n    width = 0.2,\n    position = position_dodge(width = 0.9)\n)\npenguins %>%\nggplot(aes(x = island, y = body_mass_g, fill = species)) +\n    geom_boxplot(outlier.size = 0) +\n    geom_point(shape = 21)\npenguins %>%\nggplot(aes(x = island, y = body_mass_g, fill = species)) +\n    geom_boxplot(outlier.size = 0) +\n    geom_point(shape = 21, \n               position = position_jitterdodge(jitter.width = 0.3))"},{"path":"different-geoms-and-when-to-use-them.html","id":"stacking","chapter":"11 Different Geoms and When To Use Them","heading":"11.5.3.3 Stacking","text":"position = “fill” works like stacking, makes set stacked bars uniform height. makes easier compare proportions across groups.However, can misleading. Recall total number species == “Gentoo” penguins much greater species == “Chinstrap”, even though look different . can compare proportions easily, proportions may correspond drastically different raw numbers.","code":"\npenguins %>%\nggplot(aes(x = island, fill = species)) +\n  geom_bar(position = position_fill())"},{"path":"different-geoms-and-when-to-use-them.html","id":"categorical-categorical","chapter":"11 Different Geoms and When To Use Them","heading":"11.6 Categorical ~ Categorical","text":"variation visualizations one categorical variable, just adding second variable x-axis aesthetic mapping.add fill= mapping aesthetic set equal species (categorical variable data). can see, kind hard parse, likely used practice quick glimpse collaborators.","code":"\n# Counts\npenguins %>%\n  ggplot(aes(x = island, fill = species)) + \n  geom_bar(stat = \"count\")\n# Proportions\npenguins %>%\n  ggplot(aes(x = island, fill = species)) + \n    geom_bar(position = position_fill())"},{"path":"different-geoms-and-when-to-use-them.html","id":"cont-cat-cat","chapter":"11 Different Geoms and When To Use Them","heading":"11.6.1 Cont ~ Cat + Cat","text":"Add another aesthetic Cont ~ Cator facet","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(#height = 0, width = 0.2, \n              size = 1, alpha = 0.7,\n              #color = \"darkgreen\",\n              aes(fill = species),\n              pch = 21,\n              position = position_jitterdodge()) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\",\n               color = \"black\",\n               #fill = \"red\",\n               shape = 21,\n               size = 0.5,\n               aes(shape = species,\n                   fill = species),\n               position = position_dodge(width = 0.7))\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = island)) +\n  geom_jitter(height = 0, width = 0.2, \n              size = 2, alpha = 0.4,\n              pch = 21,\n              aes(shape = island,\n                   fill = island)) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"linerange\",\n               color = \"black\",\n               size = 2) +\n      stat_summary(fun = \"mean\",\n               geom = \"point\",\n               color = \"black\",\n               shape = 21,\n               size = 2.5,\n               aes(fill=island))+\n  facet_grid(cols = vars(species))"},{"path":"different-geoms-and-when-to-use-them.html","id":"raster","chapter":"11 Different Geoms and When To Use Them","heading":"11.6.1.1 Raster","text":"useful looking variable interest varies function two variables. Particularly categorical variables many levels.Looks way better levels variables, example:","code":"\npenguins %>%\n  ggplot(aes(x = island,\n             y = species,\n             z = body_mass_g)) +\n  stat_summary_2d(fun = \"mean\", geom = \"tile\")\ndiamonds %>%\n  ggplot(aes(x = color,\n             y = clarity,\n             z = carat)) +\n  stat_summary_2d(fun = \"mean\", geom = \"tile\",\n                  color = \"black\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"extras-1","chapter":"11 Different Geoms and When To Use Them","heading":"11.6.1.2 Extras","text":"may asked make visualizations like following. , code case needed.Bars:Lines:Fancier lines:","code":"\npenguins %>%\n  drop_na() %>%\n  ggplot(aes(x = island,\n             y = body_mass_g,\n             group = sex,\n             fill = sex)) +\n  stat_summary(fun = \"mean\",\n               geom = \"bar\",\n               position = position_dodge(width = 0.9),\n               color = \"black\") +\n  stat_summary(fun.data = \"mean_se\",\n               geom = \"linerange\",\n               position = position_dodge(width = 0.9))\npenguins %>%\n  drop_na() %>%\n  ggplot(aes(x = island,\n             y = body_mass_g,\n             group = sex,\n             color = sex)) +\n  stat_summary(fun = \"mean\",\n               geom = \"line\",\n               size = 1) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\")\npenguins %>%\n  drop_na() %>%\n  ggplot(aes(x = island,\n             y = body_mass_g,\n             group = sex,\n             color = sex)) +\n  stat_summary(fun = \"mean\",\n               geom = \"line\",\n               size = 2) +\n    stat_summary(fun.data = \"mean_se\",\n               geom = \"pointrange\",\n               size = 1) +\n    geom_vline(xintercept = seq(from = 0.5,\n                              by = 1,\n                              length.out = 3.5),\n             linetype = 2,\n             color = \"gray20\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"cont-cont-cat","chapter":"11 Different Geoms and When To Use Them","heading":"11.6.2 Cont ~ Cont + Cat","text":"Faceting scatter plots:","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g, x = bill_depth_mm)) +\n  geom_point()+\n  facet_grid(cols = vars(species))"},{"path":"different-geoms-and-when-to-use-them.html","id":"cont-cont-cont","chapter":"11 Different Geoms and When To Use Them","heading":"11.6.3 Cont ~ Cont + Cont","text":"Similar 2d histogram except instead counts, z-axis shows values continuous variable.","code":"\npenguins %>%\n  ggplot(aes(y = body_mass_g,\n             x = bill_depth_mm,\n             z = flipper_length_mm)) +\n  stat_summary_2d(color = \"black\")\npenguins %>%\n  ggplot(aes(y = body_mass_g,\n             x = bill_depth_mm,\n             z = flipper_length_mm)) +\n  stat_summary_hex(color = \"black\")"},{"path":"different-geoms-and-when-to-use-them.html","id":"custom-geoms","chapter":"11 Different Geoms and When To Use Them","heading":"11.7 Custom geoms","text":"one exception, visualizations covered use geoms built ggplot2. However, saw one exception, packages contain many geoms use ggplot! addition loading new geoms packages, can use code create . Code included create 2 geoms can used make 2 visualizations currently pretty popular:","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"split-violin-plot","chapter":"11 Different Geoms and When To Use Them","heading":"11.7.1 Split Violin Plot","text":"split violin plot allows easily compare two groups (across levels another variable).\nNote: works comparing two groups! imagine difficult create visualization island measurements 2 species. possible 3 violins 3 box plots work.\n","code":"\nsource(\"geom_split_violin.R\")\npenguins %>%\nggplot(aes(x = island, y = body_mass_g, fill = species)) +\n  geom_split_violin(trim = FALSE, alpha = .4)+\n  geom_boxplot(width = .2, alpha = .6, \n               fatten = NULL, show.legend = FALSE) +\n  stat_summary(fun.data = \"mean_se\", geom = \"pointrange\", \n               show.legend = F, \n               position = position_dodge(.175))"},{"path":"different-geoms-and-when-to-use-them.html","id":"raincloud","chapter":"11 Different Geoms and When To Use Them","heading":"11.7.2 Raincloud","text":"Raincloud plots mentioned passing . However, can extremely effective ways communicating lot information. example template code fleshed version.","code":"\nsource(\"geom_flat_violin.R\")\nrain_height <- .1\n\npenguins %>%\nggplot(aes(x = \"\", y = body_mass_g, fill = species)) +\n  # clouds  \n  geom_flat_violin(position = position_nudge(x = rain_height+.05),\n                   alpha = 0.4, trim = FALSE) + \n  # rain\n  geom_point(aes(color = species), size = 2, \n             alpha = .5, show.legend = FALSE, \n              position = position_jitter(width = 0.05, height = 0)) +\n  # boxplots\n  geom_boxplot(width = 0.05, alpha = 0.4, \n               show.legend = FALSE, outlier.shape = NA,\n               position = position_nudge(x = -rain_height*2)) +\n  # mean and SE point in the cloud\n  stat_summary(fun.data = mean_cl_normal, mapping = aes(color = species), \n               show.legend = FALSE,\n               position = position_nudge(x = rain_height * 3)) +\n  # adjust layout\n  scale_x_discrete(name = \"\", expand = c(rain_height*3, 0, 0, 0.7)) +\n  scale_y_continuous(limits = c(2000, 7000)) +\n  coord_flip()"},{"path":"different-geoms-and-when-to-use-them.html","id":"best-practices","chapter":"11 Different Geoms and When To Use Them","heading":"11.8 Best Practices:","text":"guidelines best practices considered designing visualizations.Graphs EASILY readable, first foremost. top design philosophy constructing graphs.\nLabel everything (axes, titles, legends, anything else) make labels intuitive.\nFollow conventions: y = response variable, x = predictor, mindful variable types, etc.\nPeople need review caption understand visualization showing.\nLabel everything (axes, titles, legends, anything else) make labels intuitive.Follow conventions: y = response variable, x = predictor, mindful variable types, etc.People need review caption understand visualization showing.Graphs purposeful\nspecific relationship trend data trying communicate visualization?\nspecific relationship trend data trying communicate visualization?Graphs facilitate quantitative interpretation comparison, allow inferential statistics eye.\nRepresent variability (show full distribution, include error bars confidence intervals).\nShow relationship trends, means, etc.\nRepresent variability (show full distribution, include error bars confidence intervals).Show relationship trends, means, etc.Cool =/= best.\nJust can make crazy complex graph visualizes lot different variables, might even interactive show lot information, mean best thing . Just CAN something always mean . Keep things simple clean, following conventions type data relationship.\nJust can make crazy complex graph visualizes lot different variables, might even interactive show lot information, mean best thing . Just CAN something always mean . Keep things simple clean, following conventions type data relationship.Make visualization aesthetically pleasing cost wasting ink.","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"extra-resources-1","chapter":"11 Different Geoms and When To Use Them","heading":"11.9 Extra Resources","text":"ggplot2 referenceR graphics cookbookggplot2 bookggplot2 cheat sheetHelp understand different types graphsRecommendations best graphs visualizing particular relationshipsr-specific information construct graphsMore r-specific stuff. Top 50 ggplot geomsInfo plotlyggplot2 extensionsFundamentals Data Visualization","code":""},{"path":"different-geoms-and-when-to-use-them.html","id":"citations","chapter":"11 Different Geoms and When To Use Them","heading":"11.10 Citations","text":"always, illustrations @allison_horstCustom violin plots modified source code ","code":""}]
